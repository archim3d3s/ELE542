
proto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00001c0c  00001ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000062  0080006c  0080006c  00001cac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000feb  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  00002e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007dd  00000000  00000000  000033cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00003bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000495  00000000  00000000  00003e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007cc  00000000  00000000  00004321  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004aed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__vector_15>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3c       	cpi	r26, 0xCE	; 206
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 85 03 	call	0x70a	; 0x70a <main>
      8a:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_16>:
volatile INT16U	LEFT_Vmax_neg = 1023;
volatile INT16U	LEFT_Vzero_neg = 0;

/********************** Interrupt ADC conversion done *********************/	
ISR (ADC_vect)
{
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	2f 93       	push	r18
      9e:	3f 93       	push	r19
      a0:	8f 93       	push	r24
      a2:	9f 93       	push	r25
      a4:	af 93       	push	r26
      a6:	bf 93       	push	r27
	//Cette routine lit la valeur sur le canal ADC actif et fait la moyenne
	//à l'aide du compteur de lecture	
	if(ADMUX)
      a8:	87 b1       	in	r24, 0x07	; 7
      aa:	88 23       	and	r24, r24
      ac:	51 f1       	breq	.+84     	; 0x102 <__vector_16+0x70>
	{
		RIGHT_counter++;
      ae:	80 91 78 00 	lds	r24, 0x0078
      b2:	90 91 79 00 	lds	r25, 0x0079
      b6:	a0 91 7a 00 	lds	r26, 0x007A
      ba:	b0 91 7b 00 	lds	r27, 0x007B
      be:	01 96       	adiw	r24, 0x01	; 1
      c0:	a1 1d       	adc	r26, r1
      c2:	b1 1d       	adc	r27, r1
      c4:	80 93 78 00 	sts	0x0078, r24
      c8:	90 93 79 00 	sts	0x0079, r25
      cc:	a0 93 7a 00 	sts	0x007A, r26
      d0:	b0 93 7b 00 	sts	0x007B, r27
		RIGHT_ADCvalue += ADC;
      d4:	24 b1       	in	r18, 0x04	; 4
      d6:	35 b1       	in	r19, 0x05	; 5
      d8:	80 91 74 00 	lds	r24, 0x0074
      dc:	90 91 75 00 	lds	r25, 0x0075
      e0:	a0 91 76 00 	lds	r26, 0x0076
      e4:	b0 91 77 00 	lds	r27, 0x0077
      e8:	82 0f       	add	r24, r18
      ea:	93 1f       	adc	r25, r19
      ec:	a1 1d       	adc	r26, r1
      ee:	b1 1d       	adc	r27, r1
      f0:	80 93 74 00 	sts	0x0074, r24
      f4:	90 93 75 00 	sts	0x0075, r25
      f8:	a0 93 76 00 	sts	0x0076, r26
      fc:	b0 93 77 00 	sts	0x0077, r27
     100:	29 c0       	rjmp	.+82     	; 0x154 <__vector_16+0xc2>
	}
	else
	{
		LEFT_counter++;
     102:	80 91 80 00 	lds	r24, 0x0080
     106:	90 91 81 00 	lds	r25, 0x0081
     10a:	a0 91 82 00 	lds	r26, 0x0082
     10e:	b0 91 83 00 	lds	r27, 0x0083
     112:	01 96       	adiw	r24, 0x01	; 1
     114:	a1 1d       	adc	r26, r1
     116:	b1 1d       	adc	r27, r1
     118:	80 93 80 00 	sts	0x0080, r24
     11c:	90 93 81 00 	sts	0x0081, r25
     120:	a0 93 82 00 	sts	0x0082, r26
     124:	b0 93 83 00 	sts	0x0083, r27
		LEFT_ADCvalue += ADC;
     128:	24 b1       	in	r18, 0x04	; 4
     12a:	35 b1       	in	r19, 0x05	; 5
     12c:	80 91 7c 00 	lds	r24, 0x007C
     130:	90 91 7d 00 	lds	r25, 0x007D
     134:	a0 91 7e 00 	lds	r26, 0x007E
     138:	b0 91 7f 00 	lds	r27, 0x007F
     13c:	82 0f       	add	r24, r18
     13e:	93 1f       	adc	r25, r19
     140:	a1 1d       	adc	r26, r1
     142:	b1 1d       	adc	r27, r1
     144:	80 93 7c 00 	sts	0x007C, r24
     148:	90 93 7d 00 	sts	0x007D, r25
     14c:	a0 93 7e 00 	sts	0x007E, r26
     150:	b0 93 7f 00 	sts	0x007F, r27
	}
	//Alterner le canal actif entre le canal 0 et le canal 1
	ADMUX ^= 1;
     154:	97 b1       	in	r25, 0x07	; 7
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	89 27       	eor	r24, r25
     15a:	87 b9       	out	0x07, r24	; 7
}
     15c:	bf 91       	pop	r27
     15e:	af 91       	pop	r26
     160:	9f 91       	pop	r25
     162:	8f 91       	pop	r24
     164:	3f 91       	pop	r19
     166:	2f 91       	pop	r18
     168:	0f 90       	pop	r0
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	0f 90       	pop	r0
     16e:	1f 90       	pop	r1
     170:	18 95       	reti

00000172 <DIR_bit_ON>:

void DIR_bit_ON (INT8U direction)	{PORTD |= (1<<direction);}
     172:	42 b3       	in	r20, 0x12	; 18
     174:	21 e0       	ldi	r18, 0x01	; 1
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	b9 01       	movw	r22, r18
     17a:	02 c0       	rjmp	.+4      	; 0x180 <DIR_bit_ON+0xe>
     17c:	66 0f       	add	r22, r22
     17e:	77 1f       	adc	r23, r23
     180:	8a 95       	dec	r24
     182:	e2 f7       	brpl	.-8      	; 0x17c <DIR_bit_ON+0xa>
     184:	cb 01       	movw	r24, r22
     186:	84 2b       	or	r24, r20
     188:	82 bb       	out	0x12, r24	; 18
     18a:	08 95       	ret

0000018c <DIR_bit_OFF>:
void DIR_bit_OFF(INT8U direction)	{PORTD &= ~(1<<direction);}
     18c:	92 b3       	in	r25, 0x12	; 18
     18e:	21 e0       	ldi	r18, 0x01	; 1
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	02 c0       	rjmp	.+4      	; 0x198 <DIR_bit_OFF+0xc>
     194:	22 0f       	add	r18, r18
     196:	33 1f       	adc	r19, r19
     198:	8a 95       	dec	r24
     19a:	e2 f7       	brpl	.-8      	; 0x194 <DIR_bit_OFF+0x8>
     19c:	20 95       	com	r18
     19e:	92 23       	and	r25, r18
     1a0:	92 bb       	out	0x12, r25	; 18
     1a2:	08 95       	ret

000001a4 <initADC>:
	  - Référence de voltage = AREF
	  - Mode de traitement des acquisitions = Interruption
    */	
	// [Datasheet p.212]
    // AREF-interne et Vref desactivée, Résultat ajusté à droite. 
	ADMUX = (0<<REFS1)|(0<<REFS0)|(0<<ADLAR)|(0<<MUX4)|
     1a4:	17 b8       	out	0x07, r1	; 7
			(0<<MUX3) |(0<<MUX2) |(0<<MUX1) |(0<<MUX0);

    // Active l'ADC, démarre la conversion, active les interruptions 
	// et prescaler de 128 pour f=125kHz
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADPS2)
     1a6:	8f ee       	ldi	r24, 0xEF	; 239
     1a8:	86 b9       	out	0x06, r24	; 6
			|(1<<ADPS1)|(1<<ADPS0)|(1<<ADATE);

	// Mode d'opération free-run [voir datasheet p.216]
	SFIOR |= (0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
     1aa:	80 b7       	in	r24, 0x30	; 48
     1ac:	80 bf       	out	0x30, r24	; 48
	
	//Configure port A with pin A4 as an output, others are inputs
	DDRA = (1<<PA4);
     1ae:	80 e1       	ldi	r24, 0x10	; 16
     1b0:	8a bb       	out	0x1a, r24	; 26
	
	//Configure PORT D  as outputs except for PD1 et PD0 
	DDRD |= (1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7); 
     1b2:	81 b3       	in	r24, 0x11	; 17
     1b4:	8c 6f       	ori	r24, 0xFC	; 252
     1b6:	81 bb       	out	0x11, r24	; 17
     1b8:	08 95       	ret

000001ba <resetADC>:
/**************************************************************************/	

/******************************* Reset ADC ********************************/	
void resetADC(void)
{
	cli();
     1ba:	f8 94       	cli
	LEFT_counter   = 0;
     1bc:	10 92 80 00 	sts	0x0080, r1
     1c0:	10 92 81 00 	sts	0x0081, r1
     1c4:	10 92 82 00 	sts	0x0082, r1
     1c8:	10 92 83 00 	sts	0x0083, r1
	LEFT_ADCvalue  = 0;
     1cc:	10 92 7c 00 	sts	0x007C, r1
     1d0:	10 92 7d 00 	sts	0x007D, r1
     1d4:	10 92 7e 00 	sts	0x007E, r1
     1d8:	10 92 7f 00 	sts	0x007F, r1
	RIGHT_counter  = 0;
     1dc:	10 92 78 00 	sts	0x0078, r1
     1e0:	10 92 79 00 	sts	0x0079, r1
     1e4:	10 92 7a 00 	sts	0x007A, r1
     1e8:	10 92 7b 00 	sts	0x007B, r1
	RIGHT_ADCvalue = 0;
     1ec:	10 92 74 00 	sts	0x0074, r1
     1f0:	10 92 75 00 	sts	0x0075, r1
     1f4:	10 92 76 00 	sts	0x0076, r1
     1f8:	10 92 77 00 	sts	0x0077, r1
	sei();
     1fc:	78 94       	sei
     1fe:	08 95       	ret

00000200 <motor_calibration>:
	// 0   0    1    0   Vzero+
	// 0   1    0    0   Vzero-
	// 1   1    0    0   Vmax-
	
	//Les PWM doivent être maintenus à 0 pendant la calibration.
	PWM_GAUCHE = 0;
     200:	19 bc       	out	0x29, r1	; 41
     202:	18 bc       	out	0x28, r1	; 40
	PWM_DROIT  = 0;
     204:	1b bc       	out	0x2b, r1	; 43
     206:	1a bc       	out	0x2a, r1	; 42
	
	//Mesure de Vmax + pour chaque moteur
	CAL_bit_ON();
     208:	dc 9a       	sbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	2f ef       	ldi	r18, 0xFF	; 255
     20c:	80 e7       	ldi	r24, 0x70	; 112
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	21 50       	subi	r18, 0x01	; 1
     212:	80 40       	sbci	r24, 0x00	; 0
     214:	90 40       	sbci	r25, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <motor_calibration+0x10>
     218:	00 c0       	rjmp	.+0      	; 0x21a <motor_calibration+0x1a>
     21a:	00 00       	nop
	_delay_ms(50);
	DIR_bit_OFF(RIGHT_DIR2); DIR_bit_OFF(LEFT_DIR2); 
     21c:	87 e0       	ldi	r24, 0x07	; 7
     21e:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     222:	83 e0       	ldi	r24, 0x03	; 3
     224:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
	DIR_bit_ON (RIGHT_DIR1); DIR_bit_ON (LEFT_DIR1);
     228:	86 e0       	ldi	r24, 0x06	; 6
     22a:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     22e:	82 e0       	ldi	r24, 0x02	; 2
     230:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
	
	resetADC();
     234:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
	
	while(RIGHT_counter < CALIB_SAMPLE_NB && LEFT_counter < CALIB_SAMPLE_NB);
     238:	80 91 78 00 	lds	r24, 0x0078
     23c:	90 91 79 00 	lds	r25, 0x0079
     240:	a0 91 7a 00 	lds	r26, 0x007A
     244:	b0 91 7b 00 	lds	r27, 0x007B
     248:	c2 97       	sbiw	r24, 0x32	; 50
     24a:	a1 05       	cpc	r26, r1
     24c:	b1 05       	cpc	r27, r1
     24e:	60 f4       	brcc	.+24     	; 0x268 <motor_calibration+0x68>
     250:	80 91 80 00 	lds	r24, 0x0080
     254:	90 91 81 00 	lds	r25, 0x0081
     258:	a0 91 82 00 	lds	r26, 0x0082
     25c:	b0 91 83 00 	lds	r27, 0x0083
     260:	c2 97       	sbiw	r24, 0x32	; 50
     262:	a1 05       	cpc	r26, r1
     264:	b1 05       	cpc	r27, r1
     266:	40 f3       	brcs	.-48     	; 0x238 <motor_calibration+0x38>
	
	RIGHT_Vmax_pos = RIGHT_ADCvalue / RIGHT_counter;
     268:	60 91 74 00 	lds	r22, 0x0074
     26c:	70 91 75 00 	lds	r23, 0x0075
     270:	80 91 76 00 	lds	r24, 0x0076
     274:	90 91 77 00 	lds	r25, 0x0077
     278:	20 91 78 00 	lds	r18, 0x0078
     27c:	30 91 79 00 	lds	r19, 0x0079
     280:	40 91 7a 00 	lds	r20, 0x007A
     284:	50 91 7b 00 	lds	r21, 0x007B
     288:	0e 94 11 0b 	call	0x1622	; 0x1622 <__udivmodsi4>
     28c:	30 93 67 00 	sts	0x0067, r19
     290:	20 93 66 00 	sts	0x0066, r18
	LEFT_Vmax_pos  = LEFT_ADCvalue / LEFT_counter;
     294:	60 91 7c 00 	lds	r22, 0x007C
     298:	70 91 7d 00 	lds	r23, 0x007D
     29c:	80 91 7e 00 	lds	r24, 0x007E
     2a0:	90 91 7f 00 	lds	r25, 0x007F
     2a4:	20 91 80 00 	lds	r18, 0x0080
     2a8:	30 91 81 00 	lds	r19, 0x0081
     2ac:	40 91 82 00 	lds	r20, 0x0082
     2b0:	50 91 83 00 	lds	r21, 0x0083
     2b4:	0e 94 11 0b 	call	0x1622	; 0x1622 <__udivmodsi4>
     2b8:	30 93 63 00 	sts	0x0063, r19
     2bc:	20 93 62 00 	sts	0x0062, r18
	
	//Mesure de Vzero + pour chaque moteur
	CAL_bit_OFF();	
     2c0:	dc 98       	cbi	0x1b, 4	; 27
     2c2:	2f ef       	ldi	r18, 0xFF	; 255
     2c4:	80 e7       	ldi	r24, 0x70	; 112
     2c6:	92 e0       	ldi	r25, 0x02	; 2
     2c8:	21 50       	subi	r18, 0x01	; 1
     2ca:	80 40       	sbci	r24, 0x00	; 0
     2cc:	90 40       	sbci	r25, 0x00	; 0
     2ce:	e1 f7       	brne	.-8      	; 0x2c8 <motor_calibration+0xc8>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <motor_calibration+0xd2>
     2d2:	00 00       	nop
	_delay_ms(50);
	resetADC();
     2d4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
	
	while(RIGHT_counter < CALIB_SAMPLE_NB && LEFT_counter < CALIB_SAMPLE_NB);
     2d8:	80 91 78 00 	lds	r24, 0x0078
     2dc:	90 91 79 00 	lds	r25, 0x0079
     2e0:	a0 91 7a 00 	lds	r26, 0x007A
     2e4:	b0 91 7b 00 	lds	r27, 0x007B
     2e8:	c2 97       	sbiw	r24, 0x32	; 50
     2ea:	a1 05       	cpc	r26, r1
     2ec:	b1 05       	cpc	r27, r1
     2ee:	60 f4       	brcc	.+24     	; 0x308 <motor_calibration+0x108>
     2f0:	80 91 80 00 	lds	r24, 0x0080
     2f4:	90 91 81 00 	lds	r25, 0x0081
     2f8:	a0 91 82 00 	lds	r26, 0x0082
     2fc:	b0 91 83 00 	lds	r27, 0x0083
     300:	c2 97       	sbiw	r24, 0x32	; 50
     302:	a1 05       	cpc	r26, r1
     304:	b1 05       	cpc	r27, r1
     306:	40 f3       	brcs	.-48     	; 0x2d8 <motor_calibration+0xd8>
		
	RIGHT_Vzero_pos = RIGHT_ADCvalue / RIGHT_counter;
     308:	60 91 74 00 	lds	r22, 0x0074
     30c:	70 91 75 00 	lds	r23, 0x0075
     310:	80 91 76 00 	lds	r24, 0x0076
     314:	90 91 77 00 	lds	r25, 0x0077
     318:	20 91 78 00 	lds	r18, 0x0078
     31c:	30 91 79 00 	lds	r19, 0x0079
     320:	40 91 7a 00 	lds	r20, 0x007A
     324:	50 91 7b 00 	lds	r21, 0x007B
     328:	0e 94 11 0b 	call	0x1622	; 0x1622 <__udivmodsi4>
     32c:	30 93 73 00 	sts	0x0073, r19
     330:	20 93 72 00 	sts	0x0072, r18
	LEFT_Vzero_pos  = LEFT_ADCvalue / LEFT_counter;	
     334:	60 91 7c 00 	lds	r22, 0x007C
     338:	70 91 7d 00 	lds	r23, 0x007D
     33c:	80 91 7e 00 	lds	r24, 0x007E
     340:	90 91 7f 00 	lds	r25, 0x007F
     344:	20 91 80 00 	lds	r18, 0x0080
     348:	30 91 81 00 	lds	r19, 0x0081
     34c:	40 91 82 00 	lds	r20, 0x0082
     350:	50 91 83 00 	lds	r21, 0x0083
     354:	0e 94 11 0b 	call	0x1622	; 0x1622 <__udivmodsi4>
     358:	30 93 6f 00 	sts	0x006F, r19
     35c:	20 93 6e 00 	sts	0x006E, r18
	
	//Mesure de Vzero - pour chaque moteur
	
	DIR_bit_OFF(RIGHT_DIR1); DIR_bit_OFF(LEFT_DIR1);
     360:	86 e0       	ldi	r24, 0x06	; 6
     362:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
	DIR_bit_ON (RIGHT_DIR2); DIR_bit_ON (LEFT_DIR2);
     36c:	87 e0       	ldi	r24, 0x07	; 7
     36e:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     378:	2f ef       	ldi	r18, 0xFF	; 255
     37a:	80 e7       	ldi	r24, 0x70	; 112
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	21 50       	subi	r18, 0x01	; 1
     380:	80 40       	sbci	r24, 0x00	; 0
     382:	90 40       	sbci	r25, 0x00	; 0
     384:	e1 f7       	brne	.-8      	; 0x37e <motor_calibration+0x17e>
     386:	00 c0       	rjmp	.+0      	; 0x388 <motor_calibration+0x188>
     388:	00 00       	nop
	_delay_ms(50);
	resetADC();
     38a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
	
	while(RIGHT_counter < CALIB_SAMPLE_NB && LEFT_counter < CALIB_SAMPLE_NB);
     38e:	80 91 78 00 	lds	r24, 0x0078
     392:	90 91 79 00 	lds	r25, 0x0079
     396:	a0 91 7a 00 	lds	r26, 0x007A
     39a:	b0 91 7b 00 	lds	r27, 0x007B
     39e:	c2 97       	sbiw	r24, 0x32	; 50
     3a0:	a1 05       	cpc	r26, r1
     3a2:	b1 05       	cpc	r27, r1
     3a4:	60 f4       	brcc	.+24     	; 0x3be <motor_calibration+0x1be>
     3a6:	80 91 80 00 	lds	r24, 0x0080
     3aa:	90 91 81 00 	lds	r25, 0x0081
     3ae:	a0 91 82 00 	lds	r26, 0x0082
     3b2:	b0 91 83 00 	lds	r27, 0x0083
     3b6:	c2 97       	sbiw	r24, 0x32	; 50
     3b8:	a1 05       	cpc	r26, r1
     3ba:	b1 05       	cpc	r27, r1
     3bc:	40 f3       	brcs	.-48     	; 0x38e <motor_calibration+0x18e>
	
	RIGHT_Vzero_neg = RIGHT_ADCvalue / RIGHT_counter;	
     3be:	60 91 74 00 	lds	r22, 0x0074
     3c2:	70 91 75 00 	lds	r23, 0x0075
     3c6:	80 91 76 00 	lds	r24, 0x0076
     3ca:	90 91 77 00 	lds	r25, 0x0077
     3ce:	20 91 78 00 	lds	r18, 0x0078
     3d2:	30 91 79 00 	lds	r19, 0x0079
     3d6:	40 91 7a 00 	lds	r20, 0x007A
     3da:	50 91 7b 00 	lds	r21, 0x007B
     3de:	0e 94 11 0b 	call	0x1622	; 0x1622 <__udivmodsi4>
     3e2:	30 93 71 00 	sts	0x0071, r19
     3e6:	20 93 70 00 	sts	0x0070, r18
	LEFT_Vzero_neg  = LEFT_ADCvalue / LEFT_counter;	
     3ea:	60 91 7c 00 	lds	r22, 0x007C
     3ee:	70 91 7d 00 	lds	r23, 0x007D
     3f2:	80 91 7e 00 	lds	r24, 0x007E
     3f6:	90 91 7f 00 	lds	r25, 0x007F
     3fa:	20 91 80 00 	lds	r18, 0x0080
     3fe:	30 91 81 00 	lds	r19, 0x0081
     402:	40 91 82 00 	lds	r20, 0x0082
     406:	50 91 83 00 	lds	r21, 0x0083
     40a:	0e 94 11 0b 	call	0x1622	; 0x1622 <__udivmodsi4>
     40e:	30 93 6d 00 	sts	0x006D, r19
     412:	20 93 6c 00 	sts	0x006C, r18
	
	//Mesure de Vmax - pour chaque moteur
	CAL_bit_ON();
     416:	dc 9a       	sbi	0x1b, 4	; 27
     418:	2f ef       	ldi	r18, 0xFF	; 255
     41a:	80 e7       	ldi	r24, 0x70	; 112
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	21 50       	subi	r18, 0x01	; 1
     420:	80 40       	sbci	r24, 0x00	; 0
     422:	90 40       	sbci	r25, 0x00	; 0
     424:	e1 f7       	brne	.-8      	; 0x41e <motor_calibration+0x21e>
     426:	00 c0       	rjmp	.+0      	; 0x428 <motor_calibration+0x228>
     428:	00 00       	nop
	_delay_ms(50);
	resetADC();
     42a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
	
	while(RIGHT_counter < CALIB_SAMPLE_NB && LEFT_counter < CALIB_SAMPLE_NB);
     42e:	80 91 78 00 	lds	r24, 0x0078
     432:	90 91 79 00 	lds	r25, 0x0079
     436:	a0 91 7a 00 	lds	r26, 0x007A
     43a:	b0 91 7b 00 	lds	r27, 0x007B
     43e:	c2 97       	sbiw	r24, 0x32	; 50
     440:	a1 05       	cpc	r26, r1
     442:	b1 05       	cpc	r27, r1
     444:	60 f4       	brcc	.+24     	; 0x45e <motor_calibration+0x25e>
     446:	80 91 80 00 	lds	r24, 0x0080
     44a:	90 91 81 00 	lds	r25, 0x0081
     44e:	a0 91 82 00 	lds	r26, 0x0082
     452:	b0 91 83 00 	lds	r27, 0x0083
     456:	c2 97       	sbiw	r24, 0x32	; 50
     458:	a1 05       	cpc	r26, r1
     45a:	b1 05       	cpc	r27, r1
     45c:	40 f3       	brcs	.-48     	; 0x42e <motor_calibration+0x22e>
	
	RIGHT_Vmax_neg = RIGHT_ADCvalue / RIGHT_counter;
     45e:	60 91 74 00 	lds	r22, 0x0074
     462:	70 91 75 00 	lds	r23, 0x0075
     466:	80 91 76 00 	lds	r24, 0x0076
     46a:	90 91 77 00 	lds	r25, 0x0077
     46e:	20 91 78 00 	lds	r18, 0x0078
     472:	30 91 79 00 	lds	r19, 0x0079
     476:	40 91 7a 00 	lds	r20, 0x007A
     47a:	50 91 7b 00 	lds	r21, 0x007B
     47e:	0e 94 11 0b 	call	0x1622	; 0x1622 <__udivmodsi4>
     482:	30 93 65 00 	sts	0x0065, r19
     486:	20 93 64 00 	sts	0x0064, r18
	LEFT_Vmax_neg  = LEFT_ADCvalue / LEFT_counter;
     48a:	60 91 7c 00 	lds	r22, 0x007C
     48e:	70 91 7d 00 	lds	r23, 0x007D
     492:	80 91 7e 00 	lds	r24, 0x007E
     496:	90 91 7f 00 	lds	r25, 0x007F
     49a:	20 91 80 00 	lds	r18, 0x0080
     49e:	30 91 81 00 	lds	r19, 0x0081
     4a2:	40 91 82 00 	lds	r20, 0x0082
     4a6:	50 91 83 00 	lds	r21, 0x0083
     4aa:	0e 94 11 0b 	call	0x1622	; 0x1622 <__udivmodsi4>
     4ae:	30 93 61 00 	sts	0x0061, r19
     4b2:	20 93 60 00 	sts	0x0060, r18
	
	resetADC();
     4b6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
	CAL_bit_OFF();
     4ba:	dc 98       	cbi	0x1b, 4	; 27
	DIR_bit_OFF(RIGHT_DIR2); DIR_bit_OFF(LEFT_DIR2);
     4bc:	87 e0       	ldi	r24, 0x07	; 7
     4be:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     4c8:	08 95       	ret

000004ca <getADCmeanValues>:
}
/**************************************************************************/	

/*************************** get ADC mean value ***************************/	
void getADCmeanValues(float* right, float* left)
{
     4ca:	4f 92       	push	r4
     4cc:	5f 92       	push	r5
     4ce:	6f 92       	push	r6
     4d0:	7f 92       	push	r7
     4d2:	8f 92       	push	r8
     4d4:	9f 92       	push	r9
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	8c 01       	movw	r16, r24
     4ec:	eb 01       	movw	r28, r22
	cli();
     4ee:	f8 94       	cli

	if(DIR_D) /* Vitesse négative droite */
     4f0:	cb 9b       	sbis	0x19, 3	; 25
     4f2:	3f c0       	rjmp	.+126    	; 0x572 <getADCmeanValues+0xa8>
	{
		*right = -1.0*((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     4f4:	60 91 74 00 	lds	r22, 0x0074
     4f8:	70 91 75 00 	lds	r23, 0x0075
     4fc:	80 91 76 00 	lds	r24, 0x0076
     500:	90 91 77 00 	lds	r25, 0x0077
     504:	c0 90 78 00 	lds	r12, 0x0078
     508:	d0 90 79 00 	lds	r13, 0x0079
     50c:	e0 90 7a 00 	lds	r14, 0x007A
     510:	f0 90 7b 00 	lds	r15, 0x007B
					  /(float)(RIGHT_Vmax_neg-RIGHT_Vzero_neg);
     514:	a0 90 64 00 	lds	r10, 0x0064
     518:	b0 90 65 00 	lds	r11, 0x0065
     51c:	80 90 70 00 	lds	r8, 0x0070
     520:	90 90 71 00 	lds	r9, 0x0071
{
	cli();

	if(DIR_D) /* Vitesse négative droite */
	{
		*right = -1.0*((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     524:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     528:	2b 01       	movw	r4, r22
     52a:	3c 01       	movw	r6, r24
     52c:	c7 01       	movw	r24, r14
     52e:	b6 01       	movw	r22, r12
     530:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     534:	9b 01       	movw	r18, r22
     536:	ac 01       	movw	r20, r24
     538:	c3 01       	movw	r24, r6
     53a:	b2 01       	movw	r22, r4
     53c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3>
     540:	6b 01       	movw	r12, r22
     542:	7c 01       	movw	r14, r24
     544:	f7 fa       	bst	r15, 7
     546:	f0 94       	com	r15
     548:	f7 f8       	bld	r15, 7
     54a:	f0 94       	com	r15
					  /(float)(RIGHT_Vmax_neg-RIGHT_Vzero_neg);
     54c:	b5 01       	movw	r22, r10
     54e:	68 19       	sub	r22, r8
     550:	79 09       	sbc	r23, r9
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     55a:	9b 01       	movw	r18, r22
     55c:	ac 01       	movw	r20, r24
     55e:	c7 01       	movw	r24, r14
     560:	b6 01       	movw	r22, r12
     562:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3>
{
	cli();

	if(DIR_D) /* Vitesse négative droite */
	{
		*right = -1.0*((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     566:	f8 01       	movw	r30, r16
     568:	60 83       	st	Z, r22
     56a:	71 83       	std	Z+1, r23	; 0x01
     56c:	82 83       	std	Z+2, r24	; 0x02
     56e:	93 83       	std	Z+3, r25	; 0x03
     570:	3a c0       	rjmp	.+116    	; 0x5e6 <getADCmeanValues+0x11c>
					  /(float)(RIGHT_Vmax_neg-RIGHT_Vzero_neg);

	}
	else      /* Vitesse positive droite */
	{
		*right = ((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     572:	60 91 74 00 	lds	r22, 0x0074
     576:	70 91 75 00 	lds	r23, 0x0075
     57a:	80 91 76 00 	lds	r24, 0x0076
     57e:	90 91 77 00 	lds	r25, 0x0077
     582:	c0 90 78 00 	lds	r12, 0x0078
     586:	d0 90 79 00 	lds	r13, 0x0079
     58a:	e0 90 7a 00 	lds	r14, 0x007A
     58e:	f0 90 7b 00 	lds	r15, 0x007B
				 /(float)(RIGHT_Vmax_pos-RIGHT_Vzero_pos);
     592:	a0 90 66 00 	lds	r10, 0x0066
     596:	b0 90 67 00 	lds	r11, 0x0067
     59a:	80 90 72 00 	lds	r8, 0x0072
     59e:	90 90 73 00 	lds	r9, 0x0073
					  /(float)(RIGHT_Vmax_neg-RIGHT_Vzero_neg);

	}
	else      /* Vitesse positive droite */
	{
		*right = ((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     5a2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     5a6:	2b 01       	movw	r4, r22
     5a8:	3c 01       	movw	r6, r24
     5aa:	c7 01       	movw	r24, r14
     5ac:	b6 01       	movw	r22, r12
     5ae:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     5b2:	9b 01       	movw	r18, r22
     5b4:	ac 01       	movw	r20, r24
     5b6:	c3 01       	movw	r24, r6
     5b8:	b2 01       	movw	r22, r4
     5ba:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3>
     5be:	6b 01       	movw	r12, r22
     5c0:	7c 01       	movw	r14, r24
				 /(float)(RIGHT_Vmax_pos-RIGHT_Vzero_pos);
     5c2:	b5 01       	movw	r22, r10
     5c4:	68 19       	sub	r22, r8
     5c6:	79 09       	sbc	r23, r9
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	c7 01       	movw	r24, r14
     5d6:	b6 01       	movw	r22, r12
     5d8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3>
					  /(float)(RIGHT_Vmax_neg-RIGHT_Vzero_neg);

	}
	else      /* Vitesse positive droite */
	{
		*right = ((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     5dc:	f8 01       	movw	r30, r16
     5de:	60 83       	st	Z, r22
     5e0:	71 83       	std	Z+1, r23	; 0x01
     5e2:	82 83       	std	Z+2, r24	; 0x02
     5e4:	93 83       	std	Z+3, r25	; 0x03
				 /(float)(RIGHT_Vmax_pos-RIGHT_Vzero_pos);
	}
	
	if(DIR_G) /* Vitesse négative gauche */
     5e6:	ca 9b       	sbis	0x19, 2	; 25
     5e8:	3e c0       	rjmp	.+124    	; 0x666 <getADCmeanValues+0x19c>
	{
		*left = -1.0*((float)LEFT_ADCvalue/(float)LEFT_counter)
     5ea:	60 91 7c 00 	lds	r22, 0x007C
     5ee:	70 91 7d 00 	lds	r23, 0x007D
     5f2:	80 91 7e 00 	lds	r24, 0x007E
     5f6:	90 91 7f 00 	lds	r25, 0x007F
     5fa:	c0 90 80 00 	lds	r12, 0x0080
     5fe:	d0 90 81 00 	lds	r13, 0x0081
     602:	e0 90 82 00 	lds	r14, 0x0082
     606:	f0 90 83 00 	lds	r15, 0x0083
				     /(float)(LEFT_Vmax_neg-LEFT_Vzero_neg);
     60a:	a0 90 60 00 	lds	r10, 0x0060
     60e:	b0 90 61 00 	lds	r11, 0x0061
     612:	00 91 6c 00 	lds	r16, 0x006C
     616:	10 91 6d 00 	lds	r17, 0x006D
				 /(float)(RIGHT_Vmax_pos-RIGHT_Vzero_pos);
	}
	
	if(DIR_G) /* Vitesse négative gauche */
	{
		*left = -1.0*((float)LEFT_ADCvalue/(float)LEFT_counter)
     61a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     61e:	2b 01       	movw	r4, r22
     620:	3c 01       	movw	r6, r24
     622:	c7 01       	movw	r24, r14
     624:	b6 01       	movw	r22, r12
     626:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
     62e:	c3 01       	movw	r24, r6
     630:	b2 01       	movw	r22, r4
     632:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3>
     636:	6b 01       	movw	r12, r22
     638:	7c 01       	movw	r14, r24
     63a:	f7 fa       	bst	r15, 7
     63c:	f0 94       	com	r15
     63e:	f7 f8       	bld	r15, 7
     640:	f0 94       	com	r15
				     /(float)(LEFT_Vmax_neg-LEFT_Vzero_neg);
     642:	b5 01       	movw	r22, r10
     644:	60 1b       	sub	r22, r16
     646:	71 0b       	sbc	r23, r17
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     650:	9b 01       	movw	r18, r22
     652:	ac 01       	movw	r20, r24
     654:	c7 01       	movw	r24, r14
     656:	b6 01       	movw	r22, r12
     658:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3>
				 /(float)(RIGHT_Vmax_pos-RIGHT_Vzero_pos);
	}
	
	if(DIR_G) /* Vitesse négative gauche */
	{
		*left = -1.0*((float)LEFT_ADCvalue/(float)LEFT_counter)
     65c:	68 83       	st	Y, r22
     65e:	79 83       	std	Y+1, r23	; 0x01
     660:	8a 83       	std	Y+2, r24	; 0x02
     662:	9b 83       	std	Y+3, r25	; 0x03
     664:	39 c0       	rjmp	.+114    	; 0x6d8 <getADCmeanValues+0x20e>
				     /(float)(LEFT_Vmax_neg-LEFT_Vzero_neg);
	}

	else      /* Vitesse positive gauche */
	{
		*left = ((float)LEFT_ADCvalue/(float)LEFT_counter)
     666:	60 91 7c 00 	lds	r22, 0x007C
     66a:	70 91 7d 00 	lds	r23, 0x007D
     66e:	80 91 7e 00 	lds	r24, 0x007E
     672:	90 91 7f 00 	lds	r25, 0x007F
     676:	c0 90 80 00 	lds	r12, 0x0080
     67a:	d0 90 81 00 	lds	r13, 0x0081
     67e:	e0 90 82 00 	lds	r14, 0x0082
     682:	f0 90 83 00 	lds	r15, 0x0083
				/(float)(LEFT_Vmax_pos-LEFT_Vzero_pos);
     686:	a0 90 62 00 	lds	r10, 0x0062
     68a:	b0 90 63 00 	lds	r11, 0x0063
     68e:	00 91 6e 00 	lds	r16, 0x006E
     692:	10 91 6f 00 	lds	r17, 0x006F
				     /(float)(LEFT_Vmax_neg-LEFT_Vzero_neg);
	}

	else      /* Vitesse positive gauche */
	{
		*left = ((float)LEFT_ADCvalue/(float)LEFT_counter)
     696:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     69a:	2b 01       	movw	r4, r22
     69c:	3c 01       	movw	r6, r24
     69e:	c7 01       	movw	r24, r14
     6a0:	b6 01       	movw	r22, r12
     6a2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     6a6:	9b 01       	movw	r18, r22
     6a8:	ac 01       	movw	r20, r24
     6aa:	c3 01       	movw	r24, r6
     6ac:	b2 01       	movw	r22, r4
     6ae:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3>
     6b2:	6b 01       	movw	r12, r22
     6b4:	7c 01       	movw	r14, r24
				/(float)(LEFT_Vmax_pos-LEFT_Vzero_pos);
     6b6:	b5 01       	movw	r22, r10
     6b8:	60 1b       	sub	r22, r16
     6ba:	71 0b       	sbc	r23, r17
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
     6c8:	c7 01       	movw	r24, r14
     6ca:	b6 01       	movw	r22, r12
     6cc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3>
				     /(float)(LEFT_Vmax_neg-LEFT_Vzero_neg);
	}

	else      /* Vitesse positive gauche */
	{
		*left = ((float)LEFT_ADCvalue/(float)LEFT_counter)
     6d0:	68 83       	st	Y, r22
     6d2:	79 83       	std	Y+1, r23	; 0x01
     6d4:	8a 83       	std	Y+2, r24	; 0x02
     6d6:	9b 83       	std	Y+3, r25	; 0x03
				/(float)(LEFT_Vmax_pos-LEFT_Vzero_pos);
	}

	sei();	
     6d8:	78 94       	sei
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	7f 90       	pop	r7
     6f4:	6f 90       	pop	r6
     6f6:	5f 90       	pop	r5
     6f8:	4f 90       	pop	r4
     6fa:	08 95       	ret

000006fc <initLED>:
	
/****************************** INIT LED *********************************/
void initLED(void)
{
    /* PORT B as output */
    DDRB = 0xFF;
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	87 bb       	out	0x17, r24	; 23
    /* All LED off */
    PORTB = 0xFF;
     700:	88 bb       	out	0x18, r24	; 24
     702:	08 95       	ret

00000704 <updateLED>:
/*************************************************************************/

/****************************** UPDATE LED *******************************/
void updateLED(INT8U status)
{
	PORTB = ~status;
     704:	80 95       	com	r24
     706:	88 bb       	out	0x18, r24	; 24
     708:	08 95       	ret

0000070a <main>:

INT8U debugStr[30] = {0};
	
/**************************** POINT D'ENTRÉE  ****************************/
int main(void)
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	66 97       	sbiw	r28, 0x16	; 22
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
	float speed = 0.0;
	float angle = 0.0;
	
	INT8U LEDstatus = (1<<ATTENTE);
	
	float RIGHT_ADCmean = 0.0;
     71e:	19 82       	std	Y+1, r1	; 0x01
     720:	1a 82       	std	Y+2, r1	; 0x02
     722:	1b 82       	std	Y+3, r1	; 0x03
     724:	1c 82       	std	Y+4, r1	; 0x04
	float LEFT_ADCmean = 0.0;
     726:	1d 82       	std	Y+5, r1	; 0x05
     728:	1e 82       	std	Y+6, r1	; 0x06
     72a:	1f 82       	std	Y+7, r1	; 0x07
     72c:	18 86       	std	Y+8, r1	; 0x08
	
	float RIGHT_pwm = 0.0;
     72e:	19 86       	std	Y+9, r1	; 0x09
     730:	1a 86       	std	Y+10, r1	; 0x0a
     732:	1b 86       	std	Y+11, r1	; 0x0b
     734:	1c 86       	std	Y+12, r1	; 0x0c
	float LEFT_pwm = 0.0;
     736:	1d 86       	std	Y+13, r1	; 0x0d
     738:	1e 86       	std	Y+14, r1	; 0x0e
     73a:	1f 86       	std	Y+15, r1	; 0x0f
     73c:	18 8a       	std	Y+16, r1	; 0x10
	
	INT8U robotState = 0;	
	
/**************************** INITIALISATION ****************************/
    initUART();
     73e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <initUART>
	initTIMER();
     742:	0e 94 4e 08 	call	0x109c	; 0x109c <initTIMER>
	initLED();
     746:	0e 94 7e 03 	call	0x6fc	; 0x6fc <initLED>
	initADC();
     74a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <initADC>

	sei();
     74e:	78 94       	sei
	
/************************ CALIBRATION DES MOTEURS ************************/
	motor_calibration();
     750:	0e 94 00 01 	call	0x200	; 0x200 <motor_calibration>
	float LEFT_ADCmean = 0.0;
	
	float RIGHT_pwm = 0.0;
	float LEFT_pwm = 0.0;
	
	INT8U robotState = 0;	
     754:	10 e0       	ldi	r17, 0x00	; 0
	INT16U rawSpeed = 0;
	INT16U rawAngle = 0;
	float speed = 0.0;
	float angle = 0.0;
	
	INT8U LEDstatus = (1<<ATTENTE);
     756:	68 94       	set
     758:	33 24       	eor	r3, r3
     75a:	36 f8       	bld	r3, 6
{
/*************************** VARIABLES LOCALES ***************************/	
	INT16U rawSpeed = 0;
	INT16U rawAngle = 0;
	float speed = 0.0;
	float angle = 0.0;
     75c:	41 2c       	mov	r4, r1
     75e:	51 2c       	mov	r5, r1
     760:	32 01       	movw	r6, r4
int main(void)
{
/*************************** VARIABLES LOCALES ***************************/	
	INT16U rawSpeed = 0;
	INT16U rawAngle = 0;
	float speed = 0.0;
     762:	4b 8a       	std	Y+19, r4	; 0x13
     764:	5c 8a       	std	Y+20, r5	; 0x14
     766:	6d 8a       	std	Y+21, r6	; 0x15
     768:	7e 8a       	std	Y+22, r7	; 0x16
					{
						sprintf(debugStr, "%d", (uint32_t)(angle*1000));
						debug_send(debugStr, 30);
					}
					//Calculer nouvelles valeurs de PWM
					CalculPWM( speed, angle, LEFT_ADCmean, RIGHT_ADCmean,  
     76a:	ce 01       	movw	r24, r28
     76c:	09 96       	adiw	r24, 0x09	; 9
     76e:	9a 8b       	std	Y+18, r25	; 0x12
     770:	89 8b       	std	Y+17, r24	; 0x11
		if (robotState == 0 && !SW6)
		{
			robotState = 1;
			LEDstatus = 0;
			LEDstatus |= (1<<ACTIF);
			LEDstatus &= ~(1<<ATTENTE);
     772:	68 94       	set
     774:	22 24       	eor	r2, r2
     776:	27 f8       	bld	r2, 7
/************************** ROUTINE PRINCIPALE ***************************/
    while(1)
	{ 
		
/*********** INTERRUPTEURS DE MISE EN MARCHE ET ARRET D'URGENCE **********/
		if (robotState == 0 && !SW6)
     778:	11 11       	cpse	r17, r1
     77a:	03 c0       	rjmp	.+6      	; 0x782 <main+0x78>
     77c:	ce 9b       	sbis	0x19, 6	; 25
     77e:	05 c0       	rjmp	.+10     	; 0x78a <main+0x80>
     780:	57 c1       	rjmp	.+686    	; 0xa30 <__stack+0x1d1>
			LEDstatus |= (1<<ACTIF);
			LEDstatus &= ~(1<<ATTENTE);
			
		}
		
		if (robotState == 1)
     782:	11 30       	cpi	r17, 0x01	; 1
     784:	09 f0       	breq	.+2      	; 0x788 <main+0x7e>
     786:	54 c1       	rjmp	.+680    	; 0xa30 <__stack+0x1d1>
     788:	01 c0       	rjmp	.+2      	; 0x78c <main+0x82>
		if (robotState == 0 && !SW6)
		{
			robotState = 1;
			LEDstatus = 0;
			LEDstatus |= (1<<ACTIF);
			LEDstatus &= ~(1<<ATTENTE);
     78a:	32 2c       	mov	r3, r2
			
		}
		
		if (robotState == 1)
		{
			if (!SW7)
     78c:	cf 99       	sbic	0x19, 7	; 25
     78e:	09 c0       	rjmp	.+18     	; 0x7a2 <main+0x98>
				robotState = 0;
				
				LEDstatus = (1<<ATTENTE);
				LEDstatus &= ~(1<<ACTIF);

				PWM_GAUCHE = 0;
     790:	19 bc       	out	0x29, r1	; 41
     792:	18 bc       	out	0x28, r1	; 40
				PWM_DROIT = 0;
     794:	1b bc       	out	0x2b, r1	; 43
     796:	1a bc       	out	0x2a, r1	; 42
		
		if (robotState == 1)
		{
			if (!SW7)
			{
				robotState = 0;
     798:	10 e0       	ldi	r17, 0x00	; 0
				
				LEDstatus = (1<<ATTENTE);
				LEDstatus &= ~(1<<ACTIF);
     79a:	68 94       	set
     79c:	33 24       	eor	r3, r3
     79e:	36 f8       	bld	r3, 6
     7a0:	47 c1       	rjmp	.+654    	; 0xa30 <__stack+0x1d1>
			
/************************* FONCTIONNEMENT NORMAL *************************/
			else
			{	
/************************ RÉCEPTION DE COMMANDES *************************/
				if(flag_CMD_in)
     7a2:	80 91 cd 00 	lds	r24, 0x00CD
     7a6:	88 23       	and	r24, r24
     7a8:	09 f4       	brne	.+2      	; 0x7ac <main+0xa2>
     7aa:	55 c0       	rjmp	.+170    	; 0x856 <main+0x14c>
				{
					//Convertir la trame en commande pour les moteurs
					if(commande[0] == 0xF0)
     7ac:	a9 ec       	ldi	r26, 0xC9	; 201
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	8c 91       	ld	r24, X
     7b2:	80 3f       	cpi	r24, 0xF0	; 240
     7b4:	89 f4       	brne	.+34     	; 0x7d8 <main+0xce>
					{
						//Arret obligatoire
						PWM_DROIT = 0;
     7b6:	1b bc       	out	0x2b, r1	; 43
     7b8:	1a bc       	out	0x2a, r1	; 42
						PWM_GAUCHE = 0;
     7ba:	19 bc       	out	0x29, r1	; 41
     7bc:	18 bc       	out	0x28, r1	; 40
						
						DIR_bit_ON(RIGHT_DIR1); DIR_bit_ON(RIGHT_DIR2);
     7be:	86 e0       	ldi	r24, 0x06	; 6
     7c0:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     7c4:	87 e0       	ldi	r24, 0x07	; 7
     7c6:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
						DIR_bit_ON(LEFT_DIR1);  DIR_bit_ON(LEFT_DIR2);
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     7d6:	3a c0       	rjmp	.+116    	; 0x84c <main+0x142>
					}
			
					else if (commande[0] == 0xF1)
     7d8:	e9 ec       	ldi	r30, 0xC9	; 201
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	81 3f       	cpi	r24, 0xF1	; 241
     7e0:	a9 f5       	brne	.+106    	; 0x84c <main+0x142>
					{
						//Commande normale
						rawSpeed = commande[1];
     7e2:	aa ec       	ldi	r26, 0xCA	; 202
     7e4:	b0 e0       	ldi	r27, 0x00	; 0
     7e6:	6c 91       	ld	r22, X
						rawAngle = commande[2];
     7e8:	eb ec       	ldi	r30, 0xCB	; 203
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	10 81       	ld	r17, Z

						speed = ((float)rawSpeed/100.0) -1.0;
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	48 ec       	ldi	r20, 0xC8	; 200
     7fe:	52 e4       	ldi	r21, 0x42	; 66
     800:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3>
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	40 e8       	ldi	r20, 0x80	; 128
     80a:	5f e3       	ldi	r21, 0x3F	; 63
     80c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__subsf3>
     810:	6b 8b       	std	Y+19, r22	; 0x13
     812:	7c 8b       	std	Y+20, r23	; 0x14
     814:	8d 8b       	std	Y+21, r24	; 0x15
     816:	9e 8b       	std	Y+22, r25	; 0x16
			
					else if (commande[0] == 0xF1)
					{
						//Commande normale
						rawSpeed = commande[1];
						rawAngle = commande[2];
     818:	61 2f       	mov	r22, r17
     81a:	70 e0       	ldi	r23, 0x00	; 0

						speed = ((float)rawSpeed/100.0) -1.0;
						angle = ((float)(rawAngle*2))*2.0*Pi/360.0;
     81c:	66 0f       	add	r22, r22
     81e:	77 1f       	adc	r23, r23
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__addsf3>
     830:	2b ed       	ldi	r18, 0xDB	; 219
     832:	3f e0       	ldi	r19, 0x0F	; 15
     834:	49 e4       	ldi	r20, 0x49	; 73
     836:	50 e4       	ldi	r21, 0x40	; 64
     838:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	44 eb       	ldi	r20, 0xB4	; 180
     842:	53 e4       	ldi	r21, 0x43	; 67
     844:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__divsf3>
     848:	2b 01       	movw	r4, r22
     84a:	3c 01       	movw	r6, r24
					}
					LEDstatus |= (1<<COMMANDE_RECUE);
     84c:	f3 2d       	mov	r31, r3
     84e:	f2 60       	ori	r31, 0x02	; 2
     850:	3f 2e       	mov	r3, r31
					flag_CMD_in = 0;
     852:	10 92 cd 00 	sts	0x00CD, r1
				}
							
/************************* CONTRÔLE DES MOTEURS **************************/		
				if(flag_PWMcycle)
     856:	80 91 c4 00 	lds	r24, 0x00C4
     85a:	88 23       	and	r24, r24
     85c:	09 f4       	brne	.+2      	; 0x860 <__stack+0x1>
     85e:	e7 c0       	rjmp	.+462    	; 0xa2e <__stack+0x1cf>
				{				
					//Convertir valeur de l'ADC en valeur de vitesse
					getADCmeanValues(&RIGHT_ADCmean, &LEFT_ADCmean);
     860:	be 01       	movw	r22, r28
     862:	6b 5f       	subi	r22, 0xFB	; 251
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	ce 01       	movw	r24, r28
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	0e 94 65 02 	call	0x4ca	; 0x4ca <getADCmeanValues>
					resetADC();
     86e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
					
					if(angle>0)
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	a9 01       	movw	r20, r18
     878:	c3 01       	movw	r24, r6
     87a:	b2 01       	movw	r22, r4
     87c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     880:	18 16       	cp	r1, r24
     882:	14 f5       	brge	.+68     	; 0x8c8 <__stack+0x69>
					{
						sprintf(debugStr, "%d", (uint32_t)(angle*1000));
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	4a e7       	ldi	r20, 0x7A	; 122
     88a:	54 e4       	ldi	r21, 0x44	; 68
     88c:	c3 01       	movw	r24, r6
     88e:	b2 01       	movw	r22, r4
     890:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     894:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fixunssfsi>
     898:	9f 93       	push	r25
     89a:	8f 93       	push	r24
     89c:	7f 93       	push	r23
     89e:	6f 93       	push	r22
     8a0:	a9 e6       	ldi	r26, 0x69	; 105
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	bf 93       	push	r27
     8a6:	af 93       	push	r26
     8a8:	a4 e8       	ldi	r26, 0x84	; 132
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	bf 93       	push	r27
     8ae:	af 93       	push	r26
     8b0:	0e 94 33 0b 	call	0x1666	; 0x1666 <sprintf>
						debug_send(debugStr, 30);
     8b4:	6e e1       	ldi	r22, 0x1E	; 30
     8b6:	84 e8       	ldi	r24, 0x84	; 132
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 cd 08 	call	0x119a	; 0x119a <debug_send>
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
					}
					//Calculer nouvelles valeurs de PWM
					CalculPWM( speed, angle, LEFT_ADCmean, RIGHT_ADCmean,  
     8c8:	a9 80       	ldd	r10, Y+1	; 0x01
     8ca:	ba 80       	ldd	r11, Y+2	; 0x02
     8cc:	cb 80       	ldd	r12, Y+3	; 0x03
     8ce:	dc 80       	ldd	r13, Y+4	; 0x04
     8d0:	ed 80       	ldd	r14, Y+5	; 0x05
     8d2:	fe 80       	ldd	r15, Y+6	; 0x06
     8d4:	0f 81       	ldd	r16, Y+7	; 0x07
     8d6:	18 85       	ldd	r17, Y+8	; 0x08
     8d8:	9a 89       	ldd	r25, Y+18	; 0x12
     8da:	9f 93       	push	r25
     8dc:	a9 89       	ldd	r26, Y+17	; 0x11
     8de:	af 93       	push	r26
     8e0:	fe 01       	movw	r30, r28
     8e2:	3d 96       	adiw	r30, 0x0d	; 13
     8e4:	4f 01       	movw	r8, r30
     8e6:	a3 01       	movw	r20, r6
     8e8:	92 01       	movw	r18, r4
     8ea:	6b 89       	ldd	r22, Y+19	; 0x13
     8ec:	7c 89       	ldd	r23, Y+20	; 0x14
     8ee:	8d 89       	ldd	r24, Y+21	; 0x15
     8f0:	9e 89       	ldd	r25, Y+22	; 0x16
     8f2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <CalculPWM>
							   &LEFT_pwm, &RIGHT_pwm);

					//Mettre a jour les PWM et bits de direction
					
					/* PWM GAUCHE */
					if(LEFT_pwm < 0)		/* MARCHE ARRIÈRE */
     8f6:	cd 84       	ldd	r12, Y+13	; 0x0d
     8f8:	de 84       	ldd	r13, Y+14	; 0x0e
     8fa:	ef 84       	ldd	r14, Y+15	; 0x0f
     8fc:	f8 88       	ldd	r15, Y+16	; 0x10
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	a9 01       	movw	r20, r18
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     910:	88 23       	and	r24, r24
     912:	c4 f4       	brge	.+48     	; 0x944 <__stack+0xe5>
					{
						DIR_bit_OFF(LEFT_DIR1); DIR_bit_ON(LEFT_DIR2);
     914:	82 e0       	ldi	r24, 0x02	; 2
     916:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
						PWM_GAUCHE = (INT16U)(-1.0*LEFT_pwm*(float)PWM_TOP);
     920:	8d 85       	ldd	r24, Y+13	; 0x0d
     922:	9e 85       	ldd	r25, Y+14	; 0x0e
     924:	af 85       	ldd	r26, Y+15	; 0x0f
     926:	b8 89       	ldd	r27, Y+16	; 0x10
     928:	bc 01       	movw	r22, r24
     92a:	cd 01       	movw	r24, r26
     92c:	90 58       	subi	r25, 0x80	; 128
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e2       	ldi	r19, 0x20	; 32
     932:	4c e9       	ldi	r20, 0x9C	; 156
     934:	54 e4       	ldi	r21, 0x44	; 68
     936:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     93a:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fixunssfsi>
     93e:	79 bd       	out	0x29, r23	; 41
     940:	68 bd       	out	0x28, r22	; 40
     942:	26 c0       	rjmp	.+76     	; 0x990 <__stack+0x131>
					}

					else if(LEFT_pwm > 0)	/*  MARCHE AVANT */
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	a9 01       	movw	r20, r18
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     952:	18 16       	cp	r1, r24
     954:	ac f4       	brge	.+42     	; 0x980 <__stack+0x121>
					{
						DIR_bit_ON(LEFT_DIR1); DIR_bit_OFF(LEFT_DIR2);
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
						PWM_GAUCHE = (INT16U)(LEFT_pwm *(float)PWM_TOP); 
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e2       	ldi	r19, 0x20	; 32
     966:	4c e9       	ldi	r20, 0x9C	; 156
     968:	54 e4       	ldi	r21, 0x44	; 68
     96a:	6d 85       	ldd	r22, Y+13	; 0x0d
     96c:	7e 85       	ldd	r23, Y+14	; 0x0e
     96e:	8f 85       	ldd	r24, Y+15	; 0x0f
     970:	98 89       	ldd	r25, Y+16	; 0x10
     972:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     976:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fixunssfsi>
     97a:	79 bd       	out	0x29, r23	; 41
     97c:	68 bd       	out	0x28, r22	; 40
     97e:	08 c0       	rjmp	.+16     	; 0x990 <__stack+0x131>
					}

					else					/*    NEUTRE     */
					{
						DIR_bit_OFF(LEFT_DIR1); DIR_bit_OFF(LEFT_DIR2);
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
						PWM_GAUCHE = 0;
     98c:	19 bc       	out	0x29, r1	; 41
     98e:	18 bc       	out	0x28, r1	; 40
					}
					
					/*PWM DROIT*/
					if(RIGHT_pwm < 0)		/* MARCHE ARRIÈRE */
     990:	c9 84       	ldd	r12, Y+9	; 0x09
     992:	da 84       	ldd	r13, Y+10	; 0x0a
     994:	eb 84       	ldd	r14, Y+11	; 0x0b
     996:	fc 84       	ldd	r15, Y+12	; 0x0c
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	a9 01       	movw	r20, r18
     99e:	c7 01       	movw	r24, r14
     9a0:	b6 01       	movw	r22, r12
     9a2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     9a6:	88 23       	and	r24, r24
     9a8:	c4 f4       	brge	.+48     	; 0x9da <__stack+0x17b>
					{
						DIR_bit_OFF(RIGHT_DIR1); DIR_bit_ON(RIGHT_DIR2); 
     9aa:	86 e0       	ldi	r24, 0x06	; 6
     9ac:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     9b0:	87 e0       	ldi	r24, 0x07	; 7
     9b2:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
						PWM_DROIT = (INT16U)(-1.0*RIGHT_pwm*(float)PWM_TOP); 
     9b6:	89 85       	ldd	r24, Y+9	; 0x09
     9b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ba:	ab 85       	ldd	r26, Y+11	; 0x0b
     9bc:	bc 85       	ldd	r27, Y+12	; 0x0c
     9be:	bc 01       	movw	r22, r24
     9c0:	cd 01       	movw	r24, r26
     9c2:	90 58       	subi	r25, 0x80	; 128
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e2       	ldi	r19, 0x20	; 32
     9c8:	4c e9       	ldi	r20, 0x9C	; 156
     9ca:	54 e4       	ldi	r21, 0x44	; 68
     9cc:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     9d0:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fixunssfsi>
     9d4:	7b bd       	out	0x2b, r23	; 43
     9d6:	6a bd       	out	0x2a, r22	; 42
     9d8:	26 c0       	rjmp	.+76     	; 0xa26 <__stack+0x1c7>
					}

					else if(RIGHT_pwm > 0)  /*  MARCHE AVANT */
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	a9 01       	movw	r20, r18
     9e0:	c7 01       	movw	r24, r14
     9e2:	b6 01       	movw	r22, r12
     9e4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     9e8:	18 16       	cp	r1, r24
     9ea:	ac f4       	brge	.+42     	; 0xa16 <__stack+0x1b7>
					{
						DIR_bit_ON(RIGHT_DIR1); DIR_bit_OFF(RIGHT_DIR2);
     9ec:	86 e0       	ldi	r24, 0x06	; 6
     9ee:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     9f2:	87 e0       	ldi	r24, 0x07	; 7
     9f4:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
						PWM_DROIT = (INT16U)(RIGHT_pwm * (float)PWM_TOP);  
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e2       	ldi	r19, 0x20	; 32
     9fc:	4c e9       	ldi	r20, 0x9C	; 156
     9fe:	54 e4       	ldi	r21, 0x44	; 68
     a00:	69 85       	ldd	r22, Y+9	; 0x09
     a02:	7a 85       	ldd	r23, Y+10	; 0x0a
     a04:	8b 85       	ldd	r24, Y+11	; 0x0b
     a06:	9c 85       	ldd	r25, Y+12	; 0x0c
     a08:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     a0c:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fixunssfsi>
     a10:	7b bd       	out	0x2b, r23	; 43
     a12:	6a bd       	out	0x2a, r22	; 42
     a14:	08 c0       	rjmp	.+16     	; 0xa26 <__stack+0x1c7>
					}

					else					/*    NEUTRE     */
					{
						DIR_bit_OFF(RIGHT_DIR1); DIR_bit_OFF(RIGHT_DIR2);
     a16:	86 e0       	ldi	r24, 0x06	; 6
     a18:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     a1c:	87 e0       	ldi	r24, 0x07	; 7
     a1e:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
						PWM_DROIT = 0;
     a22:	1b bc       	out	0x2b, r1	; 43
     a24:	1a bc       	out	0x2a, r1	; 42
					}

					flag_PWMcycle = 0;
     a26:	10 92 c4 00 	sts	0x00C4, r1
     a2a:	11 e0       	ldi	r17, 0x01	; 1
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <__stack+0x1d1>
     a2e:	11 e0       	ldi	r17, 0x01	; 1
				}
			}
		}

/************************** AFFICHAGE DU STATUT **************************/
		updateLED(LEDstatus);
     a30:	83 2d       	mov	r24, r3
     a32:	0e 94 82 03 	call	0x704	; 0x704 <updateLED>
		LEDstatus &= ~(1<<COMMANDE_RECUE); /* Reset la LED de CMD_IN */
     a36:	f3 2d       	mov	r31, r3
     a38:	fd 7f       	andi	r31, 0xFD	; 253
     a3a:	3f 2e       	mov	r3, r31
	}            
     a3c:	9d ce       	rjmp	.-710    	; 0x778 <main+0x6e>

00000a3e <CalculPWM>:
#include "moteur.h"


void CalculPWM(float Vitesse_D, float Angle_D, float Vg, float Vd, float *Duty_G, float *Duty_D)
{
     a3e:	2f 92       	push	r2
     a40:	3f 92       	push	r3
     a42:	4f 92       	push	r4
     a44:	5f 92       	push	r5
     a46:	6f 92       	push	r6
     a48:	7f 92       	push	r7
     a4a:	8f 92       	push	r8
     a4c:	9f 92       	push	r9
     a4e:	af 92       	push	r10
     a50:	bf 92       	push	r11
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	60 97       	sbiw	r28, 0x10	; 16
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
     a72:	6d 87       	std	Y+13, r22	; 0x0d
     a74:	7e 87       	std	Y+14, r23	; 0x0e
     a76:	8f 87       	std	Y+15, r24	; 0x0f
     a78:	98 8b       	std	Y+16, r25	; 0x10
     a7a:	32 2e       	mov	r3, r18
     a7c:	23 2e       	mov	r2, r19
     a7e:	4f 83       	std	Y+7, r20	; 0x07
     a80:	58 87       	std	Y+8, r21	; 0x08
     a82:	27 01       	movw	r4, r14
     a84:	38 01       	movw	r6, r16
     a86:	9e 82       	std	Y+6, r9	; 0x06
     a88:	8d 82       	std	Y+5, r8	; 0x05
	static float Ua     = 0.0;
	static int 	 Signe_Ua = 0;
	static int 	 Signe_Ut = 0;


	Vg = (Vg > 1.0) ? 1.0 : ((Vg < -1.0) ? -1.0 : Vg);  /* Regarde les limites (-1.0 à 1.0) */
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e8       	ldi	r20, 0x80	; 128
     a90:	5f e3       	ldi	r21, 0x3F	; 63
     a92:	c8 01       	movw	r24, r16
     a94:	b7 01       	movw	r22, r14
     a96:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     a9a:	18 16       	cp	r1, r24
     a9c:	9c f0       	brlt	.+38     	; 0xac4 <CalculPWM+0x86>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	40 e8       	ldi	r20, 0x80	; 128
     aa4:	5f eb       	ldi	r21, 0xBF	; 191
     aa6:	c8 01       	movw	r24, r16
     aa8:	b7 01       	movw	r22, r14
     aaa:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     aae:	88 23       	and	r24, r24
     ab0:	8c f4       	brge	.+34     	; 0xad4 <CalculPWM+0x96>
     ab2:	0f 2e       	mov	r0, r31
     ab4:	41 2c       	mov	r4, r1
     ab6:	51 2c       	mov	r5, r1
     ab8:	f0 e8       	ldi	r31, 0x80	; 128
     aba:	6f 2e       	mov	r6, r31
     abc:	ff eb       	ldi	r31, 0xBF	; 191
     abe:	7f 2e       	mov	r7, r31
     ac0:	f0 2d       	mov	r31, r0
     ac2:	08 c0       	rjmp	.+16     	; 0xad4 <CalculPWM+0x96>
     ac4:	0f 2e       	mov	r0, r31
     ac6:	41 2c       	mov	r4, r1
     ac8:	51 2c       	mov	r5, r1
     aca:	f0 e8       	ldi	r31, 0x80	; 128
     acc:	6f 2e       	mov	r6, r31
     ace:	ff e3       	ldi	r31, 0x3F	; 63
     ad0:	7f 2e       	mov	r7, r31
     ad2:	f0 2d       	mov	r31, r0
	Vd = (Vd > 1.0) ? 1.0 : ((Vd < -1.0) ? -1.0 : Vd);  /* Regarde les limites (-1.0 à 1.0) */
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e8       	ldi	r20, 0x80	; 128
     ada:	5f e3       	ldi	r21, 0x3F	; 63
     adc:	c6 01       	movw	r24, r12
     ade:	b5 01       	movw	r22, r10
     ae0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     ae4:	18 16       	cp	r1, r24
     ae6:	9c f0       	brlt	.+38     	; 0xb0e <CalculPWM+0xd0>
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e8       	ldi	r20, 0x80	; 128
     aee:	5f eb       	ldi	r21, 0xBF	; 191
     af0:	c6 01       	movw	r24, r12
     af2:	b5 01       	movw	r22, r10
     af4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     af8:	88 23       	and	r24, r24
     afa:	8c f4       	brge	.+34     	; 0xb1e <CalculPWM+0xe0>
     afc:	0f 2e       	mov	r0, r31
     afe:	a1 2c       	mov	r10, r1
     b00:	b1 2c       	mov	r11, r1
     b02:	f0 e8       	ldi	r31, 0x80	; 128
     b04:	cf 2e       	mov	r12, r31
     b06:	ff eb       	ldi	r31, 0xBF	; 191
     b08:	df 2e       	mov	r13, r31
     b0a:	f0 2d       	mov	r31, r0
     b0c:	08 c0       	rjmp	.+16     	; 0xb1e <CalculPWM+0xe0>
     b0e:	0f 2e       	mov	r0, r31
     b10:	a1 2c       	mov	r10, r1
     b12:	b1 2c       	mov	r11, r1
     b14:	f0 e8       	ldi	r31, 0x80	; 128
     b16:	cf 2e       	mov	r12, r31
     b18:	ff e3       	ldi	r31, 0x3F	; 63
     b1a:	df 2e       	mov	r13, r31
     b1c:	f0 2d       	mov	r31, r0
		
	Old_W = W;
     b1e:	80 91 be 00 	lds	r24, 0x00BE
     b22:	90 91 bf 00 	lds	r25, 0x00BF
     b26:	a0 91 c0 00 	lds	r26, 0x00C0
     b2a:	b0 91 c1 00 	lds	r27, 0x00C1
     b2e:	89 87       	std	Y+9, r24	; 0x09
     b30:	9a 87       	std	Y+10, r25	; 0x0a
     b32:	ab 87       	std	Y+11, r26	; 0x0b
     b34:	bc 87       	std	Y+12, r27	; 0x0c
     b36:	80 93 ba 00 	sts	0x00BA, r24
     b3a:	90 93 bb 00 	sts	0x00BB, r25
     b3e:	a0 93 bc 00 	sts	0x00BC, r26
     b42:	b0 93 bd 00 	sts	0x00BD, r27
	W     = 0.5*(Vmax/RAYON)*(Vd-Vg);
     b46:	a3 01       	movw	r20, r6
     b48:	92 01       	movw	r18, r4
     b4a:	c6 01       	movw	r24, r12
     b4c:	b5 01       	movw	r22, r10
     b4e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__subsf3>
     b52:	2a e1       	ldi	r18, 0x1A	; 26
     b54:	32 e6       	ldi	r19, 0x62	; 98
     b56:	46 e8       	ldi	r20, 0x86	; 134
     b58:	50 e4       	ldi	r21, 0x40	; 64
     b5a:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     b5e:	69 83       	std	Y+1, r22	; 0x01
     b60:	7a 83       	std	Y+2, r23	; 0x02
     b62:	8b 83       	std	Y+3, r24	; 0x03
     b64:	9c 83       	std	Y+4, r25	; 0x04
     b66:	60 93 be 00 	sts	0x00BE, r22
     b6a:	70 93 bf 00 	sts	0x00BF, r23
     b6e:	80 93 c0 00 	sts	0x00C0, r24
     b72:	90 93 c1 00 	sts	0x00C1, r25
	Vt    = 0.5*(Vd+Vg);
     b76:	a6 01       	movw	r20, r12
     b78:	95 01       	movw	r18, r10
     b7a:	c3 01       	movw	r24, r6
     b7c:	b2 01       	movw	r22, r4
     b7e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__addsf3>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	5f e3       	ldi	r21, 0x3F	; 63
     b8a:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     b8e:	2b 01       	movw	r4, r22
     b90:	3c 01       	movw	r6, r24
     b92:	60 93 b6 00 	sts	0x00B6, r22
     b96:	70 93 b7 00 	sts	0x00B7, r23
     b9a:	80 93 b8 00 	sts	0x00B8, r24
     b9e:	90 93 b9 00 	sts	0x00B9, r25

	Angle = Angle + (0.5)*TS*(W+Old_W);
     ba2:	29 81       	ldd	r18, Y+1	; 0x01
     ba4:	3a 81       	ldd	r19, Y+2	; 0x02
     ba6:	4b 81       	ldd	r20, Y+3	; 0x03
     ba8:	5c 81       	ldd	r21, Y+4	; 0x04
     baa:	69 85       	ldd	r22, Y+9	; 0x09
     bac:	7a 85       	ldd	r23, Y+10	; 0x0a
     bae:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__addsf3>
     bb6:	2a e0       	ldi	r18, 0x0A	; 10
     bb8:	37 ed       	ldi	r19, 0xD7	; 215
     bba:	43 e2       	ldi	r20, 0x23	; 35
     bbc:	5b e3       	ldi	r21, 0x3B	; 59
     bbe:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     bc2:	20 91 b2 00 	lds	r18, 0x00B2
     bc6:	30 91 b3 00 	lds	r19, 0x00B3
     bca:	40 91 b4 00 	lds	r20, 0x00B4
     bce:	50 91 b5 00 	lds	r21, 0x00B5
     bd2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__addsf3>
     bd6:	e6 2e       	mov	r14, r22
     bd8:	f7 2e       	mov	r15, r23
     bda:	08 2f       	mov	r16, r24
     bdc:	19 2f       	mov	r17, r25
	Angle = (Angle > 2.0*Pi) ? Angle - 2*Pi : ((Angle < 0.0) ? Angle + 2*Pi : Angle); /* Angle entre 0 et 2 pi */
     bde:	2b ed       	ldi	r18, 0xDB	; 219
     be0:	3f e0       	ldi	r19, 0x0F	; 15
     be2:	49 ec       	ldi	r20, 0xC9	; 201
     be4:	50 e4       	ldi	r21, 0x40	; 64
     be6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     bea:	18 16       	cp	r1, r24
     bec:	7c f4       	brge	.+30     	; 0xc0c <CalculPWM+0x1ce>
     bee:	2b ed       	ldi	r18, 0xDB	; 219
     bf0:	3f e0       	ldi	r19, 0x0F	; 15
     bf2:	49 ec       	ldi	r20, 0xC9	; 201
     bf4:	50 e4       	ldi	r21, 0x40	; 64
     bf6:	6e 2d       	mov	r22, r14
     bf8:	7f 2d       	mov	r23, r15
     bfa:	80 2f       	mov	r24, r16
     bfc:	91 2f       	mov	r25, r17
     bfe:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__subsf3>
     c02:	e6 2e       	mov	r14, r22
     c04:	f7 2e       	mov	r15, r23
     c06:	08 2f       	mov	r16, r24
     c08:	19 2f       	mov	r17, r25
     c0a:	19 c0       	rjmp	.+50     	; 0xc3e <CalculPWM+0x200>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	a9 01       	movw	r20, r18
     c12:	6e 2d       	mov	r22, r14
     c14:	7f 2d       	mov	r23, r15
     c16:	80 2f       	mov	r24, r16
     c18:	91 2f       	mov	r25, r17
     c1a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     c1e:	88 23       	and	r24, r24
     c20:	74 f4       	brge	.+28     	; 0xc3e <CalculPWM+0x200>
     c22:	2b ed       	ldi	r18, 0xDB	; 219
     c24:	3f e0       	ldi	r19, 0x0F	; 15
     c26:	49 ec       	ldi	r20, 0xC9	; 201
     c28:	50 e4       	ldi	r21, 0x40	; 64
     c2a:	6e 2d       	mov	r22, r14
     c2c:	7f 2d       	mov	r23, r15
     c2e:	80 2f       	mov	r24, r16
     c30:	91 2f       	mov	r25, r17
     c32:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__addsf3>
     c36:	e6 2e       	mov	r14, r22
     c38:	f7 2e       	mov	r15, r23
     c3a:	08 2f       	mov	r16, r24
     c3c:	19 2f       	mov	r17, r25
     c3e:	8e 2d       	mov	r24, r14
     c40:	9f 2d       	mov	r25, r15
     c42:	a0 2f       	mov	r26, r16
     c44:	b1 2f       	mov	r27, r17
     c46:	80 93 b2 00 	sts	0x00B2, r24
     c4a:	90 93 b3 00 	sts	0x00B3, r25
     c4e:	a0 93 b4 00 	sts	0x00B4, r26
     c52:	b0 93 b5 00 	sts	0x00B5, r27
	ErreurAngle = ((Angle_D >= Pi + Angle) ? Angle_D - 2*Pi : ((Angle_D <= -Pi + Angle) ? Angle_D + 2*Pi : Angle_D))-Angle;
     c56:	2b ed       	ldi	r18, 0xDB	; 219
     c58:	3f e0       	ldi	r19, 0x0F	; 15
     c5a:	49 e4       	ldi	r20, 0x49	; 73
     c5c:	50 e4       	ldi	r21, 0x40	; 64
     c5e:	6e 2d       	mov	r22, r14
     c60:	7f 2d       	mov	r23, r15
     c62:	80 2f       	mov	r24, r16
     c64:	91 2f       	mov	r25, r17
     c66:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__addsf3>
     c6a:	23 2d       	mov	r18, r3
     c6c:	32 2d       	mov	r19, r2
     c6e:	4f 81       	ldd	r20, Y+7	; 0x07
     c70:	58 85       	ldd	r21, Y+8	; 0x08
     c72:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     c76:	18 16       	cp	r1, r24
     c78:	7c f0       	brlt	.+30     	; 0xc98 <CalculPWM+0x25a>
     c7a:	2b ed       	ldi	r18, 0xDB	; 219
     c7c:	3f e0       	ldi	r19, 0x0F	; 15
     c7e:	49 ec       	ldi	r20, 0xC9	; 201
     c80:	50 e4       	ldi	r21, 0x40	; 64
     c82:	63 2d       	mov	r22, r3
     c84:	72 2d       	mov	r23, r2
     c86:	8f 81       	ldd	r24, Y+7	; 0x07
     c88:	98 85       	ldd	r25, Y+8	; 0x08
     c8a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__subsf3>
     c8e:	36 2e       	mov	r3, r22
     c90:	27 2e       	mov	r2, r23
     c92:	e8 2f       	mov	r30, r24
     c94:	f9 2f       	mov	r31, r25
     c96:	25 c0       	rjmp	.+74     	; 0xce2 <CalculPWM+0x2a4>
     c98:	2b ed       	ldi	r18, 0xDB	; 219
     c9a:	3f e0       	ldi	r19, 0x0F	; 15
     c9c:	49 e4       	ldi	r20, 0x49	; 73
     c9e:	50 e4       	ldi	r21, 0x40	; 64
     ca0:	6e 2d       	mov	r22, r14
     ca2:	7f 2d       	mov	r23, r15
     ca4:	80 2f       	mov	r24, r16
     ca6:	91 2f       	mov	r25, r17
     ca8:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__subsf3>
     cac:	9b 01       	movw	r18, r22
     cae:	ac 01       	movw	r20, r24
     cb0:	63 2d       	mov	r22, r3
     cb2:	72 2d       	mov	r23, r2
     cb4:	8f 81       	ldd	r24, Y+7	; 0x07
     cb6:	98 85       	ldd	r25, Y+8	; 0x08
     cb8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     cbc:	18 16       	cp	r1, r24
     cbe:	7c f0       	brlt	.+30     	; 0xcde <CalculPWM+0x2a0>
     cc0:	2b ed       	ldi	r18, 0xDB	; 219
     cc2:	3f e0       	ldi	r19, 0x0F	; 15
     cc4:	49 ec       	ldi	r20, 0xC9	; 201
     cc6:	50 e4       	ldi	r21, 0x40	; 64
     cc8:	63 2d       	mov	r22, r3
     cca:	72 2d       	mov	r23, r2
     ccc:	8f 81       	ldd	r24, Y+7	; 0x07
     cce:	98 85       	ldd	r25, Y+8	; 0x08
     cd0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__addsf3>
     cd4:	36 2e       	mov	r3, r22
     cd6:	27 2e       	mov	r2, r23
     cd8:	e8 2f       	mov	r30, r24
     cda:	f9 2f       	mov	r31, r25
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <CalculPWM+0x2a4>
     cde:	ef 81       	ldd	r30, Y+7	; 0x07
     ce0:	f8 85       	ldd	r31, Y+8	; 0x08
     ce2:	2e 2d       	mov	r18, r14
     ce4:	3f 2d       	mov	r19, r15
     ce6:	40 2f       	mov	r20, r16
     ce8:	51 2f       	mov	r21, r17
     cea:	63 2d       	mov	r22, r3
     cec:	72 2d       	mov	r23, r2
     cee:	8e 2f       	mov	r24, r30
     cf0:	9f 2f       	mov	r25, r31
     cf2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__subsf3>
     cf6:	6b 01       	movw	r12, r22
     cf8:	7c 01       	movw	r14, r24
     cfa:	60 93 ae 00 	sts	0x00AE, r22
     cfe:	70 93 af 00 	sts	0x00AF, r23
     d02:	80 93 b0 00 	sts	0x00B0, r24
     d06:	90 93 b1 00 	sts	0x00B1, r25

	Ut = -H11*Vt + H12*Vitesse_D;
     d0a:	28 ee       	ldi	r18, 0xE8	; 232
     d0c:	31 eb       	ldi	r19, 0xB1	; 177
     d0e:	49 e7       	ldi	r20, 0x79	; 121
     d10:	50 ec       	ldi	r21, 0xC0	; 192
     d12:	c3 01       	movw	r24, r6
     d14:	b2 01       	movw	r22, r4
     d16:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     d1a:	2b 01       	movw	r4, r22
     d1c:	3c 01       	movw	r6, r24
     d1e:	24 ef       	ldi	r18, 0xF4	; 244
     d20:	38 ed       	ldi	r19, 0xD8	; 216
     d22:	4c e9       	ldi	r20, 0x9C	; 156
     d24:	50 e4       	ldi	r21, 0x40	; 64
     d26:	6d 85       	ldd	r22, Y+13	; 0x0d
     d28:	7e 85       	ldd	r23, Y+14	; 0x0e
     d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d2c:	98 89       	ldd	r25, Y+16	; 0x10
     d2e:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     d32:	9b 01       	movw	r18, r22
     d34:	ac 01       	movw	r20, r24
     d36:	c3 01       	movw	r24, r6
     d38:	b2 01       	movw	r22, r4
     d3a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__addsf3>
     d3e:	66 2e       	mov	r6, r22
     d40:	77 2e       	mov	r7, r23
     d42:	a8 2e       	mov	r10, r24
     d44:	b9 2e       	mov	r11, r25
	Ua = H21*ErreurAngle - H22*W;
     d46:	21 e2       	ldi	r18, 0x21	; 33
     d48:	37 ea       	ldi	r19, 0xA7	; 167
     d4a:	44 e9       	ldi	r20, 0x94	; 148
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	c7 01       	movw	r24, r14
     d50:	b6 01       	movw	r22, r12
     d52:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     d56:	6b 01       	movw	r12, r22
     d58:	7c 01       	movw	r14, r24
     d5a:	28 e1       	ldi	r18, 0x18	; 24
     d5c:	37 ea       	ldi	r19, 0xA7	; 167
     d5e:	44 e1       	ldi	r20, 0x14	; 20
     d60:	5f e3       	ldi	r21, 0x3F	; 63
     d62:	69 81       	ldd	r22, Y+1	; 0x01
     d64:	7a 81       	ldd	r23, Y+2	; 0x02
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     d6e:	9b 01       	movw	r18, r22
     d70:	ac 01       	movw	r20, r24
     d72:	c7 01       	movw	r24, r14
     d74:	b6 01       	movw	r22, r12
     d76:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__subsf3>
     d7a:	86 2e       	mov	r8, r22
     d7c:	97 2e       	mov	r9, r23
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	9f 83       	std	Y+7, r25	; 0x07
			
	Signe_Ua = (Ua >= 0.0)   ? 1 : -1;
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	a9 01       	movw	r20, r18
     d88:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     d8c:	88 23       	and	r24, r24
     d8e:	24 f0       	brlt	.+8      	; 0xd98 <CalculPWM+0x35a>
     d90:	ee 24       	eor	r14, r14
     d92:	e3 94       	inc	r14
     d94:	f1 2c       	mov	r15, r1
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <CalculPWM+0x360>
     d98:	ee 24       	eor	r14, r14
     d9a:	ea 94       	dec	r14
     d9c:	fe 2c       	mov	r15, r14
     d9e:	f0 92 a5 00 	sts	0x00A5, r15
     da2:	e0 92 a4 00 	sts	0x00A4, r14
	Signe_Ut = (Ut >= 0.0) ? 1 : -1;
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	a9 01       	movw	r20, r18
     dac:	66 2d       	mov	r22, r6
     dae:	77 2d       	mov	r23, r7
     db0:	8a 2d       	mov	r24, r10
     db2:	9b 2d       	mov	r25, r11
     db4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     db8:	88 23       	and	r24, r24
     dba:	1c f0       	brlt	.+6      	; 0xdc2 <CalculPWM+0x384>
     dbc:	01 e0       	ldi	r16, 0x01	; 1
     dbe:	10 e0       	ldi	r17, 0x00	; 0
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <CalculPWM+0x388>
     dc2:	0f ef       	ldi	r16, 0xFF	; 255
     dc4:	1f ef       	ldi	r17, 0xFF	; 255
     dc6:	10 93 a3 00 	sts	0x00A3, r17
     dca:	00 93 a2 00 	sts	0x00A2, r16
	
	Ua = (Signe_Ua*Ua > 1.0) ? Signe_Ua*1.0 : ((Signe_Ua*Ua <= 0.05) ? 0.0 : Ua);
     dce:	b7 01       	movw	r22, r14
     dd0:	88 27       	eor	r24, r24
     dd2:	77 fd       	sbrc	r23, 7
     dd4:	80 95       	com	r24
     dd6:	98 2f       	mov	r25, r24
     dd8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__floatsisf>
     ddc:	26 2e       	mov	r2, r22
     dde:	37 2e       	mov	r3, r23
     de0:	48 2e       	mov	r4, r24
     de2:	59 2e       	mov	r5, r25
     de4:	26 2f       	mov	r18, r22
     de6:	37 2f       	mov	r19, r23
     de8:	48 2f       	mov	r20, r24
     dea:	59 2f       	mov	r21, r25
     dec:	68 2d       	mov	r22, r8
     dee:	79 2d       	mov	r23, r9
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9f 81       	ldd	r25, Y+7	; 0x07
     df4:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     df8:	6b 01       	movw	r12, r22
     dfa:	7c 01       	movw	r14, r24
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e8       	ldi	r20, 0x80	; 128
     e02:	5f e3       	ldi	r21, 0x3F	; 63
     e04:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     e08:	18 16       	cp	r1, r24
     e0a:	7c f0       	brlt	.+30     	; 0xe2a <CalculPWM+0x3ec>
     e0c:	2d ec       	ldi	r18, 0xCD	; 205
     e0e:	3c ec       	ldi	r19, 0xCC	; 204
     e10:	4c e4       	ldi	r20, 0x4C	; 76
     e12:	5d e3       	ldi	r21, 0x3D	; 61
     e14:	c7 01       	movw	r24, r14
     e16:	b6 01       	movw	r22, r12
     e18:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	54 f0       	brlt	.+20     	; 0xe34 <CalculPWM+0x3f6>
     e20:	81 2c       	mov	r8, r1
     e22:	91 2c       	mov	r9, r1
     e24:	e1 2c       	mov	r14, r1
     e26:	f1 2c       	mov	r15, r1
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <CalculPWM+0x3fa>
     e2a:	82 2c       	mov	r8, r2
     e2c:	93 2c       	mov	r9, r3
     e2e:	e4 2c       	mov	r14, r4
     e30:	f5 2c       	mov	r15, r5
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <CalculPWM+0x3fa>
     e34:	e9 80       	ldd	r14, Y+1	; 0x01
     e36:	ff 80       	ldd	r15, Y+7	; 0x07
     e38:	88 2d       	mov	r24, r8
     e3a:	99 2d       	mov	r25, r9
     e3c:	ae 2d       	mov	r26, r14
     e3e:	bf 2d       	mov	r27, r15
     e40:	80 93 a6 00 	sts	0x00A6, r24
     e44:	90 93 a7 00 	sts	0x00A7, r25
     e48:	a0 93 a8 00 	sts	0x00A8, r26
     e4c:	b0 93 a9 00 	sts	0x00A9, r27
	Ut = (Signe_Ut*Ut > 1.0) ? Signe_Ut*1.0 : Ut;
     e50:	b8 01       	movw	r22, r16
     e52:	88 27       	eor	r24, r24
     e54:	77 fd       	sbrc	r23, 7
     e56:	80 95       	com	r24
     e58:	98 2f       	mov	r25, r24
     e5a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__floatsisf>
     e5e:	c6 2e       	mov	r12, r22
     e60:	d7 2e       	mov	r13, r23
     e62:	08 2f       	mov	r16, r24
     e64:	19 2f       	mov	r17, r25
     e66:	26 2f       	mov	r18, r22
     e68:	37 2f       	mov	r19, r23
     e6a:	48 2f       	mov	r20, r24
     e6c:	59 2f       	mov	r21, r25
     e6e:	66 2d       	mov	r22, r6
     e70:	77 2d       	mov	r23, r7
     e72:	8a 2d       	mov	r24, r10
     e74:	9b 2d       	mov	r25, r11
     e76:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e8       	ldi	r20, 0x80	; 128
     e80:	5f e3       	ldi	r21, 0x3F	; 63
     e82:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     e86:	18 16       	cp	r1, r24
     e88:	24 f4       	brge	.+8      	; 0xe92 <CalculPWM+0x454>
     e8a:	6c 2c       	mov	r6, r12
     e8c:	7d 2c       	mov	r7, r13
     e8e:	a0 2e       	mov	r10, r16
     e90:	b1 2e       	mov	r11, r17
	Ut = ((Signe_Ut*Ut) > (1.0 - Signe_Ua*Ua)) ? Signe_Ut*(1.0 - Signe_Ua*Ua) : Ut;
     e92:	22 2d       	mov	r18, r2
     e94:	33 2d       	mov	r19, r3
     e96:	44 2d       	mov	r20, r4
     e98:	55 2d       	mov	r21, r5
     e9a:	68 2d       	mov	r22, r8
     e9c:	79 2d       	mov	r23, r9
     e9e:	8e 2d       	mov	r24, r14
     ea0:	9f 2d       	mov	r25, r15
     ea2:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     ea6:	9b 01       	movw	r18, r22
     ea8:	ac 01       	movw	r20, r24
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	80 e8       	ldi	r24, 0x80	; 128
     eb0:	9f e3       	ldi	r25, 0x3F	; 63
     eb2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__subsf3>
     eb6:	1b 01       	movw	r2, r22
     eb8:	2c 01       	movw	r4, r24
     eba:	2c 2d       	mov	r18, r12
     ebc:	3d 2d       	mov	r19, r13
     ebe:	40 2f       	mov	r20, r16
     ec0:	51 2f       	mov	r21, r17
     ec2:	66 2d       	mov	r22, r6
     ec4:	77 2d       	mov	r23, r7
     ec6:	8a 2d       	mov	r24, r10
     ec8:	9b 2d       	mov	r25, r11
     eca:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     ece:	a2 01       	movw	r20, r4
     ed0:	91 01       	movw	r18, r2
     ed2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     ed6:	18 16       	cp	r1, r24
     ed8:	64 f4       	brge	.+24     	; 0xef2 <CalculPWM+0x4b4>
     eda:	a2 01       	movw	r20, r4
     edc:	91 01       	movw	r18, r2
     ede:	6c 2d       	mov	r22, r12
     ee0:	7d 2d       	mov	r23, r13
     ee2:	80 2f       	mov	r24, r16
     ee4:	91 2f       	mov	r25, r17
     ee6:	0e 94 ae 0a 	call	0x155c	; 0x155c <__mulsf3>
     eea:	66 2e       	mov	r6, r22
     eec:	77 2e       	mov	r7, r23
     eee:	a8 2e       	mov	r10, r24
     ef0:	b9 2e       	mov	r11, r25
     ef2:	86 2d       	mov	r24, r6
     ef4:	97 2d       	mov	r25, r7
     ef6:	aa 2d       	mov	r26, r10
     ef8:	bb 2d       	mov	r27, r11
     efa:	80 93 aa 00 	sts	0x00AA, r24
     efe:	90 93 ab 00 	sts	0x00AB, r25
     f02:	a0 93 ac 00 	sts	0x00AC, r26
     f06:	b0 93 ad 00 	sts	0x00AD, r27


	*Duty_D = (Ut+Ua);
     f0a:	26 2d       	mov	r18, r6
     f0c:	37 2d       	mov	r19, r7
     f0e:	4a 2d       	mov	r20, r10
     f10:	5b 2d       	mov	r21, r11
     f12:	68 2d       	mov	r22, r8
     f14:	79 2d       	mov	r23, r9
     f16:	8e 2d       	mov	r24, r14
     f18:	9f 2d       	mov	r25, r15
     f1a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__addsf3>
     f1e:	ad a1       	ldd	r26, Y+37	; 0x25
     f20:	be a1       	ldd	r27, Y+38	; 0x26
     f22:	6d 93       	st	X+, r22
     f24:	7d 93       	st	X+, r23
     f26:	8d 93       	st	X+, r24
     f28:	9c 93       	st	X, r25
     f2a:	13 97       	sbiw	r26, 0x03	; 3
	*Duty_G = (Ut-Ua);
     f2c:	28 2d       	mov	r18, r8
     f2e:	39 2d       	mov	r19, r9
     f30:	4e 2d       	mov	r20, r14
     f32:	5f 2d       	mov	r21, r15
     f34:	66 2d       	mov	r22, r6
     f36:	77 2d       	mov	r23, r7
     f38:	8a 2d       	mov	r24, r10
     f3a:	9b 2d       	mov	r25, r11
     f3c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__subsf3>
     f40:	ed 81       	ldd	r30, Y+5	; 0x05
     f42:	fe 81       	ldd	r31, Y+6	; 0x06
     f44:	60 83       	st	Z, r22
     f46:	71 83       	std	Z+1, r23	; 0x01
     f48:	82 83       	std	Z+2, r24	; 0x02
     f4a:	93 83       	std	Z+3, r25	; 0x03

	*Duty_D = (*Duty_D > 0.99) ? 0.99 : ((*Duty_D < -0.99) ? -0.99 : *Duty_D);
     f4c:	ad a1       	ldd	r26, Y+37	; 0x25
     f4e:	be a1       	ldd	r27, Y+38	; 0x26
     f50:	ec 90       	ld	r14, X
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	fc 90       	ld	r15, X
     f56:	11 97       	sbiw	r26, 0x01	; 1
     f58:	12 96       	adiw	r26, 0x02	; 2
     f5a:	0c 91       	ld	r16, X
     f5c:	12 97       	sbiw	r26, 0x02	; 2
     f5e:	13 96       	adiw	r26, 0x03	; 3
     f60:	1c 91       	ld	r17, X
     f62:	24 ea       	ldi	r18, 0xA4	; 164
     f64:	30 e7       	ldi	r19, 0x70	; 112
     f66:	4d e7       	ldi	r20, 0x7D	; 125
     f68:	5f e3       	ldi	r21, 0x3F	; 63
     f6a:	6e 2d       	mov	r22, r14
     f6c:	7f 2d       	mov	r23, r15
     f6e:	80 2f       	mov	r24, r16
     f70:	91 2f       	mov	r25, r17
     f72:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     f76:	18 16       	cp	r1, r24
     f78:	8c f0       	brlt	.+34     	; 0xf9c <CalculPWM+0x55e>
     f7a:	24 ea       	ldi	r18, 0xA4	; 164
     f7c:	30 e7       	ldi	r19, 0x70	; 112
     f7e:	4d e7       	ldi	r20, 0x7D	; 125
     f80:	5f eb       	ldi	r21, 0xBF	; 191
     f82:	6e 2d       	mov	r22, r14
     f84:	7f 2d       	mov	r23, r15
     f86:	80 2f       	mov	r24, r16
     f88:	91 2f       	mov	r25, r17
     f8a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
     f8e:	88 23       	and	r24, r24
     f90:	54 f4       	brge	.+20     	; 0xfa6 <CalculPWM+0x568>
     f92:	34 ea       	ldi	r19, 0xA4	; 164
     f94:	20 e7       	ldi	r18, 0x70	; 112
     f96:	0d e7       	ldi	r16, 0x7D	; 125
     f98:	1f eb       	ldi	r17, 0xBF	; 191
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <CalculPWM+0x56c>
     f9c:	34 ea       	ldi	r19, 0xA4	; 164
     f9e:	20 e7       	ldi	r18, 0x70	; 112
     fa0:	0d e7       	ldi	r16, 0x7D	; 125
     fa2:	1f e3       	ldi	r17, 0x3F	; 63
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <CalculPWM+0x56c>
     fa6:	3e 2d       	mov	r19, r14
     fa8:	2f 2d       	mov	r18, r15
     faa:	83 2f       	mov	r24, r19
     fac:	92 2f       	mov	r25, r18
     fae:	a0 2f       	mov	r26, r16
     fb0:	b1 2f       	mov	r27, r17
     fb2:	ed a1       	ldd	r30, Y+37	; 0x25
     fb4:	fe a1       	ldd	r31, Y+38	; 0x26
     fb6:	80 83       	st	Z, r24
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	a2 83       	std	Z+2, r26	; 0x02
     fbc:	b3 83       	std	Z+3, r27	; 0x03
	*Duty_G = (*Duty_G > 0.99) ? 0.99 : ((*Duty_G < -0.99) ? -0.99 : *Duty_G);	
     fbe:	ad 81       	ldd	r26, Y+5	; 0x05
     fc0:	be 81       	ldd	r27, Y+6	; 0x06
     fc2:	ec 90       	ld	r14, X
     fc4:	11 96       	adiw	r26, 0x01	; 1
     fc6:	fc 90       	ld	r15, X
     fc8:	11 97       	sbiw	r26, 0x01	; 1
     fca:	12 96       	adiw	r26, 0x02	; 2
     fcc:	0c 91       	ld	r16, X
     fce:	12 97       	sbiw	r26, 0x02	; 2
     fd0:	13 96       	adiw	r26, 0x03	; 3
     fd2:	1c 91       	ld	r17, X
     fd4:	24 ea       	ldi	r18, 0xA4	; 164
     fd6:	30 e7       	ldi	r19, 0x70	; 112
     fd8:	4d e7       	ldi	r20, 0x7D	; 125
     fda:	5f e3       	ldi	r21, 0x3F	; 63
     fdc:	6e 2d       	mov	r22, r14
     fde:	7f 2d       	mov	r23, r15
     fe0:	80 2f       	mov	r24, r16
     fe2:	91 2f       	mov	r25, r17
     fe4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     fe8:	18 16       	cp	r1, r24
     fea:	8c f0       	brlt	.+34     	; 0x100e <CalculPWM+0x5d0>
     fec:	24 ea       	ldi	r18, 0xA4	; 164
     fee:	30 e7       	ldi	r19, 0x70	; 112
     ff0:	4d e7       	ldi	r20, 0x7D	; 125
     ff2:	5f eb       	ldi	r21, 0xBF	; 191
     ff4:	6e 2d       	mov	r22, r14
     ff6:	7f 2d       	mov	r23, r15
     ff8:	80 2f       	mov	r24, r16
     ffa:	91 2f       	mov	r25, r17
     ffc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__cmpsf2>
    1000:	88 23       	and	r24, r24
    1002:	54 f4       	brge	.+20     	; 0x1018 <CalculPWM+0x5da>
    1004:	34 ea       	ldi	r19, 0xA4	; 164
    1006:	20 e7       	ldi	r18, 0x70	; 112
    1008:	0d e7       	ldi	r16, 0x7D	; 125
    100a:	1f eb       	ldi	r17, 0xBF	; 191
    100c:	07 c0       	rjmp	.+14     	; 0x101c <CalculPWM+0x5de>
    100e:	34 ea       	ldi	r19, 0xA4	; 164
    1010:	20 e7       	ldi	r18, 0x70	; 112
    1012:	0d e7       	ldi	r16, 0x7D	; 125
    1014:	1f e3       	ldi	r17, 0x3F	; 63
    1016:	02 c0       	rjmp	.+4      	; 0x101c <CalculPWM+0x5de>
    1018:	3e 2d       	mov	r19, r14
    101a:	2f 2d       	mov	r18, r15
    101c:	83 2f       	mov	r24, r19
    101e:	92 2f       	mov	r25, r18
    1020:	a0 2f       	mov	r26, r16
    1022:	b1 2f       	mov	r27, r17
    1024:	ed 81       	ldd	r30, Y+5	; 0x05
    1026:	fe 81       	ldd	r31, Y+6	; 0x06
    1028:	80 83       	st	Z, r24
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	a2 83       	std	Z+2, r26	; 0x02
    102e:	b3 83       	std	Z+3, r27	; 0x03
}
    1030:	60 96       	adiw	r28, 0x10	; 16
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	bf 90       	pop	r11
    104e:	af 90       	pop	r10
    1050:	9f 90       	pop	r9
    1052:	8f 90       	pop	r8
    1054:	7f 90       	pop	r7
    1056:	6f 90       	pop	r6
    1058:	5f 90       	pop	r5
    105a:	4f 90       	pop	r4
    105c:	3f 90       	pop	r3
    105e:	2f 90       	pop	r2
    1060:	08 95       	ret

00001062 <__vector_9>:
/*************************** VARIABLES LOCALES ***************************/	
static volatile INT8U TICK_counter = 0;

/********************** Interrupt TIMER 1 overflow ***********************/
ISR(TIMER1_OVF_vect)
{	
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
    106c:	8f 93       	push	r24
	flag_PWMcycle = 1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	80 93 c4 00 	sts	0x00C4, r24
	
	TICK_counter++;
    1074:	80 91 c2 00 	lds	r24, 0x00C2
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	80 93 c2 00 	sts	0x00C2, r24
	
	if(TICK_counter == 10)
    107e:	80 91 c2 00 	lds	r24, 0x00C2
    1082:	8a 30       	cpi	r24, 0x0A	; 10
    1084:	29 f4       	brne	.+10     	; 0x1090 <__vector_9+0x2e>
	{
		flag_50ms_TICK = 1;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	80 93 c3 00 	sts	0x00C3, r24
		TICK_counter = 0;
    108c:	10 92 c2 00 	sts	0x00C2, r1
	}
}
    1090:	8f 91       	pop	r24
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <initTIMER>:
	//    = (16000000)/(200*64) - 1 
	//    = 1249 = 0x04E1
	
	//	see [datasheet p.99]
	
	ICR1H = 0x04;
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	87 bd       	out	0x27, r24	; 39
	ICR1L = 0xE1;
    10a0:	91 ee       	ldi	r25, 0xE1	; 225
    10a2:	96 bd       	out	0x26, r25	; 38
	
	TIMSK = 0x04;
    10a4:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|
    10a6:	92 ea       	ldi	r25, 0xA2	; 162
    10a8:	9f bd       	out	0x2f, r25	; 47
			 (0<<FOC1A)|(0<<FOC1B)|(1<<WGM11)|(0<<WGM10);
			 
	TCCR1B = (1<<ICES1)|(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);
    10aa:	9b e5       	ldi	r25, 0x5B	; 91
    10ac:	9e bd       	out	0x2e, r25	; 46
	 
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|
    10ae:	9b e1       	ldi	r25, 0x1B	; 27
    10b0:	9e bd       	out	0x2e, r25	; 46
			 (0<<CS12)|(1<<CS11)|(1<<CS10);
			 
	TIMSK  = (0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(1<<TOIE1);
    10b2:	89 bf       	out	0x39, r24	; 57
    10b4:	08 95       	ret

000010b6 <__vector_15>:
static volatile INT8U uart_out_counter;
static volatile INT8U uart_in_counter;

/********************** INTERRUPT UART TX Complete ***********************/	
ISR(USART_TXC_vect)      
{
    10b6:	1f 92       	push	r1
    10b8:	0f 92       	push	r0
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	0f 92       	push	r0
    10be:	11 24       	eor	r1, r1
    10c0:	8f 93       	push	r24
    10c2:	9f 93       	push	r25
    10c4:	ef 93       	push	r30
    10c6:	ff 93       	push	r31
	if (uart_out_counter)
    10c8:	80 91 c6 00 	lds	r24, 0x00C6
    10cc:	88 23       	and	r24, r24
    10ce:	a9 f0       	breq	.+42     	; 0x10fa <__vector_15+0x44>
	{
		UDR = *uart_data_ptr;
    10d0:	e0 91 c7 00 	lds	r30, 0x00C7
    10d4:	f0 91 c8 00 	lds	r31, 0x00C8
    10d8:	80 81       	ld	r24, Z
    10da:	8c b9       	out	0x0c, r24	; 12
		uart_data_ptr++;
    10dc:	80 91 c7 00 	lds	r24, 0x00C7
    10e0:	90 91 c8 00 	lds	r25, 0x00C8
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	90 93 c8 00 	sts	0x00C8, r25
    10ea:	80 93 c7 00 	sts	0x00C7, r24
		uart_out_counter--;
    10ee:	80 91 c6 00 	lds	r24, 0x00C6
    10f2:	81 50       	subi	r24, 0x01	; 1
    10f4:	80 93 c6 00 	sts	0x00C6, r24
    10f8:	08 c0       	rjmp	.+16     	; 0x110a <__vector_15+0x54>
	}
	else
	{
		UDR = 0xFF;
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	8c b9       	out	0x0c, r24	; 12
		flag_trans_ON = 0;
    10fe:	10 92 cc 00 	sts	0x00CC, r1
		flag_echo_EN = 1;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	80 93 68 00 	sts	0x0068, r24
		UCSRB &= ~(1<<TXCIE);
    1108:	56 98       	cbi	0x0a, 6	; 10
	}
}
    110a:	ff 91       	pop	r31
    110c:	ef 91       	pop	r30
    110e:	9f 91       	pop	r25
    1110:	8f 91       	pop	r24
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <__vector_13>:
/*************************************************************************/

/********************** INTERRUPT UART RX Complete ***********************/	
ISR(USART_RXC_vect)      
{
    111c:	1f 92       	push	r1
    111e:	0f 92       	push	r0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	8f 93       	push	r24
    1128:	9f 93       	push	r25
    112a:	ef 93       	push	r30
    112c:	ff 93       	push	r31
	INT8U data;
	data = UDR;
    112e:	8c b1       	in	r24, 0x0c	; 12

	/* Reset WATCHDOG*/
	wdt_reset();
    1130:	a8 95       	wdr
		
	if(data == 0xF0 || data == 0xF1)
    1132:	90 e1       	ldi	r25, 0x10	; 16
    1134:	98 0f       	add	r25, r24
    1136:	92 30       	cpi	r25, 0x02	; 2
    1138:	70 f4       	brcc	.+28     	; 0x1156 <__vector_13+0x3a>
	{
		uart_in_counter = 0;
    113a:	10 92 c5 00 	sts	0x00C5, r1
		commande[uart_in_counter] = data;
    113e:	e0 91 c5 00 	lds	r30, 0x00C5
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	e7 53       	subi	r30, 0x37	; 55
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 83       	st	Z, r24
		uart_in_counter++;
    114a:	90 91 c5 00 	lds	r25, 0x00C5
    114e:	9f 5f       	subi	r25, 0xFF	; 255
    1150:	90 93 c5 00 	sts	0x00C5, r25
    1154:	0b c0       	rjmp	.+22     	; 0x116c <__vector_13+0x50>
	} 
	else
	{
 		commande[uart_in_counter] = data;
    1156:	e0 91 c5 00 	lds	r30, 0x00C5
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	e7 53       	subi	r30, 0x37	; 55
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	80 83       	st	Z, r24
 		uart_in_counter++;
    1162:	90 91 c5 00 	lds	r25, 0x00C5
    1166:	9f 5f       	subi	r25, 0xFF	; 255
    1168:	90 93 c5 00 	sts	0x00C5, r25
	}
	/* Reset counter*/
	if(uart_in_counter == 3)
    116c:	90 91 c5 00 	lds	r25, 0x00C5
    1170:	93 30       	cpi	r25, 0x03	; 3
    1172:	29 f4       	brne	.+10     	; 0x117e <__vector_13+0x62>
	{
		flag_CMD_in = 1;
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	90 93 cd 00 	sts	0x00CD, r25
 		uart_in_counter = 0;
    117a:	10 92 c5 00 	sts	0x00C5, r1
	}

	/* Send echo if enabled */
	if( flag_echo_EN == 1)
    117e:	90 91 68 00 	lds	r25, 0x0068
    1182:	91 30       	cpi	r25, 0x01	; 1
    1184:	09 f4       	brne	.+2      	; 0x1188 <__vector_13+0x6c>
	{
		UDR = data;
    1186:	8c b9       	out	0x0c, r24	; 12
	}
}
    1188:	ff 91       	pop	r31
    118a:	ef 91       	pop	r30
    118c:	9f 91       	pop	r25
    118e:	8f 91       	pop	r24
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <debug_send>:

/****************************** DEBUG SEND *******************************/
void debug_send(INT8U *buf, INT8U size)
{   
	
    flag_echo_EN =0	;
    119a:	10 92 68 00 	sts	0x0068, r1
	UCSRA |= (1<<TXC);
    119e:	5e 9a       	sbi	0x0b, 6	; 11
	UCSRB |= (1<<TXCIE);
    11a0:	56 9a       	sbi	0x0a, 6	; 10
	
 	if (flag_trans_ON == 0) 
    11a2:	20 91 cc 00 	lds	r18, 0x00CC
    11a6:	21 11       	cpse	r18, r1
    11a8:	0b c0       	rjmp	.+22     	; 0x11c0 <debug_send+0x26>
	{
        uart_data_ptr  = buf;
    11aa:	90 93 c8 00 	sts	0x00C8, r25
    11ae:	80 93 c7 00 	sts	0x00C7, r24
	    uart_out_counter = size;
    11b2:	60 93 c6 00 	sts	0x00C6, r22
        flag_trans_ON = 1;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	80 93 cc 00 	sts	0x00CC, r24
		UDR = 0xFE;
    11bc:	8e ef       	ldi	r24, 0xFE	; 254
    11be:	8c b9       	out	0x0c, r24	; 12
    11c0:	08 95       	ret

000011c2 <initUART>:
	//- 1 bit darrêt 
	//- Mode : Interruption
	//- 8 bits de données 
	//- pas de parité
	
	flag_echo_EN = 1;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	80 93 68 00 	sts	0x0068, r24
	flag_CMD_in = 0;
    11c8:	10 92 cd 00 	sts	0x00CD, r1
	uart_out_counter = 0;
    11cc:	10 92 c6 00 	sts	0x00C6, r1
	uart_in_counter = 0;
    11d0:	10 92 c5 00 	sts	0x00C5, r1
    UCSRC = (1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|
    11d4:	86 e8       	ldi	r24, 0x86	; 134
    11d6:	80 bd       	out	0x20, r24	; 32
			(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0)|(0<<UCPOL);
			
    UCSRB = (1<<RXCIE)|(1<<TXCIE)|(1<<RXEN)|(1<<TXEN)|(0<<UCSZ2);       
    11d8:	88 ed       	ldi	r24, 0xD8	; 216
    11da:	8a b9       	out	0x0a, r24	; 10
   
    /* set baud rate */
    UBRRH = (INT8U)(UART_BAUD_SELECT >> 8);         
    11dc:	10 bc       	out	0x20, r1	; 32
    UBRRL = (INT8U)(UART_BAUD_SELECT & 0x00FF);
    11de:	87 e6       	ldi	r24, 0x67	; 103
    11e0:	89 b9       	out	0x09, r24	; 9
	
	/*Enable WATCHDOG with a 1s timer*/
	wdt_enable(WDTO_1S);          
    11e2:	2e e0       	ldi	r18, 0x0E	; 14
    11e4:	88 e1       	ldi	r24, 0x18	; 24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	a8 95       	wdr
    11ee:	81 bd       	out	0x21, r24	; 33
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	21 bd       	out	0x21, r18	; 33
    11f4:	08 95       	ret

000011f6 <__subsf3>:
    11f6:	50 58       	subi	r21, 0x80	; 128

000011f8 <__addsf3>:
    11f8:	bb 27       	eor	r27, r27
    11fa:	aa 27       	eor	r26, r26
    11fc:	0e d0       	rcall	.+28     	; 0x121a <__addsf3x>
    11fe:	70 c1       	rjmp	.+736    	; 0x14e0 <__fp_round>
    1200:	61 d1       	rcall	.+706    	; 0x14c4 <__fp_pscA>
    1202:	30 f0       	brcs	.+12     	; 0x1210 <__addsf3+0x18>
    1204:	66 d1       	rcall	.+716    	; 0x14d2 <__fp_pscB>
    1206:	20 f0       	brcs	.+8      	; 0x1210 <__addsf3+0x18>
    1208:	31 f4       	brne	.+12     	; 0x1216 <__addsf3+0x1e>
    120a:	9f 3f       	cpi	r25, 0xFF	; 255
    120c:	11 f4       	brne	.+4      	; 0x1212 <__addsf3+0x1a>
    120e:	1e f4       	brtc	.+6      	; 0x1216 <__addsf3+0x1e>
    1210:	56 c1       	rjmp	.+684    	; 0x14be <__fp_nan>
    1212:	0e f4       	brtc	.+2      	; 0x1216 <__addsf3+0x1e>
    1214:	e0 95       	com	r30
    1216:	e7 fb       	bst	r30, 7
    1218:	4c c1       	rjmp	.+664    	; 0x14b2 <__fp_inf>

0000121a <__addsf3x>:
    121a:	e9 2f       	mov	r30, r25
    121c:	72 d1       	rcall	.+740    	; 0x1502 <__fp_split3>
    121e:	80 f3       	brcs	.-32     	; 0x1200 <__addsf3+0x8>
    1220:	ba 17       	cp	r27, r26
    1222:	62 07       	cpc	r22, r18
    1224:	73 07       	cpc	r23, r19
    1226:	84 07       	cpc	r24, r20
    1228:	95 07       	cpc	r25, r21
    122a:	18 f0       	brcs	.+6      	; 0x1232 <__addsf3x+0x18>
    122c:	71 f4       	brne	.+28     	; 0x124a <__addsf3x+0x30>
    122e:	9e f5       	brtc	.+102    	; 0x1296 <__addsf3x+0x7c>
    1230:	8a c1       	rjmp	.+788    	; 0x1546 <__fp_zero>
    1232:	0e f4       	brtc	.+2      	; 0x1236 <__addsf3x+0x1c>
    1234:	e0 95       	com	r30
    1236:	0b 2e       	mov	r0, r27
    1238:	ba 2f       	mov	r27, r26
    123a:	a0 2d       	mov	r26, r0
    123c:	0b 01       	movw	r0, r22
    123e:	b9 01       	movw	r22, r18
    1240:	90 01       	movw	r18, r0
    1242:	0c 01       	movw	r0, r24
    1244:	ca 01       	movw	r24, r20
    1246:	a0 01       	movw	r20, r0
    1248:	11 24       	eor	r1, r1
    124a:	ff 27       	eor	r31, r31
    124c:	59 1b       	sub	r21, r25
    124e:	99 f0       	breq	.+38     	; 0x1276 <__addsf3x+0x5c>
    1250:	59 3f       	cpi	r21, 0xF9	; 249
    1252:	50 f4       	brcc	.+20     	; 0x1268 <__addsf3x+0x4e>
    1254:	50 3e       	cpi	r21, 0xE0	; 224
    1256:	68 f1       	brcs	.+90     	; 0x12b2 <__addsf3x+0x98>
    1258:	1a 16       	cp	r1, r26
    125a:	f0 40       	sbci	r31, 0x00	; 0
    125c:	a2 2f       	mov	r26, r18
    125e:	23 2f       	mov	r18, r19
    1260:	34 2f       	mov	r19, r20
    1262:	44 27       	eor	r20, r20
    1264:	58 5f       	subi	r21, 0xF8	; 248
    1266:	f3 cf       	rjmp	.-26     	; 0x124e <__addsf3x+0x34>
    1268:	46 95       	lsr	r20
    126a:	37 95       	ror	r19
    126c:	27 95       	ror	r18
    126e:	a7 95       	ror	r26
    1270:	f0 40       	sbci	r31, 0x00	; 0
    1272:	53 95       	inc	r21
    1274:	c9 f7       	brne	.-14     	; 0x1268 <__addsf3x+0x4e>
    1276:	7e f4       	brtc	.+30     	; 0x1296 <__addsf3x+0x7c>
    1278:	1f 16       	cp	r1, r31
    127a:	ba 0b       	sbc	r27, r26
    127c:	62 0b       	sbc	r22, r18
    127e:	73 0b       	sbc	r23, r19
    1280:	84 0b       	sbc	r24, r20
    1282:	ba f0       	brmi	.+46     	; 0x12b2 <__addsf3x+0x98>
    1284:	91 50       	subi	r25, 0x01	; 1
    1286:	a1 f0       	breq	.+40     	; 0x12b0 <__addsf3x+0x96>
    1288:	ff 0f       	add	r31, r31
    128a:	bb 1f       	adc	r27, r27
    128c:	66 1f       	adc	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	88 1f       	adc	r24, r24
    1292:	c2 f7       	brpl	.-16     	; 0x1284 <__addsf3x+0x6a>
    1294:	0e c0       	rjmp	.+28     	; 0x12b2 <__addsf3x+0x98>
    1296:	ba 0f       	add	r27, r26
    1298:	62 1f       	adc	r22, r18
    129a:	73 1f       	adc	r23, r19
    129c:	84 1f       	adc	r24, r20
    129e:	48 f4       	brcc	.+18     	; 0x12b2 <__addsf3x+0x98>
    12a0:	87 95       	ror	r24
    12a2:	77 95       	ror	r23
    12a4:	67 95       	ror	r22
    12a6:	b7 95       	ror	r27
    12a8:	f7 95       	ror	r31
    12aa:	9e 3f       	cpi	r25, 0xFE	; 254
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <__addsf3x+0x96>
    12ae:	b3 cf       	rjmp	.-154    	; 0x1216 <__addsf3+0x1e>
    12b0:	93 95       	inc	r25
    12b2:	88 0f       	add	r24, r24
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <__addsf3x+0x9e>
    12b6:	99 27       	eor	r25, r25
    12b8:	ee 0f       	add	r30, r30
    12ba:	97 95       	ror	r25
    12bc:	87 95       	ror	r24
    12be:	08 95       	ret

000012c0 <__cmpsf2>:
    12c0:	d4 d0       	rcall	.+424    	; 0x146a <__fp_cmp>
    12c2:	08 f4       	brcc	.+2      	; 0x12c6 <__cmpsf2+0x6>
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	08 95       	ret

000012c8 <__divsf3>:
    12c8:	0c d0       	rcall	.+24     	; 0x12e2 <__divsf3x>
    12ca:	0a c1       	rjmp	.+532    	; 0x14e0 <__fp_round>
    12cc:	02 d1       	rcall	.+516    	; 0x14d2 <__fp_pscB>
    12ce:	40 f0       	brcs	.+16     	; 0x12e0 <__divsf3+0x18>
    12d0:	f9 d0       	rcall	.+498    	; 0x14c4 <__fp_pscA>
    12d2:	30 f0       	brcs	.+12     	; 0x12e0 <__divsf3+0x18>
    12d4:	21 f4       	brne	.+8      	; 0x12de <__divsf3+0x16>
    12d6:	5f 3f       	cpi	r21, 0xFF	; 255
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <__divsf3+0x18>
    12da:	eb c0       	rjmp	.+470    	; 0x14b2 <__fp_inf>
    12dc:	51 11       	cpse	r21, r1
    12de:	34 c1       	rjmp	.+616    	; 0x1548 <__fp_szero>
    12e0:	ee c0       	rjmp	.+476    	; 0x14be <__fp_nan>

000012e2 <__divsf3x>:
    12e2:	0f d1       	rcall	.+542    	; 0x1502 <__fp_split3>
    12e4:	98 f3       	brcs	.-26     	; 0x12cc <__divsf3+0x4>

000012e6 <__divsf3_pse>:
    12e6:	99 23       	and	r25, r25
    12e8:	c9 f3       	breq	.-14     	; 0x12dc <__divsf3+0x14>
    12ea:	55 23       	and	r21, r21
    12ec:	b1 f3       	breq	.-20     	; 0x12da <__divsf3+0x12>
    12ee:	95 1b       	sub	r25, r21
    12f0:	55 0b       	sbc	r21, r21
    12f2:	bb 27       	eor	r27, r27
    12f4:	aa 27       	eor	r26, r26
    12f6:	62 17       	cp	r22, r18
    12f8:	73 07       	cpc	r23, r19
    12fa:	84 07       	cpc	r24, r20
    12fc:	38 f0       	brcs	.+14     	; 0x130c <__divsf3_pse+0x26>
    12fe:	9f 5f       	subi	r25, 0xFF	; 255
    1300:	5f 4f       	sbci	r21, 0xFF	; 255
    1302:	22 0f       	add	r18, r18
    1304:	33 1f       	adc	r19, r19
    1306:	44 1f       	adc	r20, r20
    1308:	aa 1f       	adc	r26, r26
    130a:	a9 f3       	breq	.-22     	; 0x12f6 <__divsf3_pse+0x10>
    130c:	33 d0       	rcall	.+102    	; 0x1374 <__divsf3_pse+0x8e>
    130e:	0e 2e       	mov	r0, r30
    1310:	3a f0       	brmi	.+14     	; 0x1320 <__divsf3_pse+0x3a>
    1312:	e0 e8       	ldi	r30, 0x80	; 128
    1314:	30 d0       	rcall	.+96     	; 0x1376 <__divsf3_pse+0x90>
    1316:	91 50       	subi	r25, 0x01	; 1
    1318:	50 40       	sbci	r21, 0x00	; 0
    131a:	e6 95       	lsr	r30
    131c:	00 1c       	adc	r0, r0
    131e:	ca f7       	brpl	.-14     	; 0x1312 <__divsf3_pse+0x2c>
    1320:	29 d0       	rcall	.+82     	; 0x1374 <__divsf3_pse+0x8e>
    1322:	fe 2f       	mov	r31, r30
    1324:	27 d0       	rcall	.+78     	; 0x1374 <__divsf3_pse+0x8e>
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	bb 1f       	adc	r27, r27
    132e:	26 17       	cp	r18, r22
    1330:	37 07       	cpc	r19, r23
    1332:	48 07       	cpc	r20, r24
    1334:	ab 07       	cpc	r26, r27
    1336:	b0 e8       	ldi	r27, 0x80	; 128
    1338:	09 f0       	breq	.+2      	; 0x133c <__divsf3_pse+0x56>
    133a:	bb 0b       	sbc	r27, r27
    133c:	80 2d       	mov	r24, r0
    133e:	bf 01       	movw	r22, r30
    1340:	ff 27       	eor	r31, r31
    1342:	93 58       	subi	r25, 0x83	; 131
    1344:	5f 4f       	sbci	r21, 0xFF	; 255
    1346:	2a f0       	brmi	.+10     	; 0x1352 <__divsf3_pse+0x6c>
    1348:	9e 3f       	cpi	r25, 0xFE	; 254
    134a:	51 05       	cpc	r21, r1
    134c:	68 f0       	brcs	.+26     	; 0x1368 <__divsf3_pse+0x82>
    134e:	b1 c0       	rjmp	.+354    	; 0x14b2 <__fp_inf>
    1350:	fb c0       	rjmp	.+502    	; 0x1548 <__fp_szero>
    1352:	5f 3f       	cpi	r21, 0xFF	; 255
    1354:	ec f3       	brlt	.-6      	; 0x1350 <__divsf3_pse+0x6a>
    1356:	98 3e       	cpi	r25, 0xE8	; 232
    1358:	dc f3       	brlt	.-10     	; 0x1350 <__divsf3_pse+0x6a>
    135a:	86 95       	lsr	r24
    135c:	77 95       	ror	r23
    135e:	67 95       	ror	r22
    1360:	b7 95       	ror	r27
    1362:	f7 95       	ror	r31
    1364:	9f 5f       	subi	r25, 0xFF	; 255
    1366:	c9 f7       	brne	.-14     	; 0x135a <__divsf3_pse+0x74>
    1368:	88 0f       	add	r24, r24
    136a:	91 1d       	adc	r25, r1
    136c:	96 95       	lsr	r25
    136e:	87 95       	ror	r24
    1370:	97 f9       	bld	r25, 7
    1372:	08 95       	ret
    1374:	e1 e0       	ldi	r30, 0x01	; 1
    1376:	66 0f       	add	r22, r22
    1378:	77 1f       	adc	r23, r23
    137a:	88 1f       	adc	r24, r24
    137c:	bb 1f       	adc	r27, r27
    137e:	62 17       	cp	r22, r18
    1380:	73 07       	cpc	r23, r19
    1382:	84 07       	cpc	r24, r20
    1384:	ba 07       	cpc	r27, r26
    1386:	20 f0       	brcs	.+8      	; 0x1390 <__divsf3_pse+0xaa>
    1388:	62 1b       	sub	r22, r18
    138a:	73 0b       	sbc	r23, r19
    138c:	84 0b       	sbc	r24, r20
    138e:	ba 0b       	sbc	r27, r26
    1390:	ee 1f       	adc	r30, r30
    1392:	88 f7       	brcc	.-30     	; 0x1376 <__divsf3_pse+0x90>
    1394:	e0 95       	com	r30
    1396:	08 95       	ret

00001398 <__fixunssfsi>:
    1398:	bc d0       	rcall	.+376    	; 0x1512 <__fp_splitA>
    139a:	88 f0       	brcs	.+34     	; 0x13be <__fixunssfsi+0x26>
    139c:	9f 57       	subi	r25, 0x7F	; 127
    139e:	90 f0       	brcs	.+36     	; 0x13c4 <__fixunssfsi+0x2c>
    13a0:	b9 2f       	mov	r27, r25
    13a2:	99 27       	eor	r25, r25
    13a4:	b7 51       	subi	r27, 0x17	; 23
    13a6:	a0 f0       	brcs	.+40     	; 0x13d0 <__fixunssfsi+0x38>
    13a8:	d1 f0       	breq	.+52     	; 0x13de <__fixunssfsi+0x46>
    13aa:	66 0f       	add	r22, r22
    13ac:	77 1f       	adc	r23, r23
    13ae:	88 1f       	adc	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	1a f0       	brmi	.+6      	; 0x13ba <__fixunssfsi+0x22>
    13b4:	ba 95       	dec	r27
    13b6:	c9 f7       	brne	.-14     	; 0x13aa <__fixunssfsi+0x12>
    13b8:	12 c0       	rjmp	.+36     	; 0x13de <__fixunssfsi+0x46>
    13ba:	b1 30       	cpi	r27, 0x01	; 1
    13bc:	81 f0       	breq	.+32     	; 0x13de <__fixunssfsi+0x46>
    13be:	c3 d0       	rcall	.+390    	; 0x1546 <__fp_zero>
    13c0:	b1 e0       	ldi	r27, 0x01	; 1
    13c2:	08 95       	ret
    13c4:	c0 c0       	rjmp	.+384    	; 0x1546 <__fp_zero>
    13c6:	67 2f       	mov	r22, r23
    13c8:	78 2f       	mov	r23, r24
    13ca:	88 27       	eor	r24, r24
    13cc:	b8 5f       	subi	r27, 0xF8	; 248
    13ce:	39 f0       	breq	.+14     	; 0x13de <__fixunssfsi+0x46>
    13d0:	b9 3f       	cpi	r27, 0xF9	; 249
    13d2:	cc f3       	brlt	.-14     	; 0x13c6 <__fixunssfsi+0x2e>
    13d4:	86 95       	lsr	r24
    13d6:	77 95       	ror	r23
    13d8:	67 95       	ror	r22
    13da:	b3 95       	inc	r27
    13dc:	d9 f7       	brne	.-10     	; 0x13d4 <__fixunssfsi+0x3c>
    13de:	3e f4       	brtc	.+14     	; 0x13ee <__fixunssfsi+0x56>
    13e0:	90 95       	com	r25
    13e2:	80 95       	com	r24
    13e4:	70 95       	com	r23
    13e6:	61 95       	neg	r22
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ea:	8f 4f       	sbci	r24, 0xFF	; 255
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	08 95       	ret

000013f0 <__floatunsisf>:
    13f0:	e8 94       	clt
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <__floatsisf+0x12>

000013f4 <__floatsisf>:
    13f4:	97 fb       	bst	r25, 7
    13f6:	3e f4       	brtc	.+14     	; 0x1406 <__floatsisf+0x12>
    13f8:	90 95       	com	r25
    13fa:	80 95       	com	r24
    13fc:	70 95       	com	r23
    13fe:	61 95       	neg	r22
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	8f 4f       	sbci	r24, 0xFF	; 255
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	99 23       	and	r25, r25
    1408:	a9 f0       	breq	.+42     	; 0x1434 <__floatsisf+0x40>
    140a:	f9 2f       	mov	r31, r25
    140c:	96 e9       	ldi	r25, 0x96	; 150
    140e:	bb 27       	eor	r27, r27
    1410:	93 95       	inc	r25
    1412:	f6 95       	lsr	r31
    1414:	87 95       	ror	r24
    1416:	77 95       	ror	r23
    1418:	67 95       	ror	r22
    141a:	b7 95       	ror	r27
    141c:	f1 11       	cpse	r31, r1
    141e:	f8 cf       	rjmp	.-16     	; 0x1410 <__floatsisf+0x1c>
    1420:	fa f4       	brpl	.+62     	; 0x1460 <__floatsisf+0x6c>
    1422:	bb 0f       	add	r27, r27
    1424:	11 f4       	brne	.+4      	; 0x142a <__floatsisf+0x36>
    1426:	60 ff       	sbrs	r22, 0
    1428:	1b c0       	rjmp	.+54     	; 0x1460 <__floatsisf+0x6c>
    142a:	6f 5f       	subi	r22, 0xFF	; 255
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	8f 4f       	sbci	r24, 0xFF	; 255
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	16 c0       	rjmp	.+44     	; 0x1460 <__floatsisf+0x6c>
    1434:	88 23       	and	r24, r24
    1436:	11 f0       	breq	.+4      	; 0x143c <__floatsisf+0x48>
    1438:	96 e9       	ldi	r25, 0x96	; 150
    143a:	11 c0       	rjmp	.+34     	; 0x145e <__floatsisf+0x6a>
    143c:	77 23       	and	r23, r23
    143e:	21 f0       	breq	.+8      	; 0x1448 <__floatsisf+0x54>
    1440:	9e e8       	ldi	r25, 0x8E	; 142
    1442:	87 2f       	mov	r24, r23
    1444:	76 2f       	mov	r23, r22
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <__floatsisf+0x5e>
    1448:	66 23       	and	r22, r22
    144a:	71 f0       	breq	.+28     	; 0x1468 <__floatsisf+0x74>
    144c:	96 e8       	ldi	r25, 0x86	; 134
    144e:	86 2f       	mov	r24, r22
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	2a f0       	brmi	.+10     	; 0x1460 <__floatsisf+0x6c>
    1456:	9a 95       	dec	r25
    1458:	66 0f       	add	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	88 1f       	adc	r24, r24
    145e:	da f7       	brpl	.-10     	; 0x1456 <__floatsisf+0x62>
    1460:	88 0f       	add	r24, r24
    1462:	96 95       	lsr	r25
    1464:	87 95       	ror	r24
    1466:	97 f9       	bld	r25, 7
    1468:	08 95       	ret

0000146a <__fp_cmp>:
    146a:	99 0f       	add	r25, r25
    146c:	00 08       	sbc	r0, r0
    146e:	55 0f       	add	r21, r21
    1470:	aa 0b       	sbc	r26, r26
    1472:	e0 e8       	ldi	r30, 0x80	; 128
    1474:	fe ef       	ldi	r31, 0xFE	; 254
    1476:	16 16       	cp	r1, r22
    1478:	17 06       	cpc	r1, r23
    147a:	e8 07       	cpc	r30, r24
    147c:	f9 07       	cpc	r31, r25
    147e:	c0 f0       	brcs	.+48     	; 0x14b0 <__fp_cmp+0x46>
    1480:	12 16       	cp	r1, r18
    1482:	13 06       	cpc	r1, r19
    1484:	e4 07       	cpc	r30, r20
    1486:	f5 07       	cpc	r31, r21
    1488:	98 f0       	brcs	.+38     	; 0x14b0 <__fp_cmp+0x46>
    148a:	62 1b       	sub	r22, r18
    148c:	73 0b       	sbc	r23, r19
    148e:	84 0b       	sbc	r24, r20
    1490:	95 0b       	sbc	r25, r21
    1492:	39 f4       	brne	.+14     	; 0x14a2 <__fp_cmp+0x38>
    1494:	0a 26       	eor	r0, r26
    1496:	61 f0       	breq	.+24     	; 0x14b0 <__fp_cmp+0x46>
    1498:	23 2b       	or	r18, r19
    149a:	24 2b       	or	r18, r20
    149c:	25 2b       	or	r18, r21
    149e:	21 f4       	brne	.+8      	; 0x14a8 <__fp_cmp+0x3e>
    14a0:	08 95       	ret
    14a2:	0a 26       	eor	r0, r26
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <__fp_cmp+0x3e>
    14a6:	a1 40       	sbci	r26, 0x01	; 1
    14a8:	a6 95       	lsr	r26
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	81 1d       	adc	r24, r1
    14ae:	81 1d       	adc	r24, r1
    14b0:	08 95       	ret

000014b2 <__fp_inf>:
    14b2:	97 f9       	bld	r25, 7
    14b4:	9f 67       	ori	r25, 0x7F	; 127
    14b6:	80 e8       	ldi	r24, 0x80	; 128
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	08 95       	ret

000014be <__fp_nan>:
    14be:	9f ef       	ldi	r25, 0xFF	; 255
    14c0:	80 ec       	ldi	r24, 0xC0	; 192
    14c2:	08 95       	ret

000014c4 <__fp_pscA>:
    14c4:	00 24       	eor	r0, r0
    14c6:	0a 94       	dec	r0
    14c8:	16 16       	cp	r1, r22
    14ca:	17 06       	cpc	r1, r23
    14cc:	18 06       	cpc	r1, r24
    14ce:	09 06       	cpc	r0, r25
    14d0:	08 95       	ret

000014d2 <__fp_pscB>:
    14d2:	00 24       	eor	r0, r0
    14d4:	0a 94       	dec	r0
    14d6:	12 16       	cp	r1, r18
    14d8:	13 06       	cpc	r1, r19
    14da:	14 06       	cpc	r1, r20
    14dc:	05 06       	cpc	r0, r21
    14de:	08 95       	ret

000014e0 <__fp_round>:
    14e0:	09 2e       	mov	r0, r25
    14e2:	03 94       	inc	r0
    14e4:	00 0c       	add	r0, r0
    14e6:	11 f4       	brne	.+4      	; 0x14ec <__fp_round+0xc>
    14e8:	88 23       	and	r24, r24
    14ea:	52 f0       	brmi	.+20     	; 0x1500 <__fp_round+0x20>
    14ec:	bb 0f       	add	r27, r27
    14ee:	40 f4       	brcc	.+16     	; 0x1500 <__fp_round+0x20>
    14f0:	bf 2b       	or	r27, r31
    14f2:	11 f4       	brne	.+4      	; 0x14f8 <__fp_round+0x18>
    14f4:	60 ff       	sbrs	r22, 0
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <__fp_round+0x20>
    14f8:	6f 5f       	subi	r22, 0xFF	; 255
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	8f 4f       	sbci	r24, 0xFF	; 255
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	08 95       	ret

00001502 <__fp_split3>:
    1502:	57 fd       	sbrc	r21, 7
    1504:	90 58       	subi	r25, 0x80	; 128
    1506:	44 0f       	add	r20, r20
    1508:	55 1f       	adc	r21, r21
    150a:	59 f0       	breq	.+22     	; 0x1522 <__fp_splitA+0x10>
    150c:	5f 3f       	cpi	r21, 0xFF	; 255
    150e:	71 f0       	breq	.+28     	; 0x152c <__fp_splitA+0x1a>
    1510:	47 95       	ror	r20

00001512 <__fp_splitA>:
    1512:	88 0f       	add	r24, r24
    1514:	97 fb       	bst	r25, 7
    1516:	99 1f       	adc	r25, r25
    1518:	61 f0       	breq	.+24     	; 0x1532 <__fp_splitA+0x20>
    151a:	9f 3f       	cpi	r25, 0xFF	; 255
    151c:	79 f0       	breq	.+30     	; 0x153c <__fp_splitA+0x2a>
    151e:	87 95       	ror	r24
    1520:	08 95       	ret
    1522:	12 16       	cp	r1, r18
    1524:	13 06       	cpc	r1, r19
    1526:	14 06       	cpc	r1, r20
    1528:	55 1f       	adc	r21, r21
    152a:	f2 cf       	rjmp	.-28     	; 0x1510 <__fp_split3+0xe>
    152c:	46 95       	lsr	r20
    152e:	f1 df       	rcall	.-30     	; 0x1512 <__fp_splitA>
    1530:	08 c0       	rjmp	.+16     	; 0x1542 <__fp_splitA+0x30>
    1532:	16 16       	cp	r1, r22
    1534:	17 06       	cpc	r1, r23
    1536:	18 06       	cpc	r1, r24
    1538:	99 1f       	adc	r25, r25
    153a:	f1 cf       	rjmp	.-30     	; 0x151e <__fp_splitA+0xc>
    153c:	86 95       	lsr	r24
    153e:	71 05       	cpc	r23, r1
    1540:	61 05       	cpc	r22, r1
    1542:	08 94       	sec
    1544:	08 95       	ret

00001546 <__fp_zero>:
    1546:	e8 94       	clt

00001548 <__fp_szero>:
    1548:	bb 27       	eor	r27, r27
    154a:	66 27       	eor	r22, r22
    154c:	77 27       	eor	r23, r23
    154e:	cb 01       	movw	r24, r22
    1550:	97 f9       	bld	r25, 7
    1552:	08 95       	ret

00001554 <__gesf2>:
    1554:	8a df       	rcall	.-236    	; 0x146a <__fp_cmp>
    1556:	08 f4       	brcc	.+2      	; 0x155a <__gesf2+0x6>
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	08 95       	ret

0000155c <__mulsf3>:
    155c:	0b d0       	rcall	.+22     	; 0x1574 <__mulsf3x>
    155e:	c0 cf       	rjmp	.-128    	; 0x14e0 <__fp_round>
    1560:	b1 df       	rcall	.-158    	; 0x14c4 <__fp_pscA>
    1562:	28 f0       	brcs	.+10     	; 0x156e <__mulsf3+0x12>
    1564:	b6 df       	rcall	.-148    	; 0x14d2 <__fp_pscB>
    1566:	18 f0       	brcs	.+6      	; 0x156e <__mulsf3+0x12>
    1568:	95 23       	and	r25, r21
    156a:	09 f0       	breq	.+2      	; 0x156e <__mulsf3+0x12>
    156c:	a2 cf       	rjmp	.-188    	; 0x14b2 <__fp_inf>
    156e:	a7 cf       	rjmp	.-178    	; 0x14be <__fp_nan>
    1570:	11 24       	eor	r1, r1
    1572:	ea cf       	rjmp	.-44     	; 0x1548 <__fp_szero>

00001574 <__mulsf3x>:
    1574:	c6 df       	rcall	.-116    	; 0x1502 <__fp_split3>
    1576:	a0 f3       	brcs	.-24     	; 0x1560 <__mulsf3+0x4>

00001578 <__mulsf3_pse>:
    1578:	95 9f       	mul	r25, r21
    157a:	d1 f3       	breq	.-12     	; 0x1570 <__mulsf3+0x14>
    157c:	95 0f       	add	r25, r21
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	55 1f       	adc	r21, r21
    1582:	62 9f       	mul	r22, r18
    1584:	f0 01       	movw	r30, r0
    1586:	72 9f       	mul	r23, r18
    1588:	bb 27       	eor	r27, r27
    158a:	f0 0d       	add	r31, r0
    158c:	b1 1d       	adc	r27, r1
    158e:	63 9f       	mul	r22, r19
    1590:	aa 27       	eor	r26, r26
    1592:	f0 0d       	add	r31, r0
    1594:	b1 1d       	adc	r27, r1
    1596:	aa 1f       	adc	r26, r26
    1598:	64 9f       	mul	r22, r20
    159a:	66 27       	eor	r22, r22
    159c:	b0 0d       	add	r27, r0
    159e:	a1 1d       	adc	r26, r1
    15a0:	66 1f       	adc	r22, r22
    15a2:	82 9f       	mul	r24, r18
    15a4:	22 27       	eor	r18, r18
    15a6:	b0 0d       	add	r27, r0
    15a8:	a1 1d       	adc	r26, r1
    15aa:	62 1f       	adc	r22, r18
    15ac:	73 9f       	mul	r23, r19
    15ae:	b0 0d       	add	r27, r0
    15b0:	a1 1d       	adc	r26, r1
    15b2:	62 1f       	adc	r22, r18
    15b4:	83 9f       	mul	r24, r19
    15b6:	a0 0d       	add	r26, r0
    15b8:	61 1d       	adc	r22, r1
    15ba:	22 1f       	adc	r18, r18
    15bc:	74 9f       	mul	r23, r20
    15be:	33 27       	eor	r19, r19
    15c0:	a0 0d       	add	r26, r0
    15c2:	61 1d       	adc	r22, r1
    15c4:	23 1f       	adc	r18, r19
    15c6:	84 9f       	mul	r24, r20
    15c8:	60 0d       	add	r22, r0
    15ca:	21 1d       	adc	r18, r1
    15cc:	82 2f       	mov	r24, r18
    15ce:	76 2f       	mov	r23, r22
    15d0:	6a 2f       	mov	r22, r26
    15d2:	11 24       	eor	r1, r1
    15d4:	9f 57       	subi	r25, 0x7F	; 127
    15d6:	50 40       	sbci	r21, 0x00	; 0
    15d8:	8a f0       	brmi	.+34     	; 0x15fc <__mulsf3_pse+0x84>
    15da:	e1 f0       	breq	.+56     	; 0x1614 <__mulsf3_pse+0x9c>
    15dc:	88 23       	and	r24, r24
    15de:	4a f0       	brmi	.+18     	; 0x15f2 <__mulsf3_pse+0x7a>
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	bb 1f       	adc	r27, r27
    15e6:	66 1f       	adc	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	88 1f       	adc	r24, r24
    15ec:	91 50       	subi	r25, 0x01	; 1
    15ee:	50 40       	sbci	r21, 0x00	; 0
    15f0:	a9 f7       	brne	.-22     	; 0x15dc <__mulsf3_pse+0x64>
    15f2:	9e 3f       	cpi	r25, 0xFE	; 254
    15f4:	51 05       	cpc	r21, r1
    15f6:	70 f0       	brcs	.+28     	; 0x1614 <__mulsf3_pse+0x9c>
    15f8:	5c cf       	rjmp	.-328    	; 0x14b2 <__fp_inf>
    15fa:	a6 cf       	rjmp	.-180    	; 0x1548 <__fp_szero>
    15fc:	5f 3f       	cpi	r21, 0xFF	; 255
    15fe:	ec f3       	brlt	.-6      	; 0x15fa <__mulsf3_pse+0x82>
    1600:	98 3e       	cpi	r25, 0xE8	; 232
    1602:	dc f3       	brlt	.-10     	; 0x15fa <__mulsf3_pse+0x82>
    1604:	86 95       	lsr	r24
    1606:	77 95       	ror	r23
    1608:	67 95       	ror	r22
    160a:	b7 95       	ror	r27
    160c:	f7 95       	ror	r31
    160e:	e7 95       	ror	r30
    1610:	9f 5f       	subi	r25, 0xFF	; 255
    1612:	c1 f7       	brne	.-16     	; 0x1604 <__mulsf3_pse+0x8c>
    1614:	fe 2b       	or	r31, r30
    1616:	88 0f       	add	r24, r24
    1618:	91 1d       	adc	r25, r1
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	97 f9       	bld	r25, 7
    1620:	08 95       	ret

00001622 <__udivmodsi4>:
    1622:	a1 e2       	ldi	r26, 0x21	; 33
    1624:	1a 2e       	mov	r1, r26
    1626:	aa 1b       	sub	r26, r26
    1628:	bb 1b       	sub	r27, r27
    162a:	fd 01       	movw	r30, r26
    162c:	0d c0       	rjmp	.+26     	; 0x1648 <__udivmodsi4_ep>

0000162e <__udivmodsi4_loop>:
    162e:	aa 1f       	adc	r26, r26
    1630:	bb 1f       	adc	r27, r27
    1632:	ee 1f       	adc	r30, r30
    1634:	ff 1f       	adc	r31, r31
    1636:	a2 17       	cp	r26, r18
    1638:	b3 07       	cpc	r27, r19
    163a:	e4 07       	cpc	r30, r20
    163c:	f5 07       	cpc	r31, r21
    163e:	20 f0       	brcs	.+8      	; 0x1648 <__udivmodsi4_ep>
    1640:	a2 1b       	sub	r26, r18
    1642:	b3 0b       	sbc	r27, r19
    1644:	e4 0b       	sbc	r30, r20
    1646:	f5 0b       	sbc	r31, r21

00001648 <__udivmodsi4_ep>:
    1648:	66 1f       	adc	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	88 1f       	adc	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	1a 94       	dec	r1
    1652:	69 f7       	brne	.-38     	; 0x162e <__udivmodsi4_loop>
    1654:	60 95       	com	r22
    1656:	70 95       	com	r23
    1658:	80 95       	com	r24
    165a:	90 95       	com	r25
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	bd 01       	movw	r22, r26
    1662:	cf 01       	movw	r24, r30
    1664:	08 95       	ret

00001666 <sprintf>:
    1666:	ae e0       	ldi	r26, 0x0E	; 14
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e9 e3       	ldi	r30, 0x39	; 57
    166c:	fb e0       	ldi	r31, 0x0B	; 11
    166e:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__prologue_saves__+0x1c>
    1672:	0d 89       	ldd	r16, Y+21	; 0x15
    1674:	1e 89       	ldd	r17, Y+22	; 0x16
    1676:	86 e0       	ldi	r24, 0x06	; 6
    1678:	8c 83       	std	Y+4, r24	; 0x04
    167a:	1a 83       	std	Y+2, r17	; 0x02
    167c:	09 83       	std	Y+1, r16	; 0x01
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	9f e7       	ldi	r25, 0x7F	; 127
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 83       	std	Y+5, r24	; 0x05
    1686:	ae 01       	movw	r20, r28
    1688:	47 5e       	subi	r20, 0xE7	; 231
    168a:	5f 4f       	sbci	r21, 0xFF	; 255
    168c:	6f 89       	ldd	r22, Y+23	; 0x17
    168e:	78 8d       	ldd	r23, Y+24	; 0x18
    1690:	ce 01       	movw	r24, r28
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vfprintf>
    1698:	ef 81       	ldd	r30, Y+7	; 0x07
    169a:	f8 85       	ldd	r31, Y+8	; 0x08
    169c:	e0 0f       	add	r30, r16
    169e:	f1 1f       	adc	r31, r17
    16a0:	10 82       	st	Z, r1
    16a2:	2e 96       	adiw	r28, 0x0e	; 14
    16a4:	e4 e0       	ldi	r30, 0x04	; 4
    16a6:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__epilogue_restores__+0x1c>

000016aa <vfprintf>:
    16aa:	ac e0       	ldi	r26, 0x0C	; 12
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	eb e5       	ldi	r30, 0x5B	; 91
    16b0:	fb e0       	ldi	r31, 0x0B	; 11
    16b2:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__prologue_saves__>
    16b6:	7c 01       	movw	r14, r24
    16b8:	6b 01       	movw	r12, r22
    16ba:	8a 01       	movw	r16, r20
    16bc:	fc 01       	movw	r30, r24
    16be:	17 82       	std	Z+7, r1	; 0x07
    16c0:	16 82       	std	Z+6, r1	; 0x06
    16c2:	83 81       	ldd	r24, Z+3	; 0x03
    16c4:	81 ff       	sbrs	r24, 1
    16c6:	bd c1       	rjmp	.+890    	; 0x1a42 <vfprintf+0x398>
    16c8:	ce 01       	movw	r24, r28
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	4c 01       	movw	r8, r24
    16ce:	f7 01       	movw	r30, r14
    16d0:	93 81       	ldd	r25, Z+3	; 0x03
    16d2:	f6 01       	movw	r30, r12
    16d4:	93 fd       	sbrc	r25, 3
    16d6:	85 91       	lpm	r24, Z+
    16d8:	93 ff       	sbrs	r25, 3
    16da:	81 91       	ld	r24, Z+
    16dc:	6f 01       	movw	r12, r30
    16de:	88 23       	and	r24, r24
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <vfprintf+0x3a>
    16e2:	ab c1       	rjmp	.+854    	; 0x1a3a <vfprintf+0x390>
    16e4:	85 32       	cpi	r24, 0x25	; 37
    16e6:	39 f4       	brne	.+14     	; 0x16f6 <vfprintf+0x4c>
    16e8:	93 fd       	sbrc	r25, 3
    16ea:	85 91       	lpm	r24, Z+
    16ec:	93 ff       	sbrs	r25, 3
    16ee:	81 91       	ld	r24, Z+
    16f0:	6f 01       	movw	r12, r30
    16f2:	85 32       	cpi	r24, 0x25	; 37
    16f4:	29 f4       	brne	.+10     	; 0x1700 <vfprintf+0x56>
    16f6:	b7 01       	movw	r22, r14
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    16fe:	e7 cf       	rjmp	.-50     	; 0x16ce <vfprintf+0x24>
    1700:	51 2c       	mov	r5, r1
    1702:	31 2c       	mov	r3, r1
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	20 32       	cpi	r18, 0x20	; 32
    1708:	a0 f4       	brcc	.+40     	; 0x1732 <vfprintf+0x88>
    170a:	8b 32       	cpi	r24, 0x2B	; 43
    170c:	69 f0       	breq	.+26     	; 0x1728 <vfprintf+0x7e>
    170e:	30 f4       	brcc	.+12     	; 0x171c <vfprintf+0x72>
    1710:	80 32       	cpi	r24, 0x20	; 32
    1712:	59 f0       	breq	.+22     	; 0x172a <vfprintf+0x80>
    1714:	83 32       	cpi	r24, 0x23	; 35
    1716:	69 f4       	brne	.+26     	; 0x1732 <vfprintf+0x88>
    1718:	20 61       	ori	r18, 0x10	; 16
    171a:	2c c0       	rjmp	.+88     	; 0x1774 <vfprintf+0xca>
    171c:	8d 32       	cpi	r24, 0x2D	; 45
    171e:	39 f0       	breq	.+14     	; 0x172e <vfprintf+0x84>
    1720:	80 33       	cpi	r24, 0x30	; 48
    1722:	39 f4       	brne	.+14     	; 0x1732 <vfprintf+0x88>
    1724:	21 60       	ori	r18, 0x01	; 1
    1726:	26 c0       	rjmp	.+76     	; 0x1774 <vfprintf+0xca>
    1728:	22 60       	ori	r18, 0x02	; 2
    172a:	24 60       	ori	r18, 0x04	; 4
    172c:	23 c0       	rjmp	.+70     	; 0x1774 <vfprintf+0xca>
    172e:	28 60       	ori	r18, 0x08	; 8
    1730:	21 c0       	rjmp	.+66     	; 0x1774 <vfprintf+0xca>
    1732:	27 fd       	sbrc	r18, 7
    1734:	27 c0       	rjmp	.+78     	; 0x1784 <vfprintf+0xda>
    1736:	30 ed       	ldi	r19, 0xD0	; 208
    1738:	38 0f       	add	r19, r24
    173a:	3a 30       	cpi	r19, 0x0A	; 10
    173c:	78 f4       	brcc	.+30     	; 0x175c <vfprintf+0xb2>
    173e:	26 ff       	sbrs	r18, 6
    1740:	06 c0       	rjmp	.+12     	; 0x174e <vfprintf+0xa4>
    1742:	fa e0       	ldi	r31, 0x0A	; 10
    1744:	5f 9e       	mul	r5, r31
    1746:	30 0d       	add	r19, r0
    1748:	11 24       	eor	r1, r1
    174a:	53 2e       	mov	r5, r19
    174c:	13 c0       	rjmp	.+38     	; 0x1774 <vfprintf+0xca>
    174e:	8a e0       	ldi	r24, 0x0A	; 10
    1750:	38 9e       	mul	r3, r24
    1752:	30 0d       	add	r19, r0
    1754:	11 24       	eor	r1, r1
    1756:	33 2e       	mov	r3, r19
    1758:	20 62       	ori	r18, 0x20	; 32
    175a:	0c c0       	rjmp	.+24     	; 0x1774 <vfprintf+0xca>
    175c:	8e 32       	cpi	r24, 0x2E	; 46
    175e:	21 f4       	brne	.+8      	; 0x1768 <vfprintf+0xbe>
    1760:	26 fd       	sbrc	r18, 6
    1762:	6b c1       	rjmp	.+726    	; 0x1a3a <vfprintf+0x390>
    1764:	20 64       	ori	r18, 0x40	; 64
    1766:	06 c0       	rjmp	.+12     	; 0x1774 <vfprintf+0xca>
    1768:	8c 36       	cpi	r24, 0x6C	; 108
    176a:	11 f4       	brne	.+4      	; 0x1770 <vfprintf+0xc6>
    176c:	20 68       	ori	r18, 0x80	; 128
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vfprintf+0xca>
    1770:	88 36       	cpi	r24, 0x68	; 104
    1772:	41 f4       	brne	.+16     	; 0x1784 <vfprintf+0xda>
    1774:	f6 01       	movw	r30, r12
    1776:	93 fd       	sbrc	r25, 3
    1778:	85 91       	lpm	r24, Z+
    177a:	93 ff       	sbrs	r25, 3
    177c:	81 91       	ld	r24, Z+
    177e:	6f 01       	movw	r12, r30
    1780:	81 11       	cpse	r24, r1
    1782:	c1 cf       	rjmp	.-126    	; 0x1706 <vfprintf+0x5c>
    1784:	98 2f       	mov	r25, r24
    1786:	9f 7d       	andi	r25, 0xDF	; 223
    1788:	95 54       	subi	r25, 0x45	; 69
    178a:	93 30       	cpi	r25, 0x03	; 3
    178c:	28 f4       	brcc	.+10     	; 0x1798 <vfprintf+0xee>
    178e:	0c 5f       	subi	r16, 0xFC	; 252
    1790:	1f 4f       	sbci	r17, 0xFF	; 255
    1792:	ff e3       	ldi	r31, 0x3F	; 63
    1794:	f9 83       	std	Y+1, r31	; 0x01
    1796:	0d c0       	rjmp	.+26     	; 0x17b2 <vfprintf+0x108>
    1798:	83 36       	cpi	r24, 0x63	; 99
    179a:	31 f0       	breq	.+12     	; 0x17a8 <vfprintf+0xfe>
    179c:	83 37       	cpi	r24, 0x73	; 115
    179e:	71 f0       	breq	.+28     	; 0x17bc <vfprintf+0x112>
    17a0:	83 35       	cpi	r24, 0x53	; 83
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <vfprintf+0xfc>
    17a4:	5b c0       	rjmp	.+182    	; 0x185c <vfprintf+0x1b2>
    17a6:	22 c0       	rjmp	.+68     	; 0x17ec <vfprintf+0x142>
    17a8:	f8 01       	movw	r30, r16
    17aa:	80 81       	ld	r24, Z
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	0e 5f       	subi	r16, 0xFE	; 254
    17b0:	1f 4f       	sbci	r17, 0xFF	; 255
    17b2:	44 24       	eor	r4, r4
    17b4:	43 94       	inc	r4
    17b6:	51 2c       	mov	r5, r1
    17b8:	54 01       	movw	r10, r8
    17ba:	15 c0       	rjmp	.+42     	; 0x17e6 <vfprintf+0x13c>
    17bc:	38 01       	movw	r6, r16
    17be:	f2 e0       	ldi	r31, 0x02	; 2
    17c0:	6f 0e       	add	r6, r31
    17c2:	71 1c       	adc	r7, r1
    17c4:	f8 01       	movw	r30, r16
    17c6:	a0 80       	ld	r10, Z
    17c8:	b1 80       	ldd	r11, Z+1	; 0x01
    17ca:	26 ff       	sbrs	r18, 6
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <vfprintf+0x12a>
    17ce:	65 2d       	mov	r22, r5
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <vfprintf+0x12e>
    17d4:	6f ef       	ldi	r22, 0xFF	; 255
    17d6:	7f ef       	ldi	r23, 0xFF	; 255
    17d8:	c5 01       	movw	r24, r10
    17da:	2c 87       	std	Y+12, r18	; 0x0c
    17dc:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <strnlen>
    17e0:	2c 01       	movw	r4, r24
    17e2:	83 01       	movw	r16, r6
    17e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    17e6:	2f 77       	andi	r18, 0x7F	; 127
    17e8:	22 2e       	mov	r2, r18
    17ea:	17 c0       	rjmp	.+46     	; 0x181a <vfprintf+0x170>
    17ec:	38 01       	movw	r6, r16
    17ee:	f2 e0       	ldi	r31, 0x02	; 2
    17f0:	6f 0e       	add	r6, r31
    17f2:	71 1c       	adc	r7, r1
    17f4:	f8 01       	movw	r30, r16
    17f6:	a0 80       	ld	r10, Z
    17f8:	b1 80       	ldd	r11, Z+1	; 0x01
    17fa:	26 ff       	sbrs	r18, 6
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <vfprintf+0x15a>
    17fe:	65 2d       	mov	r22, r5
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <vfprintf+0x15e>
    1804:	6f ef       	ldi	r22, 0xFF	; 255
    1806:	7f ef       	ldi	r23, 0xFF	; 255
    1808:	c5 01       	movw	r24, r10
    180a:	2c 87       	std	Y+12, r18	; 0x0c
    180c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <strnlen_P>
    1810:	2c 01       	movw	r4, r24
    1812:	2c 85       	ldd	r18, Y+12	; 0x0c
    1814:	20 68       	ori	r18, 0x80	; 128
    1816:	22 2e       	mov	r2, r18
    1818:	83 01       	movw	r16, r6
    181a:	23 fc       	sbrc	r2, 3
    181c:	1b c0       	rjmp	.+54     	; 0x1854 <vfprintf+0x1aa>
    181e:	83 2d       	mov	r24, r3
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	48 16       	cp	r4, r24
    1824:	59 06       	cpc	r5, r25
    1826:	b0 f4       	brcc	.+44     	; 0x1854 <vfprintf+0x1aa>
    1828:	b7 01       	movw	r22, r14
    182a:	80 e2       	ldi	r24, 0x20	; 32
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    1832:	3a 94       	dec	r3
    1834:	f4 cf       	rjmp	.-24     	; 0x181e <vfprintf+0x174>
    1836:	f5 01       	movw	r30, r10
    1838:	27 fc       	sbrc	r2, 7
    183a:	85 91       	lpm	r24, Z+
    183c:	27 fe       	sbrs	r2, 7
    183e:	81 91       	ld	r24, Z+
    1840:	5f 01       	movw	r10, r30
    1842:	b7 01       	movw	r22, r14
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    184a:	31 10       	cpse	r3, r1
    184c:	3a 94       	dec	r3
    184e:	f1 e0       	ldi	r31, 0x01	; 1
    1850:	4f 1a       	sub	r4, r31
    1852:	51 08       	sbc	r5, r1
    1854:	41 14       	cp	r4, r1
    1856:	51 04       	cpc	r5, r1
    1858:	71 f7       	brne	.-36     	; 0x1836 <vfprintf+0x18c>
    185a:	e5 c0       	rjmp	.+458    	; 0x1a26 <vfprintf+0x37c>
    185c:	84 36       	cpi	r24, 0x64	; 100
    185e:	11 f0       	breq	.+4      	; 0x1864 <vfprintf+0x1ba>
    1860:	89 36       	cpi	r24, 0x69	; 105
    1862:	39 f5       	brne	.+78     	; 0x18b2 <vfprintf+0x208>
    1864:	f8 01       	movw	r30, r16
    1866:	27 ff       	sbrs	r18, 7
    1868:	07 c0       	rjmp	.+14     	; 0x1878 <vfprintf+0x1ce>
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	93 81       	ldd	r25, Z+3	; 0x03
    1872:	0c 5f       	subi	r16, 0xFC	; 252
    1874:	1f 4f       	sbci	r17, 0xFF	; 255
    1876:	08 c0       	rjmp	.+16     	; 0x1888 <vfprintf+0x1de>
    1878:	60 81       	ld	r22, Z
    187a:	71 81       	ldd	r23, Z+1	; 0x01
    187c:	88 27       	eor	r24, r24
    187e:	77 fd       	sbrc	r23, 7
    1880:	80 95       	com	r24
    1882:	98 2f       	mov	r25, r24
    1884:	0e 5f       	subi	r16, 0xFE	; 254
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	2f 76       	andi	r18, 0x6F	; 111
    188a:	b2 2e       	mov	r11, r18
    188c:	97 ff       	sbrs	r25, 7
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <vfprintf+0x1f8>
    1890:	90 95       	com	r25
    1892:	80 95       	com	r24
    1894:	70 95       	com	r23
    1896:	61 95       	neg	r22
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	8f 4f       	sbci	r24, 0xFF	; 255
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	20 68       	ori	r18, 0x80	; 128
    18a0:	b2 2e       	mov	r11, r18
    18a2:	2a e0       	ldi	r18, 0x0A	; 10
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	a4 01       	movw	r20, r8
    18a8:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__ultoa_invert>
    18ac:	a8 2e       	mov	r10, r24
    18ae:	a8 18       	sub	r10, r8
    18b0:	44 c0       	rjmp	.+136    	; 0x193a <vfprintf+0x290>
    18b2:	85 37       	cpi	r24, 0x75	; 117
    18b4:	29 f4       	brne	.+10     	; 0x18c0 <vfprintf+0x216>
    18b6:	2f 7e       	andi	r18, 0xEF	; 239
    18b8:	b2 2e       	mov	r11, r18
    18ba:	2a e0       	ldi	r18, 0x0A	; 10
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	25 c0       	rjmp	.+74     	; 0x190a <vfprintf+0x260>
    18c0:	f2 2f       	mov	r31, r18
    18c2:	f9 7f       	andi	r31, 0xF9	; 249
    18c4:	bf 2e       	mov	r11, r31
    18c6:	8f 36       	cpi	r24, 0x6F	; 111
    18c8:	c1 f0       	breq	.+48     	; 0x18fa <vfprintf+0x250>
    18ca:	18 f4       	brcc	.+6      	; 0x18d2 <vfprintf+0x228>
    18cc:	88 35       	cpi	r24, 0x58	; 88
    18ce:	79 f0       	breq	.+30     	; 0x18ee <vfprintf+0x244>
    18d0:	b4 c0       	rjmp	.+360    	; 0x1a3a <vfprintf+0x390>
    18d2:	80 37       	cpi	r24, 0x70	; 112
    18d4:	19 f0       	breq	.+6      	; 0x18dc <vfprintf+0x232>
    18d6:	88 37       	cpi	r24, 0x78	; 120
    18d8:	21 f0       	breq	.+8      	; 0x18e2 <vfprintf+0x238>
    18da:	af c0       	rjmp	.+350    	; 0x1a3a <vfprintf+0x390>
    18dc:	2f 2f       	mov	r18, r31
    18de:	20 61       	ori	r18, 0x10	; 16
    18e0:	b2 2e       	mov	r11, r18
    18e2:	b4 fe       	sbrs	r11, 4
    18e4:	0d c0       	rjmp	.+26     	; 0x1900 <vfprintf+0x256>
    18e6:	8b 2d       	mov	r24, r11
    18e8:	84 60       	ori	r24, 0x04	; 4
    18ea:	b8 2e       	mov	r11, r24
    18ec:	09 c0       	rjmp	.+18     	; 0x1900 <vfprintf+0x256>
    18ee:	24 ff       	sbrs	r18, 4
    18f0:	0a c0       	rjmp	.+20     	; 0x1906 <vfprintf+0x25c>
    18f2:	9f 2f       	mov	r25, r31
    18f4:	96 60       	ori	r25, 0x06	; 6
    18f6:	b9 2e       	mov	r11, r25
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <vfprintf+0x25c>
    18fa:	28 e0       	ldi	r18, 0x08	; 8
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <vfprintf+0x260>
    1900:	20 e1       	ldi	r18, 0x10	; 16
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	02 c0       	rjmp	.+4      	; 0x190a <vfprintf+0x260>
    1906:	20 e1       	ldi	r18, 0x10	; 16
    1908:	32 e0       	ldi	r19, 0x02	; 2
    190a:	f8 01       	movw	r30, r16
    190c:	b7 fe       	sbrs	r11, 7
    190e:	07 c0       	rjmp	.+14     	; 0x191e <vfprintf+0x274>
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	0c 5f       	subi	r16, 0xFC	; 252
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	06 c0       	rjmp	.+12     	; 0x192a <vfprintf+0x280>
    191e:	60 81       	ld	r22, Z
    1920:	71 81       	ldd	r23, Z+1	; 0x01
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 5f       	subi	r16, 0xFE	; 254
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	a4 01       	movw	r20, r8
    192c:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__ultoa_invert>
    1930:	a8 2e       	mov	r10, r24
    1932:	a8 18       	sub	r10, r8
    1934:	fb 2d       	mov	r31, r11
    1936:	ff 77       	andi	r31, 0x7F	; 127
    1938:	bf 2e       	mov	r11, r31
    193a:	b6 fe       	sbrs	r11, 6
    193c:	0b c0       	rjmp	.+22     	; 0x1954 <vfprintf+0x2aa>
    193e:	2b 2d       	mov	r18, r11
    1940:	2e 7f       	andi	r18, 0xFE	; 254
    1942:	a5 14       	cp	r10, r5
    1944:	50 f4       	brcc	.+20     	; 0x195a <vfprintf+0x2b0>
    1946:	b4 fe       	sbrs	r11, 4
    1948:	0a c0       	rjmp	.+20     	; 0x195e <vfprintf+0x2b4>
    194a:	b2 fc       	sbrc	r11, 2
    194c:	08 c0       	rjmp	.+16     	; 0x195e <vfprintf+0x2b4>
    194e:	2b 2d       	mov	r18, r11
    1950:	2e 7e       	andi	r18, 0xEE	; 238
    1952:	05 c0       	rjmp	.+10     	; 0x195e <vfprintf+0x2b4>
    1954:	7a 2c       	mov	r7, r10
    1956:	2b 2d       	mov	r18, r11
    1958:	03 c0       	rjmp	.+6      	; 0x1960 <vfprintf+0x2b6>
    195a:	7a 2c       	mov	r7, r10
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <vfprintf+0x2b6>
    195e:	75 2c       	mov	r7, r5
    1960:	24 ff       	sbrs	r18, 4
    1962:	0d c0       	rjmp	.+26     	; 0x197e <vfprintf+0x2d4>
    1964:	fe 01       	movw	r30, r28
    1966:	ea 0d       	add	r30, r10
    1968:	f1 1d       	adc	r31, r1
    196a:	80 81       	ld	r24, Z
    196c:	80 33       	cpi	r24, 0x30	; 48
    196e:	11 f4       	brne	.+4      	; 0x1974 <vfprintf+0x2ca>
    1970:	29 7e       	andi	r18, 0xE9	; 233
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <vfprintf+0x2dc>
    1974:	22 ff       	sbrs	r18, 2
    1976:	06 c0       	rjmp	.+12     	; 0x1984 <vfprintf+0x2da>
    1978:	73 94       	inc	r7
    197a:	73 94       	inc	r7
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <vfprintf+0x2dc>
    197e:	82 2f       	mov	r24, r18
    1980:	86 78       	andi	r24, 0x86	; 134
    1982:	09 f0       	breq	.+2      	; 0x1986 <vfprintf+0x2dc>
    1984:	73 94       	inc	r7
    1986:	23 fd       	sbrc	r18, 3
    1988:	13 c0       	rjmp	.+38     	; 0x19b0 <vfprintf+0x306>
    198a:	20 ff       	sbrs	r18, 0
    198c:	06 c0       	rjmp	.+12     	; 0x199a <vfprintf+0x2f0>
    198e:	5a 2c       	mov	r5, r10
    1990:	73 14       	cp	r7, r3
    1992:	18 f4       	brcc	.+6      	; 0x199a <vfprintf+0x2f0>
    1994:	53 0c       	add	r5, r3
    1996:	57 18       	sub	r5, r7
    1998:	73 2c       	mov	r7, r3
    199a:	73 14       	cp	r7, r3
    199c:	68 f4       	brcc	.+26     	; 0x19b8 <vfprintf+0x30e>
    199e:	b7 01       	movw	r22, r14
    19a0:	80 e2       	ldi	r24, 0x20	; 32
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	2c 87       	std	Y+12, r18	; 0x0c
    19a6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    19aa:	73 94       	inc	r7
    19ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    19ae:	f5 cf       	rjmp	.-22     	; 0x199a <vfprintf+0x2f0>
    19b0:	73 14       	cp	r7, r3
    19b2:	10 f4       	brcc	.+4      	; 0x19b8 <vfprintf+0x30e>
    19b4:	37 18       	sub	r3, r7
    19b6:	01 c0       	rjmp	.+2      	; 0x19ba <vfprintf+0x310>
    19b8:	31 2c       	mov	r3, r1
    19ba:	24 ff       	sbrs	r18, 4
    19bc:	12 c0       	rjmp	.+36     	; 0x19e2 <vfprintf+0x338>
    19be:	b7 01       	movw	r22, r14
    19c0:	80 e3       	ldi	r24, 0x30	; 48
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	2c 87       	std	Y+12, r18	; 0x0c
    19c6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    19ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    19cc:	22 ff       	sbrs	r18, 2
    19ce:	17 c0       	rjmp	.+46     	; 0x19fe <vfprintf+0x354>
    19d0:	21 ff       	sbrs	r18, 1
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <vfprintf+0x330>
    19d4:	88 e5       	ldi	r24, 0x58	; 88
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <vfprintf+0x334>
    19da:	88 e7       	ldi	r24, 0x78	; 120
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	b7 01       	movw	r22, r14
    19e0:	0c c0       	rjmp	.+24     	; 0x19fa <vfprintf+0x350>
    19e2:	82 2f       	mov	r24, r18
    19e4:	86 78       	andi	r24, 0x86	; 134
    19e6:	59 f0       	breq	.+22     	; 0x19fe <vfprintf+0x354>
    19e8:	21 fd       	sbrc	r18, 1
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <vfprintf+0x346>
    19ec:	80 e2       	ldi	r24, 0x20	; 32
    19ee:	01 c0       	rjmp	.+2      	; 0x19f2 <vfprintf+0x348>
    19f0:	8b e2       	ldi	r24, 0x2B	; 43
    19f2:	27 fd       	sbrc	r18, 7
    19f4:	8d e2       	ldi	r24, 0x2D	; 45
    19f6:	b7 01       	movw	r22, r14
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    19fe:	a5 14       	cp	r10, r5
    1a00:	38 f4       	brcc	.+14     	; 0x1a10 <vfprintf+0x366>
    1a02:	b7 01       	movw	r22, r14
    1a04:	80 e3       	ldi	r24, 0x30	; 48
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    1a0c:	5a 94       	dec	r5
    1a0e:	f7 cf       	rjmp	.-18     	; 0x19fe <vfprintf+0x354>
    1a10:	aa 94       	dec	r10
    1a12:	f4 01       	movw	r30, r8
    1a14:	ea 0d       	add	r30, r10
    1a16:	f1 1d       	adc	r31, r1
    1a18:	80 81       	ld	r24, Z
    1a1a:	b7 01       	movw	r22, r14
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    1a22:	a1 10       	cpse	r10, r1
    1a24:	f5 cf       	rjmp	.-22     	; 0x1a10 <vfprintf+0x366>
    1a26:	33 20       	and	r3, r3
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <vfprintf+0x382>
    1a2a:	51 ce       	rjmp	.-862    	; 0x16ce <vfprintf+0x24>
    1a2c:	b7 01       	movw	r22, r14
    1a2e:	80 e2       	ldi	r24, 0x20	; 32
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <fputc>
    1a36:	3a 94       	dec	r3
    1a38:	f6 cf       	rjmp	.-20     	; 0x1a26 <vfprintf+0x37c>
    1a3a:	f7 01       	movw	r30, r14
    1a3c:	86 81       	ldd	r24, Z+6	; 0x06
    1a3e:	97 81       	ldd	r25, Z+7	; 0x07
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <vfprintf+0x39c>
    1a42:	8f ef       	ldi	r24, 0xFF	; 255
    1a44:	9f ef       	ldi	r25, 0xFF	; 255
    1a46:	2c 96       	adiw	r28, 0x0c	; 12
    1a48:	e2 e1       	ldi	r30, 0x12	; 18
    1a4a:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__epilogue_restores__>

00001a4e <strnlen_P>:
    1a4e:	fc 01       	movw	r30, r24
    1a50:	05 90       	lpm	r0, Z+
    1a52:	61 50       	subi	r22, 0x01	; 1
    1a54:	70 40       	sbci	r23, 0x00	; 0
    1a56:	01 10       	cpse	r0, r1
    1a58:	d8 f7       	brcc	.-10     	; 0x1a50 <strnlen_P+0x2>
    1a5a:	80 95       	com	r24
    1a5c:	90 95       	com	r25
    1a5e:	8e 0f       	add	r24, r30
    1a60:	9f 1f       	adc	r25, r31
    1a62:	08 95       	ret

00001a64 <strnlen>:
    1a64:	fc 01       	movw	r30, r24
    1a66:	61 50       	subi	r22, 0x01	; 1
    1a68:	70 40       	sbci	r23, 0x00	; 0
    1a6a:	01 90       	ld	r0, Z+
    1a6c:	01 10       	cpse	r0, r1
    1a6e:	d8 f7       	brcc	.-10     	; 0x1a66 <strnlen+0x2>
    1a70:	80 95       	com	r24
    1a72:	90 95       	com	r25
    1a74:	8e 0f       	add	r24, r30
    1a76:	9f 1f       	adc	r25, r31
    1a78:	08 95       	ret

00001a7a <fputc>:
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	18 2f       	mov	r17, r24
    1a84:	09 2f       	mov	r16, r25
    1a86:	eb 01       	movw	r28, r22
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	81 fd       	sbrc	r24, 1
    1a8c:	03 c0       	rjmp	.+6      	; 0x1a94 <fputc+0x1a>
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	9f ef       	ldi	r25, 0xFF	; 255
    1a92:	20 c0       	rjmp	.+64     	; 0x1ad4 <fputc+0x5a>
    1a94:	82 ff       	sbrs	r24, 2
    1a96:	10 c0       	rjmp	.+32     	; 0x1ab8 <fputc+0x3e>
    1a98:	4e 81       	ldd	r20, Y+6	; 0x06
    1a9a:	5f 81       	ldd	r21, Y+7	; 0x07
    1a9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa0:	42 17       	cp	r20, r18
    1aa2:	53 07       	cpc	r21, r19
    1aa4:	7c f4       	brge	.+30     	; 0x1ac4 <fputc+0x4a>
    1aa6:	e8 81       	ld	r30, Y
    1aa8:	f9 81       	ldd	r31, Y+1	; 0x01
    1aaa:	9f 01       	movw	r18, r30
    1aac:	2f 5f       	subi	r18, 0xFF	; 255
    1aae:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab0:	39 83       	std	Y+1, r19	; 0x01
    1ab2:	28 83       	st	Y, r18
    1ab4:	10 83       	st	Z, r17
    1ab6:	06 c0       	rjmp	.+12     	; 0x1ac4 <fputc+0x4a>
    1ab8:	e8 85       	ldd	r30, Y+8	; 0x08
    1aba:	f9 85       	ldd	r31, Y+9	; 0x09
    1abc:	81 2f       	mov	r24, r17
    1abe:	09 95       	icall
    1ac0:	89 2b       	or	r24, r25
    1ac2:	29 f7       	brne	.-54     	; 0x1a8e <fputc+0x14>
    1ac4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ac6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ac8:	2f 5f       	subi	r18, 0xFF	; 255
    1aca:	3f 4f       	sbci	r19, 0xFF	; 255
    1acc:	3f 83       	std	Y+7, r19	; 0x07
    1ace:	2e 83       	std	Y+6, r18	; 0x06
    1ad0:	81 2f       	mov	r24, r17
    1ad2:	90 2f       	mov	r25, r16
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	08 95       	ret

00001ade <__ultoa_invert>:
    1ade:	fa 01       	movw	r30, r20
    1ae0:	aa 27       	eor	r26, r26
    1ae2:	28 30       	cpi	r18, 0x08	; 8
    1ae4:	51 f1       	breq	.+84     	; 0x1b3a <__ultoa_invert+0x5c>
    1ae6:	20 31       	cpi	r18, 0x10	; 16
    1ae8:	81 f1       	breq	.+96     	; 0x1b4a <__ultoa_invert+0x6c>
    1aea:	e8 94       	clt
    1aec:	6f 93       	push	r22
    1aee:	6e 7f       	andi	r22, 0xFE	; 254
    1af0:	6e 5f       	subi	r22, 0xFE	; 254
    1af2:	7f 4f       	sbci	r23, 0xFF	; 255
    1af4:	8f 4f       	sbci	r24, 0xFF	; 255
    1af6:	9f 4f       	sbci	r25, 0xFF	; 255
    1af8:	af 4f       	sbci	r26, 0xFF	; 255
    1afa:	b1 e0       	ldi	r27, 0x01	; 1
    1afc:	3e d0       	rcall	.+124    	; 0x1b7a <__ultoa_invert+0x9c>
    1afe:	b4 e0       	ldi	r27, 0x04	; 4
    1b00:	3c d0       	rcall	.+120    	; 0x1b7a <__ultoa_invert+0x9c>
    1b02:	67 0f       	add	r22, r23
    1b04:	78 1f       	adc	r23, r24
    1b06:	89 1f       	adc	r24, r25
    1b08:	9a 1f       	adc	r25, r26
    1b0a:	a1 1d       	adc	r26, r1
    1b0c:	68 0f       	add	r22, r24
    1b0e:	79 1f       	adc	r23, r25
    1b10:	8a 1f       	adc	r24, r26
    1b12:	91 1d       	adc	r25, r1
    1b14:	a1 1d       	adc	r26, r1
    1b16:	6a 0f       	add	r22, r26
    1b18:	71 1d       	adc	r23, r1
    1b1a:	81 1d       	adc	r24, r1
    1b1c:	91 1d       	adc	r25, r1
    1b1e:	a1 1d       	adc	r26, r1
    1b20:	20 d0       	rcall	.+64     	; 0x1b62 <__ultoa_invert+0x84>
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <__ultoa_invert+0x48>
    1b24:	68 94       	set
    1b26:	3f 91       	pop	r19
    1b28:	2a e0       	ldi	r18, 0x0A	; 10
    1b2a:	26 9f       	mul	r18, r22
    1b2c:	11 24       	eor	r1, r1
    1b2e:	30 19       	sub	r19, r0
    1b30:	30 5d       	subi	r19, 0xD0	; 208
    1b32:	31 93       	st	Z+, r19
    1b34:	de f6       	brtc	.-74     	; 0x1aec <__ultoa_invert+0xe>
    1b36:	cf 01       	movw	r24, r30
    1b38:	08 95       	ret
    1b3a:	46 2f       	mov	r20, r22
    1b3c:	47 70       	andi	r20, 0x07	; 7
    1b3e:	40 5d       	subi	r20, 0xD0	; 208
    1b40:	41 93       	st	Z+, r20
    1b42:	b3 e0       	ldi	r27, 0x03	; 3
    1b44:	0f d0       	rcall	.+30     	; 0x1b64 <__ultoa_invert+0x86>
    1b46:	c9 f7       	brne	.-14     	; 0x1b3a <__ultoa_invert+0x5c>
    1b48:	f6 cf       	rjmp	.-20     	; 0x1b36 <__ultoa_invert+0x58>
    1b4a:	46 2f       	mov	r20, r22
    1b4c:	4f 70       	andi	r20, 0x0F	; 15
    1b4e:	40 5d       	subi	r20, 0xD0	; 208
    1b50:	4a 33       	cpi	r20, 0x3A	; 58
    1b52:	18 f0       	brcs	.+6      	; 0x1b5a <__ultoa_invert+0x7c>
    1b54:	49 5d       	subi	r20, 0xD9	; 217
    1b56:	31 fd       	sbrc	r19, 1
    1b58:	40 52       	subi	r20, 0x20	; 32
    1b5a:	41 93       	st	Z+, r20
    1b5c:	02 d0       	rcall	.+4      	; 0x1b62 <__ultoa_invert+0x84>
    1b5e:	a9 f7       	brne	.-22     	; 0x1b4a <__ultoa_invert+0x6c>
    1b60:	ea cf       	rjmp	.-44     	; 0x1b36 <__ultoa_invert+0x58>
    1b62:	b4 e0       	ldi	r27, 0x04	; 4
    1b64:	a6 95       	lsr	r26
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	77 95       	ror	r23
    1b6c:	67 95       	ror	r22
    1b6e:	ba 95       	dec	r27
    1b70:	c9 f7       	brne	.-14     	; 0x1b64 <__ultoa_invert+0x86>
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	61 05       	cpc	r22, r1
    1b76:	71 05       	cpc	r23, r1
    1b78:	08 95       	ret
    1b7a:	9b 01       	movw	r18, r22
    1b7c:	ac 01       	movw	r20, r24
    1b7e:	0a 2e       	mov	r0, r26
    1b80:	06 94       	lsr	r0
    1b82:	57 95       	ror	r21
    1b84:	47 95       	ror	r20
    1b86:	37 95       	ror	r19
    1b88:	27 95       	ror	r18
    1b8a:	ba 95       	dec	r27
    1b8c:	c9 f7       	brne	.-14     	; 0x1b80 <__ultoa_invert+0xa2>
    1b8e:	62 0f       	add	r22, r18
    1b90:	73 1f       	adc	r23, r19
    1b92:	84 1f       	adc	r24, r20
    1b94:	95 1f       	adc	r25, r21
    1b96:	a0 1d       	adc	r26, r0
    1b98:	08 95       	ret

00001b9a <__prologue_saves__>:
    1b9a:	2f 92       	push	r2
    1b9c:	3f 92       	push	r3
    1b9e:	4f 92       	push	r4
    1ba0:	5f 92       	push	r5
    1ba2:	6f 92       	push	r6
    1ba4:	7f 92       	push	r7
    1ba6:	8f 92       	push	r8
    1ba8:	9f 92       	push	r9
    1baa:	af 92       	push	r10
    1bac:	bf 92       	push	r11
    1bae:	cf 92       	push	r12
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	ca 1b       	sub	r28, r26
    1bc4:	db 0b       	sbc	r29, r27
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	09 94       	ijmp

00001bd2 <__epilogue_restores__>:
    1bd2:	2a 88       	ldd	r2, Y+18	; 0x12
    1bd4:	39 88       	ldd	r3, Y+17	; 0x11
    1bd6:	48 88       	ldd	r4, Y+16	; 0x10
    1bd8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bda:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bdc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bde:	8c 84       	ldd	r8, Y+12	; 0x0c
    1be0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1be2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1be4:	b9 84       	ldd	r11, Y+9	; 0x09
    1be6:	c8 84       	ldd	r12, Y+8	; 0x08
    1be8:	df 80       	ldd	r13, Y+7	; 0x07
    1bea:	ee 80       	ldd	r14, Y+6	; 0x06
    1bec:	fd 80       	ldd	r15, Y+5	; 0x05
    1bee:	0c 81       	ldd	r16, Y+4	; 0x04
    1bf0:	1b 81       	ldd	r17, Y+3	; 0x03
    1bf2:	aa 81       	ldd	r26, Y+2	; 0x02
    1bf4:	b9 81       	ldd	r27, Y+1	; 0x01
    1bf6:	ce 0f       	add	r28, r30
    1bf8:	d1 1d       	adc	r29, r1
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	ed 01       	movw	r28, r26
    1c06:	08 95       	ret

00001c08 <_exit>:
    1c08:	f8 94       	cli

00001c0a <__stop_program>:
    1c0a:	ff cf       	rjmp	.-2      	; 0x1c0a <__stop_program>
