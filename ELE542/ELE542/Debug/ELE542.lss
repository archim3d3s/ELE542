
ELE542.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002a2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800062  00800062  00000338  2**0
                  ALLOC
  3 .stab         00001c44  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000760  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000118  00000000  00000000  0000270b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f15  00000000  00000000  00002823  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004cb  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006e8  00000000  00000000  00003c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000254  00000000  00000000  000042ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000326  00000000  00000000  00004540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003ed  00000000  00000000  00004866  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  00004c53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "moteur.h"

void CalculPWM(float Vitesse_D, float Angle_D, float Vg, float Vd, float *Duty_G, float *Duty_D)
{
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_15>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	static float Ua     = 0.0;
	static int 	 Signe_Ua = 0;
	static int 	 Signe_Ut = 0;


	Vg = (Vg > 1.0) ? 1.0 : ((Vg < -1.0) ? -1.0 : Vg);  /* Regarde les limites (-1.0 à 1.0) */
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 89 00 	call	0x112	; 0x112 <main>
  8a:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_16>:
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
	Vd = (Vd > 1.0) ? 1.0 : ((Vd < -1.0) ? -1.0 : Vd);  /* Regarde les limites (-1.0 à 1.0) */
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	88 23       	and	r24, r24
  a8:	91 f0       	breq	.+36     	; 0xce <__vector_16+0x3c>
  aa:	80 91 64 00 	lds	r24, 0x0064
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	80 93 64 00 	sts	0x0064, r24
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	20 91 62 00 	lds	r18, 0x0062
  bc:	30 91 63 00 	lds	r19, 0x0063
  c0:	82 0f       	add	r24, r18
  c2:	93 1f       	adc	r25, r19
  c4:	90 93 63 00 	sts	0x0063, r25
  c8:	80 93 62 00 	sts	0x0062, r24
  cc:	11 c0       	rjmp	.+34     	; 0xf0 <__vector_16+0x5e>
  ce:	80 91 67 00 	lds	r24, 0x0067
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 67 00 	sts	0x0067, r24
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	95 b1       	in	r25, 0x05	; 5
  dc:	20 91 65 00 	lds	r18, 0x0065
		
	Old_W = W;
  e0:	30 91 66 00 	lds	r19, 0x0066
  e4:	82 0f       	add	r24, r18
  e6:	93 1f       	adc	r25, r19
  e8:	90 93 66 00 	sts	0x0066, r25
  ec:	80 93 65 00 	sts	0x0065, r24
  f0:	97 b1       	in	r25, 0x07	; 7
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	89 27       	eor	r24, r25
  f6:	87 b9       	out	0x07, r24	; 7
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	3f 91       	pop	r19
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
	W     = 0.5*(Vmax/RAYON)*(Vd-Vg);
 108:	18 95       	reti

0000010a <initLED>:
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	87 bb       	out	0x17, r24	; 23
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret

00000112 <main>:
 112:	0e 94 37 01 	call	0x26e	; 0x26e <initUART>
 116:	0e 94 b4 00 	call	0x168	; 0x168 <initTIMER>
 11a:	0e 94 85 00 	call	0x10a	; 0x10a <initLED>
 11e:	78 94       	sei
 120:	80 91 69 00 	lds	r24, 0x0069
 124:	80 91 6a 00 	lds	r24, 0x006A
 128:	80 91 6b 00 	lds	r24, 0x006B
 12c:	80 91 68 00 	lds	r24, 0x0068
 130:	f7 cf       	rjmp	.-18     	; 0x120 <main+0xe>

00000132 <__vector_9>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 6e 00 	sts	0x006E, r24
	Vt    = 0.5*(Vd+Vg);
 144:	80 91 6c 00 	lds	r24, 0x006C
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 6c 00 	sts	0x006C, r24
 14e:	80 91 6c 00 	lds	r24, 0x006C
 152:	8a 30       	cpi	r24, 0x0A	; 10
 154:	19 f4       	brne	.+6      	; 0x15c <__vector_9+0x2a>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 6d 00 	sts	0x006D, r24
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <initTIMER>:
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	87 bd       	out	0x27, r24	; 39
 16c:	91 ee       	ldi	r25, 0xE1	; 225
 16e:	96 bd       	out	0x26, r25	; 38
 170:	92 ea       	ldi	r25, 0xA2	; 162
 172:	9f bd       	out	0x2f, r25	; 47
 174:	9b e1       	ldi	r25, 0x1B	; 27
 176:	9e bd       	out	0x2e, r25	; 46
 178:	89 bf       	out	0x39, r24	; 57
 17a:	08 95       	ret

0000017c <__vector_15>:

	Angle = Angle + (0.5)*TS*(W+Old_W);
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
 18c:	80 91 75 00 	lds	r24, 0x0075
 190:	88 23       	and	r24, r24
 192:	81 f0       	breq	.+32     	; 0x1b4 <__vector_15+0x38>
 194:	e0 91 76 00 	lds	r30, 0x0076
 198:	f0 91 77 00 	lds	r31, 0x0077
 19c:	81 91       	ld	r24, Z+
 19e:	8c b9       	out	0x0c, r24	; 12
 1a0:	f0 93 77 00 	sts	0x0077, r31
 1a4:	e0 93 76 00 	sts	0x0076, r30
 1a8:	80 91 75 00 	lds	r24, 0x0075
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	80 93 75 00 	sts	0x0075, r24
 1b2:	08 c0       	rjmp	.+16     	; 0x1c4 <__vector_15+0x48>
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	8c b9       	out	0x0c, r24	; 12
 1b8:	10 92 6f 00 	sts	0x006F, r1
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 60 00 	sts	0x0060, r24
 1c2:	56 98       	cbi	0x0a, 6	; 10
	Angle = (Angle > 2.0*Pi) ? Angle - 2*Pi : ((Angle < 0.0) ? Angle + 2*Pi : Angle); /* Angle entre 0 et 2 pi */
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <__vector_13>:
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
 1e6:	8c b1       	in	r24, 0x0c	; 12
 1e8:	a8 95       	wdr
 1ea:	80 3f       	cpi	r24, 0xF0	; 240
 1ec:	79 f4       	brne	.+30     	; 0x20c <__vector_13+0x38>
 1ee:	90 91 74 00 	lds	r25, 0x0074
 1f2:	91 11       	cpse	r25, r1
 1f4:	1d c0       	rjmp	.+58     	; 0x230 <__vector_13+0x5c>
 1f6:	e0 91 74 00 	lds	r30, 0x0074
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ef 58       	subi	r30, 0x8F	; 143
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	90 ef       	ldi	r25, 0xF0	; 240
 202:	90 83       	st	Z, r25
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	90 93 70 00 	sts	0x0070, r25
 20a:	1d c0       	rjmp	.+58     	; 0x246 <__vector_13+0x72>
 20c:	81 3f       	cpi	r24, 0xF1	; 241
 20e:	81 f4       	brne	.+32     	; 0x230 <__vector_13+0x5c>
 210:	90 91 74 00 	lds	r25, 0x0074
 214:	91 11       	cpse	r25, r1
 216:	0c c0       	rjmp	.+24     	; 0x230 <__vector_13+0x5c>
 218:	e0 91 74 00 	lds	r30, 0x0074
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	ef 58       	subi	r30, 0x8F	; 143
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	90 81       	ld	r25, Z
 224:	90 91 74 00 	lds	r25, 0x0074
 228:	9f 5f       	subi	r25, 0xFF	; 255
 22a:	90 93 74 00 	sts	0x0074, r25
 22e:	0b c0       	rjmp	.+22     	; 0x246 <__vector_13+0x72>
 230:	e0 91 74 00 	lds	r30, 0x0074
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ef 58       	subi	r30, 0x8F	; 143
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	80 83       	st	Z, r24
	ErreurAngle = ((Angle_D >= Pi + Angle) ? Angle_D - 2*Pi : ((Angle_D <= -Pi + Angle) ? Angle_D + 2*Pi : Angle_D))-Angle;
 23c:	90 91 74 00 	lds	r25, 0x0074
 240:	9f 5f       	subi	r25, 0xFF	; 255
 242:	90 93 74 00 	sts	0x0074, r25
 246:	90 91 74 00 	lds	r25, 0x0074
 24a:	93 30       	cpi	r25, 0x03	; 3
 24c:	11 f4       	brne	.+4      	; 0x252 <__vector_13+0x7e>
 24e:	10 92 74 00 	sts	0x0074, r1
 252:	90 91 60 00 	lds	r25, 0x0060
 256:	91 30       	cpi	r25, 0x01	; 1
 258:	09 f4       	brne	.+2      	; 0x25c <__vector_13+0x88>
 25a:	8c b9       	out	0x0c, r24	; 12
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <initUART>:
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 60 00 	sts	0x0060, r24
 274:	10 92 75 00 	sts	0x0075, r1
 278:	10 92 74 00 	sts	0x0074, r1
 27c:	86 e8       	ldi	r24, 0x86	; 134
 27e:	80 bd       	out	0x20, r24	; 32
 280:	88 ed       	ldi	r24, 0xD8	; 216
 282:	8a b9       	out	0x0a, r24	; 10
 284:	10 bc       	out	0x20, r1	; 32
 286:	87 e6       	ldi	r24, 0x67	; 103
 288:	89 b9       	out	0x09, r24	; 9
 28a:	2e e0       	ldi	r18, 0x0E	; 14
 28c:	88 e1       	ldi	r24, 0x18	; 24
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	a8 95       	wdr
 296:	81 bd       	out	0x21, r24	; 33
 298:	0f be       	out	0x3f, r0	; 63
 29a:	21 bd       	out	0x21, r18	; 33
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
