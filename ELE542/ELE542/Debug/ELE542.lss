
ELE542.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001984  00001a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a9  0080006a  0080006a  00001a22  2**0
                  ALLOC
  3 .stab         000023dc  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008be  00000000  00000000  00003e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000046be  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000180  00000000  00000000  000046ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000177a  00000000  00000000  0000486d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000778  00000000  00000000  00005fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009c6  00000000  00000000  0000675f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003d8  00000000  00000000  00007128  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000522  00000000  00000000  00007500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b0d  00000000  00000000  00007a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  0000852f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__vector_15>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 31       	cpi	r26, 0x13	; 19
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 85 03 	call	0x70a	; 0x70a <main>
      8a:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_16>:
volatile uint16_t	LEFT_Vmax_neg = 1023;
volatile uint16_t	LEFT_Vzero_neg = 0;

/********************** Interrupt ADC conversion done *********************/	
ISR (ADC_vect)
{
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	2f 93       	push	r18
      9e:	3f 93       	push	r19
      a0:	8f 93       	push	r24
      a2:	9f 93       	push	r25
      a4:	af 93       	push	r26
      a6:	bf 93       	push	r27
	//Cette routine lit la valeur sur le canal ADC actif et fait la moyenne
	//à l'aide du compteur de lecture	
	if(ADMUX)
      a8:	87 b1       	in	r24, 0x07	; 7
      aa:	88 23       	and	r24, r24
      ac:	51 f1       	breq	.+84     	; 0x102 <__vector_16+0x70>
	{
		RIGHT_counter++;
      ae:	80 91 76 00 	lds	r24, 0x0076
      b2:	90 91 77 00 	lds	r25, 0x0077
      b6:	a0 91 78 00 	lds	r26, 0x0078
      ba:	b0 91 79 00 	lds	r27, 0x0079
      be:	01 96       	adiw	r24, 0x01	; 1
      c0:	a1 1d       	adc	r26, r1
      c2:	b1 1d       	adc	r27, r1
      c4:	80 93 76 00 	sts	0x0076, r24
      c8:	90 93 77 00 	sts	0x0077, r25
      cc:	a0 93 78 00 	sts	0x0078, r26
      d0:	b0 93 79 00 	sts	0x0079, r27
		RIGHT_ADCvalue += ADC;
      d4:	24 b1       	in	r18, 0x04	; 4
      d6:	35 b1       	in	r19, 0x05	; 5
      d8:	80 91 72 00 	lds	r24, 0x0072
      dc:	90 91 73 00 	lds	r25, 0x0073
      e0:	a0 91 74 00 	lds	r26, 0x0074
      e4:	b0 91 75 00 	lds	r27, 0x0075
      e8:	82 0f       	add	r24, r18
      ea:	93 1f       	adc	r25, r19
      ec:	a1 1d       	adc	r26, r1
      ee:	b1 1d       	adc	r27, r1
      f0:	80 93 72 00 	sts	0x0072, r24
      f4:	90 93 73 00 	sts	0x0073, r25
      f8:	a0 93 74 00 	sts	0x0074, r26
      fc:	b0 93 75 00 	sts	0x0075, r27
     100:	29 c0       	rjmp	.+82     	; 0x154 <__vector_16+0xc2>
	}
	else
	{
		LEFT_counter++;
     102:	80 91 7e 00 	lds	r24, 0x007E
     106:	90 91 7f 00 	lds	r25, 0x007F
     10a:	a0 91 80 00 	lds	r26, 0x0080
     10e:	b0 91 81 00 	lds	r27, 0x0081
     112:	01 96       	adiw	r24, 0x01	; 1
     114:	a1 1d       	adc	r26, r1
     116:	b1 1d       	adc	r27, r1
     118:	80 93 7e 00 	sts	0x007E, r24
     11c:	90 93 7f 00 	sts	0x007F, r25
     120:	a0 93 80 00 	sts	0x0080, r26
     124:	b0 93 81 00 	sts	0x0081, r27
		LEFT_ADCvalue += ADC;
     128:	24 b1       	in	r18, 0x04	; 4
     12a:	35 b1       	in	r19, 0x05	; 5
     12c:	80 91 7a 00 	lds	r24, 0x007A
     130:	90 91 7b 00 	lds	r25, 0x007B
     134:	a0 91 7c 00 	lds	r26, 0x007C
     138:	b0 91 7d 00 	lds	r27, 0x007D
     13c:	82 0f       	add	r24, r18
     13e:	93 1f       	adc	r25, r19
     140:	a1 1d       	adc	r26, r1
     142:	b1 1d       	adc	r27, r1
     144:	80 93 7a 00 	sts	0x007A, r24
     148:	90 93 7b 00 	sts	0x007B, r25
     14c:	a0 93 7c 00 	sts	0x007C, r26
     150:	b0 93 7d 00 	sts	0x007D, r27
	}
	//Alterner le canal actif entre le canal 0 et le canal 1
	ADMUX ^= 1;
     154:	97 b1       	in	r25, 0x07	; 7
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	89 27       	eor	r24, r25
     15a:	87 b9       	out	0x07, r24	; 7
}
     15c:	bf 91       	pop	r27
     15e:	af 91       	pop	r26
     160:	9f 91       	pop	r25
     162:	8f 91       	pop	r24
     164:	3f 91       	pop	r19
     166:	2f 91       	pop	r18
     168:	0f 90       	pop	r0
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	0f 90       	pop	r0
     16e:	1f 90       	pop	r1
     170:	18 95       	reti

00000172 <DIR_bit_ON>:

void DIR_bit_ON (uint8_t direction)	{PORTD |= (1<<direction);}
     172:	42 b3       	in	r20, 0x12	; 18
     174:	21 e0       	ldi	r18, 0x01	; 1
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	b9 01       	movw	r22, r18
     17a:	02 c0       	rjmp	.+4      	; 0x180 <DIR_bit_ON+0xe>
     17c:	66 0f       	add	r22, r22
     17e:	77 1f       	adc	r23, r23
     180:	8a 95       	dec	r24
     182:	e2 f7       	brpl	.-8      	; 0x17c <DIR_bit_ON+0xa>
     184:	cb 01       	movw	r24, r22
     186:	84 2b       	or	r24, r20
     188:	82 bb       	out	0x12, r24	; 18
     18a:	08 95       	ret

0000018c <DIR_bit_OFF>:
void DIR_bit_OFF(uint8_t direction)	{PORTD &= ~(1<<direction);}
     18c:	92 b3       	in	r25, 0x12	; 18
     18e:	21 e0       	ldi	r18, 0x01	; 1
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	02 c0       	rjmp	.+4      	; 0x198 <DIR_bit_OFF+0xc>
     194:	22 0f       	add	r18, r18
     196:	33 1f       	adc	r19, r19
     198:	8a 95       	dec	r24
     19a:	e2 f7       	brpl	.-8      	; 0x194 <DIR_bit_OFF+0x8>
     19c:	20 95       	com	r18
     19e:	92 23       	and	r25, r18
     1a0:	92 bb       	out	0x12, r25	; 18
     1a2:	08 95       	ret

000001a4 <initADC>:
	  - Référence de voltage = AREF
	  - Mode de traitement des acquisitions = Interruption
    */	
	// [Datasheet p.212]
    // AREF-interne et Vref desactivée, Résultat ajusté à droite. 
	ADMUX = (0<<REFS1)|(0<<REFS0)|(0<<ADLAR)|(0<<MUX4)|
     1a4:	17 b8       	out	0x07, r1	; 7
			(0<<MUX3) |(0<<MUX2) |(0<<MUX1) |(0<<MUX0);

    // Active l'ADC, démarre la conversion, active les interruptions 
	// et prescaler de 128 pour f=125kHz
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADPS2)
     1a6:	8f ee       	ldi	r24, 0xEF	; 239
     1a8:	86 b9       	out	0x06, r24	; 6
			|(1<<ADPS1)|(1<<ADPS0)|(1<<ADATE);

	// Mode d'opération free-run [voir datasheet p.216]
	SFIOR |= (0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
     1aa:	80 b7       	in	r24, 0x30	; 48
     1ac:	80 bf       	out	0x30, r24	; 48
	
	//Configure port A with pin A4 as an output, others are inputs
	DDRA = (1<<PA4);
     1ae:	80 e1       	ldi	r24, 0x10	; 16
     1b0:	8a bb       	out	0x1a, r24	; 26
	
	//Configure PORT D  as outputs except for PD1 et PD0 
	DDRD |= (1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7); 
     1b2:	81 b3       	in	r24, 0x11	; 17
     1b4:	8c 6f       	ori	r24, 0xFC	; 252
     1b6:	81 bb       	out	0x11, r24	; 17
     1b8:	08 95       	ret

000001ba <resetADC>:
/**************************************************************************/	

/******************************* Reset ADC ********************************/	
void resetADC(void)
{
	cli();
     1ba:	f8 94       	cli
	LEFT_counter   = 0;
     1bc:	10 92 7e 00 	sts	0x007E, r1
     1c0:	10 92 7f 00 	sts	0x007F, r1
     1c4:	10 92 80 00 	sts	0x0080, r1
     1c8:	10 92 81 00 	sts	0x0081, r1
	LEFT_ADCvalue  = 0;
     1cc:	10 92 7a 00 	sts	0x007A, r1
     1d0:	10 92 7b 00 	sts	0x007B, r1
     1d4:	10 92 7c 00 	sts	0x007C, r1
     1d8:	10 92 7d 00 	sts	0x007D, r1
	RIGHT_counter  = 0;
     1dc:	10 92 76 00 	sts	0x0076, r1
     1e0:	10 92 77 00 	sts	0x0077, r1
     1e4:	10 92 78 00 	sts	0x0078, r1
     1e8:	10 92 79 00 	sts	0x0079, r1
	RIGHT_ADCvalue = 0;
     1ec:	10 92 72 00 	sts	0x0072, r1
     1f0:	10 92 73 00 	sts	0x0073, r1
     1f4:	10 92 74 00 	sts	0x0074, r1
     1f8:	10 92 75 00 	sts	0x0075, r1
	sei();
     1fc:	78 94       	sei
     1fe:	08 95       	ret

00000200 <motor_calibration>:
	// 0   0    1    0   Vzero+
	// 0   1    0    0   Vzero-
	// 1   1    0    0   Vmax-
	
	//Les PWM doivent être maintenus à 0 pendant la calibration.
	PWM_GAUCHE = 0;
     200:	19 bc       	out	0x29, r1	; 41
     202:	18 bc       	out	0x28, r1	; 40
	PWM_DROIT  = 0;
     204:	1b bc       	out	0x2b, r1	; 43
     206:	1a bc       	out	0x2a, r1	; 42
	
	//Mesure de Vmax + pour chaque moteur
	CAL_bit_ON();
     208:	dc 9a       	sbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	2f ef       	ldi	r18, 0xFF	; 255
     20c:	80 e7       	ldi	r24, 0x70	; 112
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	21 50       	subi	r18, 0x01	; 1
     212:	80 40       	sbci	r24, 0x00	; 0
     214:	90 40       	sbci	r25, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <motor_calibration+0x10>
     218:	00 c0       	rjmp	.+0      	; 0x21a <motor_calibration+0x1a>
     21a:	00 00       	nop
	_delay_ms(50);
	DIR_bit_OFF(RIGHT_DIR2); DIR_bit_OFF(LEFT_DIR2); 
     21c:	87 e0       	ldi	r24, 0x07	; 7
     21e:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     222:	83 e0       	ldi	r24, 0x03	; 3
     224:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
	DIR_bit_ON (RIGHT_DIR1); DIR_bit_ON (LEFT_DIR1);
     228:	86 e0       	ldi	r24, 0x06	; 6
     22a:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     22e:	82 e0       	ldi	r24, 0x02	; 2
     230:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
	
	resetADC();
     234:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
	
	while(RIGHT_counter < CALIB_SAMPLE_NB && LEFT_counter < CALIB_SAMPLE_NB);
     238:	80 91 76 00 	lds	r24, 0x0076
     23c:	90 91 77 00 	lds	r25, 0x0077
     240:	a0 91 78 00 	lds	r26, 0x0078
     244:	b0 91 79 00 	lds	r27, 0x0079
     248:	c2 97       	sbiw	r24, 0x32	; 50
     24a:	a1 05       	cpc	r26, r1
     24c:	b1 05       	cpc	r27, r1
     24e:	60 f4       	brcc	.+24     	; 0x268 <motor_calibration+0x68>
     250:	80 91 7e 00 	lds	r24, 0x007E
     254:	90 91 7f 00 	lds	r25, 0x007F
     258:	a0 91 80 00 	lds	r26, 0x0080
     25c:	b0 91 81 00 	lds	r27, 0x0081
     260:	c2 97       	sbiw	r24, 0x32	; 50
     262:	a1 05       	cpc	r26, r1
     264:	b1 05       	cpc	r27, r1
     266:	40 f3       	brcs	.-48     	; 0x238 <motor_calibration+0x38>
	
	RIGHT_Vmax_pos = RIGHT_ADCvalue / RIGHT_counter;
     268:	60 91 72 00 	lds	r22, 0x0072
     26c:	70 91 73 00 	lds	r23, 0x0073
     270:	80 91 74 00 	lds	r24, 0x0074
     274:	90 91 75 00 	lds	r25, 0x0075
     278:	20 91 76 00 	lds	r18, 0x0076
     27c:	30 91 77 00 	lds	r19, 0x0077
     280:	40 91 78 00 	lds	r20, 0x0078
     284:	50 91 79 00 	lds	r21, 0x0079
     288:	0e 94 9e 0c 	call	0x193c	; 0x193c <__udivmodsi4>
     28c:	30 93 67 00 	sts	0x0067, r19
     290:	20 93 66 00 	sts	0x0066, r18
	LEFT_Vmax_pos  = LEFT_ADCvalue / LEFT_counter;
     294:	60 91 7a 00 	lds	r22, 0x007A
     298:	70 91 7b 00 	lds	r23, 0x007B
     29c:	80 91 7c 00 	lds	r24, 0x007C
     2a0:	90 91 7d 00 	lds	r25, 0x007D
     2a4:	20 91 7e 00 	lds	r18, 0x007E
     2a8:	30 91 7f 00 	lds	r19, 0x007F
     2ac:	40 91 80 00 	lds	r20, 0x0080
     2b0:	50 91 81 00 	lds	r21, 0x0081
     2b4:	0e 94 9e 0c 	call	0x193c	; 0x193c <__udivmodsi4>
     2b8:	30 93 63 00 	sts	0x0063, r19
     2bc:	20 93 62 00 	sts	0x0062, r18
	
	//Mesure de Vzero + pour chaque moteur
	CAL_bit_OFF();	
     2c0:	dc 98       	cbi	0x1b, 4	; 27
     2c2:	2f ef       	ldi	r18, 0xFF	; 255
     2c4:	80 e7       	ldi	r24, 0x70	; 112
     2c6:	92 e0       	ldi	r25, 0x02	; 2
     2c8:	21 50       	subi	r18, 0x01	; 1
     2ca:	80 40       	sbci	r24, 0x00	; 0
     2cc:	90 40       	sbci	r25, 0x00	; 0
     2ce:	e1 f7       	brne	.-8      	; 0x2c8 <motor_calibration+0xc8>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <motor_calibration+0xd2>
     2d2:	00 00       	nop
	_delay_ms(50);
	resetADC();
     2d4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
	
	while(RIGHT_counter < CALIB_SAMPLE_NB && LEFT_counter < CALIB_SAMPLE_NB);
     2d8:	80 91 76 00 	lds	r24, 0x0076
     2dc:	90 91 77 00 	lds	r25, 0x0077
     2e0:	a0 91 78 00 	lds	r26, 0x0078
     2e4:	b0 91 79 00 	lds	r27, 0x0079
     2e8:	c2 97       	sbiw	r24, 0x32	; 50
     2ea:	a1 05       	cpc	r26, r1
     2ec:	b1 05       	cpc	r27, r1
     2ee:	60 f4       	brcc	.+24     	; 0x308 <motor_calibration+0x108>
     2f0:	80 91 7e 00 	lds	r24, 0x007E
     2f4:	90 91 7f 00 	lds	r25, 0x007F
     2f8:	a0 91 80 00 	lds	r26, 0x0080
     2fc:	b0 91 81 00 	lds	r27, 0x0081
     300:	c2 97       	sbiw	r24, 0x32	; 50
     302:	a1 05       	cpc	r26, r1
     304:	b1 05       	cpc	r27, r1
     306:	40 f3       	brcs	.-48     	; 0x2d8 <motor_calibration+0xd8>
		
	RIGHT_Vzero_pos = RIGHT_ADCvalue / RIGHT_counter;
     308:	60 91 72 00 	lds	r22, 0x0072
     30c:	70 91 73 00 	lds	r23, 0x0073
     310:	80 91 74 00 	lds	r24, 0x0074
     314:	90 91 75 00 	lds	r25, 0x0075
     318:	20 91 76 00 	lds	r18, 0x0076
     31c:	30 91 77 00 	lds	r19, 0x0077
     320:	40 91 78 00 	lds	r20, 0x0078
     324:	50 91 79 00 	lds	r21, 0x0079
     328:	0e 94 9e 0c 	call	0x193c	; 0x193c <__udivmodsi4>
     32c:	30 93 71 00 	sts	0x0071, r19
     330:	20 93 70 00 	sts	0x0070, r18
	LEFT_Vzero_pos  = LEFT_ADCvalue / LEFT_counter;	
     334:	60 91 7a 00 	lds	r22, 0x007A
     338:	70 91 7b 00 	lds	r23, 0x007B
     33c:	80 91 7c 00 	lds	r24, 0x007C
     340:	90 91 7d 00 	lds	r25, 0x007D
     344:	20 91 7e 00 	lds	r18, 0x007E
     348:	30 91 7f 00 	lds	r19, 0x007F
     34c:	40 91 80 00 	lds	r20, 0x0080
     350:	50 91 81 00 	lds	r21, 0x0081
     354:	0e 94 9e 0c 	call	0x193c	; 0x193c <__udivmodsi4>
     358:	30 93 6d 00 	sts	0x006D, r19
     35c:	20 93 6c 00 	sts	0x006C, r18
	
	//Mesure de Vzero - pour chaque moteur
	
	DIR_bit_OFF(RIGHT_DIR1); DIR_bit_OFF(LEFT_DIR1);
     360:	86 e0       	ldi	r24, 0x06	; 6
     362:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
	DIR_bit_ON (RIGHT_DIR2); DIR_bit_ON (LEFT_DIR2);
     36c:	87 e0       	ldi	r24, 0x07	; 7
     36e:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     378:	2f ef       	ldi	r18, 0xFF	; 255
     37a:	80 e7       	ldi	r24, 0x70	; 112
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	21 50       	subi	r18, 0x01	; 1
     380:	80 40       	sbci	r24, 0x00	; 0
     382:	90 40       	sbci	r25, 0x00	; 0
     384:	e1 f7       	brne	.-8      	; 0x37e <motor_calibration+0x17e>
     386:	00 c0       	rjmp	.+0      	; 0x388 <motor_calibration+0x188>
     388:	00 00       	nop
	_delay_ms(50);
	resetADC();
     38a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
	
	while(RIGHT_counter < CALIB_SAMPLE_NB && LEFT_counter < CALIB_SAMPLE_NB);
     38e:	80 91 76 00 	lds	r24, 0x0076
     392:	90 91 77 00 	lds	r25, 0x0077
     396:	a0 91 78 00 	lds	r26, 0x0078
     39a:	b0 91 79 00 	lds	r27, 0x0079
     39e:	c2 97       	sbiw	r24, 0x32	; 50
     3a0:	a1 05       	cpc	r26, r1
     3a2:	b1 05       	cpc	r27, r1
     3a4:	60 f4       	brcc	.+24     	; 0x3be <motor_calibration+0x1be>
     3a6:	80 91 7e 00 	lds	r24, 0x007E
     3aa:	90 91 7f 00 	lds	r25, 0x007F
     3ae:	a0 91 80 00 	lds	r26, 0x0080
     3b2:	b0 91 81 00 	lds	r27, 0x0081
     3b6:	c2 97       	sbiw	r24, 0x32	; 50
     3b8:	a1 05       	cpc	r26, r1
     3ba:	b1 05       	cpc	r27, r1
     3bc:	40 f3       	brcs	.-48     	; 0x38e <motor_calibration+0x18e>
	
	RIGHT_Vzero_neg = RIGHT_ADCvalue / RIGHT_counter;	
     3be:	60 91 72 00 	lds	r22, 0x0072
     3c2:	70 91 73 00 	lds	r23, 0x0073
     3c6:	80 91 74 00 	lds	r24, 0x0074
     3ca:	90 91 75 00 	lds	r25, 0x0075
     3ce:	20 91 76 00 	lds	r18, 0x0076
     3d2:	30 91 77 00 	lds	r19, 0x0077
     3d6:	40 91 78 00 	lds	r20, 0x0078
     3da:	50 91 79 00 	lds	r21, 0x0079
     3de:	0e 94 9e 0c 	call	0x193c	; 0x193c <__udivmodsi4>
     3e2:	30 93 6f 00 	sts	0x006F, r19
     3e6:	20 93 6e 00 	sts	0x006E, r18
	LEFT_Vzero_neg  = LEFT_ADCvalue / LEFT_counter;	
     3ea:	60 91 7a 00 	lds	r22, 0x007A
     3ee:	70 91 7b 00 	lds	r23, 0x007B
     3f2:	80 91 7c 00 	lds	r24, 0x007C
     3f6:	90 91 7d 00 	lds	r25, 0x007D
     3fa:	20 91 7e 00 	lds	r18, 0x007E
     3fe:	30 91 7f 00 	lds	r19, 0x007F
     402:	40 91 80 00 	lds	r20, 0x0080
     406:	50 91 81 00 	lds	r21, 0x0081
     40a:	0e 94 9e 0c 	call	0x193c	; 0x193c <__udivmodsi4>
     40e:	30 93 6b 00 	sts	0x006B, r19
     412:	20 93 6a 00 	sts	0x006A, r18
	
	//Mesure de Vmax - pour chaque moteur
	CAL_bit_ON();
     416:	dc 9a       	sbi	0x1b, 4	; 27
     418:	2f ef       	ldi	r18, 0xFF	; 255
     41a:	80 e7       	ldi	r24, 0x70	; 112
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	21 50       	subi	r18, 0x01	; 1
     420:	80 40       	sbci	r24, 0x00	; 0
     422:	90 40       	sbci	r25, 0x00	; 0
     424:	e1 f7       	brne	.-8      	; 0x41e <motor_calibration+0x21e>
     426:	00 c0       	rjmp	.+0      	; 0x428 <motor_calibration+0x228>
     428:	00 00       	nop
	_delay_ms(50);
	resetADC();
     42a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
	
	while(RIGHT_counter < CALIB_SAMPLE_NB && LEFT_counter < CALIB_SAMPLE_NB);
     42e:	80 91 76 00 	lds	r24, 0x0076
     432:	90 91 77 00 	lds	r25, 0x0077
     436:	a0 91 78 00 	lds	r26, 0x0078
     43a:	b0 91 79 00 	lds	r27, 0x0079
     43e:	c2 97       	sbiw	r24, 0x32	; 50
     440:	a1 05       	cpc	r26, r1
     442:	b1 05       	cpc	r27, r1
     444:	60 f4       	brcc	.+24     	; 0x45e <motor_calibration+0x25e>
     446:	80 91 7e 00 	lds	r24, 0x007E
     44a:	90 91 7f 00 	lds	r25, 0x007F
     44e:	a0 91 80 00 	lds	r26, 0x0080
     452:	b0 91 81 00 	lds	r27, 0x0081
     456:	c2 97       	sbiw	r24, 0x32	; 50
     458:	a1 05       	cpc	r26, r1
     45a:	b1 05       	cpc	r27, r1
     45c:	40 f3       	brcs	.-48     	; 0x42e <motor_calibration+0x22e>
	
	RIGHT_Vmax_neg = RIGHT_ADCvalue / RIGHT_counter;
     45e:	60 91 72 00 	lds	r22, 0x0072
     462:	70 91 73 00 	lds	r23, 0x0073
     466:	80 91 74 00 	lds	r24, 0x0074
     46a:	90 91 75 00 	lds	r25, 0x0075
     46e:	20 91 76 00 	lds	r18, 0x0076
     472:	30 91 77 00 	lds	r19, 0x0077
     476:	40 91 78 00 	lds	r20, 0x0078
     47a:	50 91 79 00 	lds	r21, 0x0079
     47e:	0e 94 9e 0c 	call	0x193c	; 0x193c <__udivmodsi4>
     482:	30 93 65 00 	sts	0x0065, r19
     486:	20 93 64 00 	sts	0x0064, r18
	LEFT_Vmax_neg  = LEFT_ADCvalue / LEFT_counter;
     48a:	60 91 7a 00 	lds	r22, 0x007A
     48e:	70 91 7b 00 	lds	r23, 0x007B
     492:	80 91 7c 00 	lds	r24, 0x007C
     496:	90 91 7d 00 	lds	r25, 0x007D
     49a:	20 91 7e 00 	lds	r18, 0x007E
     49e:	30 91 7f 00 	lds	r19, 0x007F
     4a2:	40 91 80 00 	lds	r20, 0x0080
     4a6:	50 91 81 00 	lds	r21, 0x0081
     4aa:	0e 94 9e 0c 	call	0x193c	; 0x193c <__udivmodsi4>
     4ae:	30 93 61 00 	sts	0x0061, r19
     4b2:	20 93 60 00 	sts	0x0060, r18
	
	resetADC();
     4b6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
	CAL_bit_OFF();
     4ba:	dc 98       	cbi	0x1b, 4	; 27
	DIR_bit_OFF(RIGHT_DIR2); DIR_bit_OFF(LEFT_DIR2);
     4bc:	87 e0       	ldi	r24, 0x07	; 7
     4be:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     4c8:	08 95       	ret

000004ca <getADCmeanValues>:
}
/**************************************************************************/	

/*************************** get ADC mean value ***************************/	
void getADCmeanValues(float* right, float* left)
{
     4ca:	4f 92       	push	r4
     4cc:	5f 92       	push	r5
     4ce:	6f 92       	push	r6
     4d0:	7f 92       	push	r7
     4d2:	8f 92       	push	r8
     4d4:	9f 92       	push	r9
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	8c 01       	movw	r16, r24
     4ec:	eb 01       	movw	r28, r22
	cli();
     4ee:	f8 94       	cli

	if(DIR_D) /* Vitesse négative droite */
     4f0:	cb 9b       	sbis	0x19, 3	; 25
     4f2:	3f c0       	rjmp	.+126    	; 0x572 <getADCmeanValues+0xa8>
	{
		*right = -1.0*((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     4f4:	60 91 72 00 	lds	r22, 0x0072
     4f8:	70 91 73 00 	lds	r23, 0x0073
     4fc:	80 91 74 00 	lds	r24, 0x0074
     500:	90 91 75 00 	lds	r25, 0x0075
     504:	40 90 76 00 	lds	r4, 0x0076
     508:	50 90 77 00 	lds	r5, 0x0077
     50c:	60 90 78 00 	lds	r6, 0x0078
     510:	70 90 79 00 	lds	r7, 0x0079
					  /(float)(RIGHT_Vmax_neg-RIGHT_Vzero_neg);
     514:	c0 90 64 00 	lds	r12, 0x0064
     518:	d0 90 65 00 	lds	r13, 0x0065
     51c:	e0 90 6e 00 	lds	r14, 0x006E
     520:	f0 90 6f 00 	lds	r15, 0x006F
{
	cli();

	if(DIR_D) /* Vitesse négative droite */
	{
		*right = -1.0*((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     524:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     528:	4b 01       	movw	r8, r22
     52a:	5c 01       	movw	r10, r24
     52c:	c3 01       	movw	r24, r6
     52e:	b2 01       	movw	r22, r4
     530:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     534:	9b 01       	movw	r18, r22
     536:	ac 01       	movw	r20, r24
     538:	c5 01       	movw	r24, r10
     53a:	b4 01       	movw	r22, r8
     53c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divsf3>
     540:	4b 01       	movw	r8, r22
     542:	5c 01       	movw	r10, r24
     544:	b7 fa       	bst	r11, 7
     546:	b0 94       	com	r11
     548:	b7 f8       	bld	r11, 7
     54a:	b0 94       	com	r11
					  /(float)(RIGHT_Vmax_neg-RIGHT_Vzero_neg);
     54c:	b6 01       	movw	r22, r12
     54e:	6e 19       	sub	r22, r14
     550:	7f 09       	sbc	r23, r15
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     55a:	9b 01       	movw	r18, r22
     55c:	ac 01       	movw	r20, r24
     55e:	c5 01       	movw	r24, r10
     560:	b4 01       	movw	r22, r8
     562:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divsf3>
{
	cli();

	if(DIR_D) /* Vitesse négative droite */
	{
		*right = -1.0*((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     566:	f8 01       	movw	r30, r16
     568:	60 83       	st	Z, r22
     56a:	71 83       	std	Z+1, r23	; 0x01
     56c:	82 83       	std	Z+2, r24	; 0x02
     56e:	93 83       	std	Z+3, r25	; 0x03
     570:	3a c0       	rjmp	.+116    	; 0x5e6 <getADCmeanValues+0x11c>
					  /(float)(RIGHT_Vmax_neg-RIGHT_Vzero_neg);

	}
	else      /* Vitesse positive droite */
	{
		*right = ((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     572:	60 91 72 00 	lds	r22, 0x0072
     576:	70 91 73 00 	lds	r23, 0x0073
     57a:	80 91 74 00 	lds	r24, 0x0074
     57e:	90 91 75 00 	lds	r25, 0x0075
     582:	40 90 76 00 	lds	r4, 0x0076
     586:	50 90 77 00 	lds	r5, 0x0077
     58a:	60 90 78 00 	lds	r6, 0x0078
     58e:	70 90 79 00 	lds	r7, 0x0079
				 /(float)(RIGHT_Vmax_pos-RIGHT_Vzero_pos);
     592:	c0 90 66 00 	lds	r12, 0x0066
     596:	d0 90 67 00 	lds	r13, 0x0067
     59a:	e0 90 70 00 	lds	r14, 0x0070
     59e:	f0 90 71 00 	lds	r15, 0x0071
					  /(float)(RIGHT_Vmax_neg-RIGHT_Vzero_neg);

	}
	else      /* Vitesse positive droite */
	{
		*right = ((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     5a2:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     5a6:	4b 01       	movw	r8, r22
     5a8:	5c 01       	movw	r10, r24
     5aa:	c3 01       	movw	r24, r6
     5ac:	b2 01       	movw	r22, r4
     5ae:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     5b2:	9b 01       	movw	r18, r22
     5b4:	ac 01       	movw	r20, r24
     5b6:	c5 01       	movw	r24, r10
     5b8:	b4 01       	movw	r22, r8
     5ba:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divsf3>
     5be:	2b 01       	movw	r4, r22
     5c0:	3c 01       	movw	r6, r24
				 /(float)(RIGHT_Vmax_pos-RIGHT_Vzero_pos);
     5c2:	b6 01       	movw	r22, r12
     5c4:	6e 19       	sub	r22, r14
     5c6:	7f 09       	sbc	r23, r15
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	c3 01       	movw	r24, r6
     5d6:	b2 01       	movw	r22, r4
     5d8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divsf3>
					  /(float)(RIGHT_Vmax_neg-RIGHT_Vzero_neg);

	}
	else      /* Vitesse positive droite */
	{
		*right = ((float)RIGHT_ADCvalue/(float)RIGHT_counter)
     5dc:	f8 01       	movw	r30, r16
     5de:	60 83       	st	Z, r22
     5e0:	71 83       	std	Z+1, r23	; 0x01
     5e2:	82 83       	std	Z+2, r24	; 0x02
     5e4:	93 83       	std	Z+3, r25	; 0x03
				 /(float)(RIGHT_Vmax_pos-RIGHT_Vzero_pos);
	}
	
	if(DIR_G) /* Vitesse négative gauche */
     5e6:	ca 9b       	sbis	0x19, 2	; 25
     5e8:	3e c0       	rjmp	.+124    	; 0x666 <getADCmeanValues+0x19c>
	{
		*left = -1.0*((float)LEFT_ADCvalue/(float)LEFT_counter)
     5ea:	60 91 7a 00 	lds	r22, 0x007A
     5ee:	70 91 7b 00 	lds	r23, 0x007B
     5f2:	80 91 7c 00 	lds	r24, 0x007C
     5f6:	90 91 7d 00 	lds	r25, 0x007D
     5fa:	c0 90 7e 00 	lds	r12, 0x007E
     5fe:	d0 90 7f 00 	lds	r13, 0x007F
     602:	e0 90 80 00 	lds	r14, 0x0080
     606:	f0 90 81 00 	lds	r15, 0x0081
				     /(float)(LEFT_Vmax_neg-LEFT_Vzero_neg);
     60a:	a0 90 60 00 	lds	r10, 0x0060
     60e:	b0 90 61 00 	lds	r11, 0x0061
     612:	00 91 6a 00 	lds	r16, 0x006A
     616:	10 91 6b 00 	lds	r17, 0x006B
				 /(float)(RIGHT_Vmax_pos-RIGHT_Vzero_pos);
	}
	
	if(DIR_G) /* Vitesse négative gauche */
	{
		*left = -1.0*((float)LEFT_ADCvalue/(float)LEFT_counter)
     61a:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     61e:	2b 01       	movw	r4, r22
     620:	3c 01       	movw	r6, r24
     622:	c7 01       	movw	r24, r14
     624:	b6 01       	movw	r22, r12
     626:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
     62e:	c3 01       	movw	r24, r6
     630:	b2 01       	movw	r22, r4
     632:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divsf3>
     636:	6b 01       	movw	r12, r22
     638:	7c 01       	movw	r14, r24
     63a:	f7 fa       	bst	r15, 7
     63c:	f0 94       	com	r15
     63e:	f7 f8       	bld	r15, 7
     640:	f0 94       	com	r15
				     /(float)(LEFT_Vmax_neg-LEFT_Vzero_neg);
     642:	b5 01       	movw	r22, r10
     644:	60 1b       	sub	r22, r16
     646:	71 0b       	sbc	r23, r17
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     650:	9b 01       	movw	r18, r22
     652:	ac 01       	movw	r20, r24
     654:	c7 01       	movw	r24, r14
     656:	b6 01       	movw	r22, r12
     658:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divsf3>
				 /(float)(RIGHT_Vmax_pos-RIGHT_Vzero_pos);
	}
	
	if(DIR_G) /* Vitesse négative gauche */
	{
		*left = -1.0*((float)LEFT_ADCvalue/(float)LEFT_counter)
     65c:	68 83       	st	Y, r22
     65e:	79 83       	std	Y+1, r23	; 0x01
     660:	8a 83       	std	Y+2, r24	; 0x02
     662:	9b 83       	std	Y+3, r25	; 0x03
     664:	39 c0       	rjmp	.+114    	; 0x6d8 <getADCmeanValues+0x20e>
				     /(float)(LEFT_Vmax_neg-LEFT_Vzero_neg);
	}

	else      /* Vitesse positive gauche */
	{
		*left = ((float)LEFT_ADCvalue/(float)LEFT_counter)
     666:	60 91 7a 00 	lds	r22, 0x007A
     66a:	70 91 7b 00 	lds	r23, 0x007B
     66e:	80 91 7c 00 	lds	r24, 0x007C
     672:	90 91 7d 00 	lds	r25, 0x007D
     676:	c0 90 7e 00 	lds	r12, 0x007E
     67a:	d0 90 7f 00 	lds	r13, 0x007F
     67e:	e0 90 80 00 	lds	r14, 0x0080
     682:	f0 90 81 00 	lds	r15, 0x0081
				/(float)(LEFT_Vmax_pos-LEFT_Vzero_pos);
     686:	a0 90 62 00 	lds	r10, 0x0062
     68a:	b0 90 63 00 	lds	r11, 0x0063
     68e:	00 91 6c 00 	lds	r16, 0x006C
     692:	10 91 6d 00 	lds	r17, 0x006D
				     /(float)(LEFT_Vmax_neg-LEFT_Vzero_neg);
	}

	else      /* Vitesse positive gauche */
	{
		*left = ((float)LEFT_ADCvalue/(float)LEFT_counter)
     696:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     69a:	2b 01       	movw	r4, r22
     69c:	3c 01       	movw	r6, r24
     69e:	c7 01       	movw	r24, r14
     6a0:	b6 01       	movw	r22, r12
     6a2:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     6a6:	9b 01       	movw	r18, r22
     6a8:	ac 01       	movw	r20, r24
     6aa:	c3 01       	movw	r24, r6
     6ac:	b2 01       	movw	r22, r4
     6ae:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divsf3>
     6b2:	6b 01       	movw	r12, r22
     6b4:	7c 01       	movw	r14, r24
				/(float)(LEFT_Vmax_pos-LEFT_Vzero_pos);
     6b6:	b5 01       	movw	r22, r10
     6b8:	60 1b       	sub	r22, r16
     6ba:	71 0b       	sbc	r23, r17
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
     6c8:	c7 01       	movw	r24, r14
     6ca:	b6 01       	movw	r22, r12
     6cc:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divsf3>
				     /(float)(LEFT_Vmax_neg-LEFT_Vzero_neg);
	}

	else      /* Vitesse positive gauche */
	{
		*left = ((float)LEFT_ADCvalue/(float)LEFT_counter)
     6d0:	68 83       	st	Y, r22
     6d2:	79 83       	std	Y+1, r23	; 0x01
     6d4:	8a 83       	std	Y+2, r24	; 0x02
     6d6:	9b 83       	std	Y+3, r25	; 0x03
				/(float)(LEFT_Vmax_pos-LEFT_Vzero_pos);
	}

	sei();	
     6d8:	78 94       	sei
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	7f 90       	pop	r7
     6f4:	6f 90       	pop	r6
     6f6:	5f 90       	pop	r5
     6f8:	4f 90       	pop	r4
     6fa:	08 95       	ret

000006fc <initLED>:
	
/****************************** INIT LED *********************************/
void initLED(void)
{
    /* PORT B as output */
    DDRB = 0xFF;
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	87 bb       	out	0x17, r24	; 23
    /* All LED off */
    PORTB = 0xFF;
     700:	88 bb       	out	0x18, r24	; 24
     702:	08 95       	ret

00000704 <updateLED>:
/*************************************************************************/

/****************************** UPDATE LED *******************************/
void updateLED(uint8_t status)
{
	PORTB = ~status;
     704:	80 95       	com	r24
     706:	88 bb       	out	0x18, r24	; 24
     708:	08 95       	ret

0000070a <main>:

uint8_t debugStr[30] = {0};
	
/**************************** POINT D'ENTRÉE  ****************************/
int main(void)
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	6c 97       	sbiw	r28, 0x1c	; 28
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
	float angle = 0.0;
	
	uint8_t LEDstatus = (1<<ATTENTE);
	
	uint8_t PINGside = 0;
	uint8_t sonarLSB = 0;
     71e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t sonarMSB = 0;
     720:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t sonarG = 0;
	uint16_t sonarD = 0;
	
	
	float RIGHT_ADCmean = 0.0;
     722:	1b 82       	std	Y+3, r1	; 0x03
     724:	1c 82       	std	Y+4, r1	; 0x04
     726:	1d 82       	std	Y+5, r1	; 0x05
     728:	1e 82       	std	Y+6, r1	; 0x06
	float LEFT_ADCmean = 0.0;
     72a:	1f 82       	std	Y+7, r1	; 0x07
     72c:	18 86       	std	Y+8, r1	; 0x08
     72e:	19 86       	std	Y+9, r1	; 0x09
     730:	1a 86       	std	Y+10, r1	; 0x0a
	
	float RIGHT_pwm = 0.0;
     732:	1b 86       	std	Y+11, r1	; 0x0b
     734:	1c 86       	std	Y+12, r1	; 0x0c
     736:	1d 86       	std	Y+13, r1	; 0x0d
     738:	1e 86       	std	Y+14, r1	; 0x0e
	float LEFT_pwm = 0.0;
     73a:	1f 86       	std	Y+15, r1	; 0x0f
     73c:	18 8a       	std	Y+16, r1	; 0x10
     73e:	19 8a       	std	Y+17, r1	; 0x11
     740:	1a 8a       	std	Y+18, r1	; 0x12
	
	uint8_t robotState = 0;	
	
/**************************** INITIALISATION ****************************/
    initUART();
     742:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <initUART>
	initTIMER();
     746:	0e 94 ce 08 	call	0x119c	; 0x119c <initTIMER>
	initLED();
     74a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <initLED>
	initTWI();
     74e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <initTWI>
	initADC();
     752:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <initADC>
	
/************************ CONFIGURATION DES SONARS  **********************/
	//Gain = 10
	twiWrite(SONAR_G_W,0x01,0x0A);
     756:	4a e0       	ldi	r20, 0x0A	; 10
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	80 ee       	ldi	r24, 0xE0	; 224
     75c:	0e 94 c4 09 	call	0x1388	; 0x1388 <twiWrite>
	twiWrite(SONAR_D_W,0x01,0x0A);
     760:	4a e0       	ldi	r20, 0x0A	; 10
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	82 ee       	ldi	r24, 0xE2	; 226
     766:	0e 94 c4 09 	call	0x1388	; 0x1388 <twiWrite>
	
	//Portée = 200cm
	twiWrite(SONAR_G_W,0x02,0x2D);
     76a:	4d e2       	ldi	r20, 0x2D	; 45
     76c:	62 e0       	ldi	r22, 0x02	; 2
     76e:	80 ee       	ldi	r24, 0xE0	; 224
     770:	0e 94 c4 09 	call	0x1388	; 0x1388 <twiWrite>
	twiWrite(SONAR_D_W,0x02,0x2D);
     774:	4d e2       	ldi	r20, 0x2D	; 45
     776:	62 e0       	ldi	r22, 0x02	; 2
     778:	82 ee       	ldi	r24, 0xE2	; 226
     77a:	0e 94 c4 09 	call	0x1388	; 0x1388 <twiWrite>
	
/************************ CALIBRATION DES MOTEURS ************************/
	motor_calibration();
     77e:	0e 94 00 01 	call	0x200	; 0x200 <motor_calibration>
	float LEFT_ADCmean = 0.0;
	
	float RIGHT_pwm = 0.0;
	float LEFT_pwm = 0.0;
	
	uint8_t robotState = 0;	
     782:	10 e0       	ldi	r17, 0x00	; 0
	float speed = 0.0;
	float angle = 0.0;
	
	uint8_t LEDstatus = (1<<ATTENTE);
	
	uint8_t PINGside = 0;
     784:	41 2c       	mov	r4, r1
	uint16_t rawSpeed = 0;
	uint16_t rawAngle = 0;
	float speed = 0.0;
	float angle = 0.0;
	
	uint8_t LEDstatus = (1<<ATTENTE);
     786:	68 94       	set
     788:	77 24       	eor	r7, r7
     78a:	76 f8       	bld	r7, 6
{
/*************************** VARIABLES LOCALES ***************************/	
	uint16_t rawSpeed = 0;
	uint16_t rawAngle = 0;
	float speed = 0.0;
	float angle = 0.0;
     78c:	19 8e       	std	Y+25, r1	; 0x19
     78e:	1a 8e       	std	Y+26, r1	; 0x1a
     790:	1b 8e       	std	Y+27, r1	; 0x1b
     792:	1c 8e       	std	Y+28, r1	; 0x1c
int main(void)
{
/*************************** VARIABLES LOCALES ***************************/	
	uint16_t rawSpeed = 0;
	uint16_t rawAngle = 0;
	float speed = 0.0;
     794:	1d 8a       	std	Y+21, r1	; 0x15
     796:	1e 8a       	std	Y+22, r1	; 0x16
     798:	1f 8a       	std	Y+23, r1	; 0x17
     79a:	18 8e       	std	Y+24, r1	; 0x18

					flag_50ms_TICK = 0;
				}
							
/************************* CONTRÔLE DES MOTEURS **************************/		
				if(flag_PWMcycle)
     79c:	55 24       	eor	r5, r5
     79e:	53 94       	inc	r5
					{
					//sprintf(debugStr, "%d %d", (uint16_t)(RIGHT_pwm*100), (uint16_t)(LEFT_pwm*100));
					//debug_send(debugStr, 30);
					}
					//Calculer nouvelles valeurs de PWM
					CalculPWM( speed, angle, LEFT_ADCmean, RIGHT_ADCmean,  
     7a0:	ce 01       	movw	r24, r28
     7a2:	0b 96       	adiw	r24, 0x0b	; 11
     7a4:	9c 8b       	std	Y+20, r25	; 0x14
     7a6:	8b 8b       	std	Y+19, r24	; 0x13
			{	
/************************ RÉCEPTION DE COMMANDES *************************/
				if(flag_CMD_in)
				{
					//Convertir la trame en commande pour les moteurs
					if(commande[0] == 0xF0)
     7a8:	0f 2e       	mov	r0, r31
     7aa:	f8 ea       	ldi	r31, 0xA8	; 168
     7ac:	2f 2e       	mov	r2, r31
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	3f 2e       	mov	r3, r31
     7b2:	f0 2d       	mov	r31, r0
		if (robotState == 0 && !SW6)
		{
			robotState = 1;
			LEDstatus = 0;
			LEDstatus |= (1<<ACTIF);
			LEDstatus &= ~(1<<ATTENTE);
     7b4:	68 94       	set
     7b6:	66 24       	eor	r6, r6
     7b8:	67 f8       	bld	r6, 7
/************************** ROUTINE PRINCIPALE ***************************/
    while(1)
	{ 
		
/*********** INTERRUPTEURS DE MISE EN MARCHE ET ARRET D'URGENCE **********/
		if (robotState == 0 && !SW6)
     7ba:	11 11       	cpse	r17, r1
     7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <main+0xbe>
     7be:	ce 99       	sbic	0x19, 6	; 25
     7c0:	79 c1       	rjmp	.+754    	; 0xab4 <__stack+0x255>
			robotState = 1;
			LEDstatus = 0;
			LEDstatus |= (1<<ACTIF);
			LEDstatus &= ~(1<<ATTENTE);
			
			sei();	/* enable interrupts */
     7c2:	78 94       	sei
		if (robotState == 0 && !SW6)
		{
			robotState = 1;
			LEDstatus = 0;
			LEDstatus |= (1<<ACTIF);
			LEDstatus &= ~(1<<ATTENTE);
     7c4:	76 2c       	mov	r7, r6
     7c6:	03 c0       	rjmp	.+6      	; 0x7ce <main+0xc4>
			
			sei();	/* enable interrupts */
		}
		
		if (robotState == 1)
     7c8:	11 30       	cpi	r17, 0x01	; 1
     7ca:	09 f0       	breq	.+2      	; 0x7ce <main+0xc4>
     7cc:	73 c1       	rjmp	.+742    	; 0xab4 <__stack+0x255>
		{
			if (!SW7)
     7ce:	cf 99       	sbic	0x19, 7	; 25
     7d0:	0a c0       	rjmp	.+20     	; 0x7e6 <main+0xdc>
				robotState = 0;
				
				LEDstatus = (1<<ATTENTE);
				LEDstatus &= ~(1<<ACTIF);

				PWM_GAUCHE = 0;
     7d2:	19 bc       	out	0x29, r1	; 41
     7d4:	18 bc       	out	0x28, r1	; 40
				PWM_DROIT = 0;
     7d6:	1b bc       	out	0x2b, r1	; 43
     7d8:	1a bc       	out	0x2a, r1	; 42
				
				cli();   /* disable interrupts */
     7da:	f8 94       	cli
		
		if (robotState == 1)
		{
			if (!SW7)
			{
				robotState = 0;
     7dc:	10 e0       	ldi	r17, 0x00	; 0
				
				LEDstatus = (1<<ATTENTE);
				LEDstatus &= ~(1<<ACTIF);
     7de:	68 94       	set
     7e0:	77 24       	eor	r7, r7
     7e2:	76 f8       	bld	r7, 6
     7e4:	67 c1       	rjmp	.+718    	; 0xab4 <__stack+0x255>
			
/************************* FONCTIONNEMENT NORMAL *************************/
			else
			{	
/************************ RÉCEPTION DE COMMANDES *************************/
				if(flag_CMD_in)
     7e6:	80 91 ac 00 	lds	r24, 0x00AC
     7ea:	88 23       	and	r24, r24
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <main+0xe6>
     7ee:	54 c0       	rjmp	.+168    	; 0x898 <__stack+0x39>
				{
					//Convertir la trame en commande pour les moteurs
					if(commande[0] == 0xF0)
     7f0:	f1 01       	movw	r30, r2
     7f2:	80 81       	ld	r24, Z
     7f4:	80 3f       	cpi	r24, 0xF0	; 240
     7f6:	89 f4       	brne	.+34     	; 0x81a <main+0x110>
					{
						//Arret obligatoire
						PWM_DROIT = 0;
     7f8:	1b bc       	out	0x2b, r1	; 43
     7fa:	1a bc       	out	0x2a, r1	; 42
						PWM_GAUCHE = 0;
     7fc:	19 bc       	out	0x29, r1	; 41
     7fe:	18 bc       	out	0x28, r1	; 40
						
						DIR_bit_ON(RIGHT_DIR1); DIR_bit_ON(RIGHT_DIR2);
     800:	86 e0       	ldi	r24, 0x06	; 6
     802:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     806:	87 e0       	ldi	r24, 0x07	; 7
     808:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
						DIR_bit_ON(LEFT_DIR1);  DIR_bit_ON(LEFT_DIR2);
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     818:	3b c0       	rjmp	.+118    	; 0x890 <__stack+0x31>
					}
			
					else if (commande[0] == 0xF1)
     81a:	f1 01       	movw	r30, r2
     81c:	80 81       	ld	r24, Z
     81e:	81 3f       	cpi	r24, 0xF1	; 241
     820:	b9 f5       	brne	.+110    	; 0x890 <__stack+0x31>
					{
						//Commande normale
						rawSpeed = commande[1];
     822:	e9 ea       	ldi	r30, 0xA9	; 169
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	60 81       	ld	r22, Z
						rawAngle = commande[2];
     828:	ea ea       	ldi	r30, 0xAA	; 170
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	10 81       	ld	r17, Z

						speed = ((float)rawSpeed-100.0)/100.0;
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	48 ec       	ldi	r20, 0xC8	; 200
     83e:	52 e4       	ldi	r21, 0x42	; 66
     840:	0e 94 88 0a 	call	0x1510	; 0x1510 <__subsf3>
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	48 ec       	ldi	r20, 0xC8	; 200
     84a:	52 e4       	ldi	r21, 0x42	; 66
     84c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divsf3>
     850:	6d 8b       	std	Y+21, r22	; 0x15
     852:	7e 8b       	std	Y+22, r23	; 0x16
     854:	8f 8b       	std	Y+23, r24	; 0x17
     856:	98 8f       	std	Y+24, r25	; 0x18
			
					else if (commande[0] == 0xF1)
					{
						//Commande normale
						rawSpeed = commande[1];
						rawAngle = commande[2];
     858:	61 2f       	mov	r22, r17
     85a:	70 e0       	ldi	r23, 0x00	; 0

						speed = ((float)rawSpeed-100.0)/100.0;
						angle = ((float)(rawAngle*2))*2.0*Pi/360.0;
     85c:	66 0f       	add	r22, r22
     85e:	77 1f       	adc	r23, r23
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 85 0b 	call	0x170a	; 0x170a <__floatunsisf>
     868:	9b 01       	movw	r18, r22
     86a:	ac 01       	movw	r20, r24
     86c:	0e 94 89 0a 	call	0x1512	; 0x1512 <__addsf3>
     870:	2b ed       	ldi	r18, 0xDB	; 219
     872:	3f e0       	ldi	r19, 0x0F	; 15
     874:	49 e4       	ldi	r20, 0x49	; 73
     876:	50 e4       	ldi	r21, 0x40	; 64
     878:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	44 eb       	ldi	r20, 0xB4	; 180
     882:	53 e4       	ldi	r21, 0x43	; 67
     884:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divsf3>
     888:	69 8f       	std	Y+25, r22	; 0x19
     88a:	7a 8f       	std	Y+26, r23	; 0x1a
     88c:	8b 8f       	std	Y+27, r24	; 0x1b
     88e:	9c 8f       	std	Y+28, r25	; 0x1c
					}
					LEDstatus |= (1<<COMMANDE_RECUE);
     890:	f2 e0       	ldi	r31, 0x02	; 2
     892:	7f 2a       	or	r7, r31
					flag_CMD_in = 0;
     894:	10 92 ac 00 	sts	0x00AC, r1
				}
				
/******************************** SONARS *********************************/		
				if(flag_50ms_TICK)
     898:	80 91 a3 00 	lds	r24, 0x00A3
     89c:	88 23       	and	r24, r24
     89e:	d1 f1       	breq	.+116    	; 0x914 <__stack+0xb5>
				{
					//Demarrer PING sur un sonar
					//Recuperer mesure sur l'autre sonar
					//Alterner entre sonar gauche et droit
			
					if(PINGside == 1)
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	48 12       	cpse	r4, r24
     8a4:	1b c0       	rjmp	.+54     	; 0x8dc <__stack+0x7d>
					{
						//PING
						twiWrite(SONAR_G_W, 0x00, 0x51);
     8a6:	41 e5       	ldi	r20, 0x51	; 81
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	80 ee       	ldi	r24, 0xE0	; 224
     8ac:	0e 94 c4 09 	call	0x1388	; 0x1388 <twiWrite>
						
						LEDstatus |= (1<<PING_SONAR_G);
						LEDstatus &= ~(1<<PING_SONAR_D);
						//MESURE
						twiRead (SONAR_D_R, 0x02, &sonarMSB);
     8b0:	ae 01       	movw	r20, r28
     8b2:	4e 5f       	subi	r20, 0xFE	; 254
     8b4:	5f 4f       	sbci	r21, 0xFF	; 255
     8b6:	62 e0       	ldi	r22, 0x02	; 2
     8b8:	83 ee       	ldi	r24, 0xE3	; 227
     8ba:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <twiRead>
						twiRead (SONAR_D_R, 0x03, &sonarLSB);
     8be:	ae 01       	movw	r20, r28
     8c0:	4f 5f       	subi	r20, 0xFF	; 255
     8c2:	5f 4f       	sbci	r21, 0xFF	; 255
     8c4:	63 e0       	ldi	r22, 0x03	; 3
     8c6:	83 ee       	ldi	r24, 0xE3	; 227
     8c8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <twiRead>
					
						sonarD = (sonarMSB<<8) & (sonarLSB & 0x00FF);
						
						//LED
						if (sonarD) {LEDstatus |= (1<<OBS_SONAR_D);}
						else        {LEDstatus &= ~(1<<OBS_SONAR_D);}
     8cc:	87 2d       	mov	r24, r7
     8ce:	83 7f       	andi	r24, 0xF3	; 243
     8d0:	68 94       	set
     8d2:	77 24       	eor	r7, r7
     8d4:	75 f8       	bld	r7, 5
     8d6:	78 2a       	or	r7, r24
						
						//ALTERNER
						PINGside = 0;
     8d8:	41 2c       	mov	r4, r1
     8da:	1a c0       	rjmp	.+52     	; 0x910 <__stack+0xb1>
					}
			
					else
					{
						//PING
						twiWrite(SONAR_D_W,0x00,0x51);
     8dc:	41 e5       	ldi	r20, 0x51	; 81
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	82 ee       	ldi	r24, 0xE2	; 226
     8e2:	0e 94 c4 09 	call	0x1388	; 0x1388 <twiWrite>
						
						LEDstatus |= (1<<PING_SONAR_D);
						LEDstatus &= ~(1<<PING_SONAR_G);
						//MESURE
						twiRead (SONAR_G_R, 0x02, &sonarMSB);
     8e6:	ae 01       	movw	r20, r28
     8e8:	4e 5f       	subi	r20, 0xFE	; 254
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	62 e0       	ldi	r22, 0x02	; 2
     8ee:	81 ee       	ldi	r24, 0xE1	; 225
     8f0:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <twiRead>
						twiRead (SONAR_G_R, 0x03, &sonarLSB);
     8f4:	ae 01       	movw	r20, r28
     8f6:	4f 5f       	subi	r20, 0xFF	; 255
     8f8:	5f 4f       	sbci	r21, 0xFF	; 255
     8fa:	63 e0       	ldi	r22, 0x03	; 3
     8fc:	81 ee       	ldi	r24, 0xE1	; 225
     8fe:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <twiRead>
						
						sonarG = (sonarMSB<<8) & (sonarLSB & 0x00FF);
						
						//LED				
						if (sonarG) {LEDstatus |= (1<<OBS_SONAR_G);}
						else		{LEDstatus &= ~(1<<OBS_SONAR_G);}
     902:	87 2d       	mov	r24, r7
     904:	8f 7c       	andi	r24, 0xCF	; 207
     906:	68 94       	set
     908:	77 24       	eor	r7, r7
     90a:	73 f8       	bld	r7, 3
     90c:	78 2a       	or	r7, r24
						
						//ALTERNER
						PINGside = 1;
     90e:	45 2c       	mov	r4, r5
					}

					flag_50ms_TICK = 0;
     910:	10 92 a3 00 	sts	0x00A3, r1
				}
							
/************************* CONTRÔLE DES MOTEURS **************************/		
				if(flag_PWMcycle)
     914:	80 91 a4 00 	lds	r24, 0x00A4
     918:	88 23       	and	r24, r24
     91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0xbf>
     91c:	ca c0       	rjmp	.+404    	; 0xab2 <__stack+0x253>
				{				
					//Convertir valeur de l'ADC en valeur de vitesse
					getADCmeanValues(&RIGHT_ADCmean, &LEFT_ADCmean);
     91e:	be 01       	movw	r22, r28
     920:	69 5f       	subi	r22, 0xF9	; 249
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	ce 01       	movw	r24, r28
     926:	03 96       	adiw	r24, 0x03	; 3
     928:	0e 94 65 02 	call	0x4ca	; 0x4ca <getADCmeanValues>
					resetADC();
     92c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <resetADC>
					{
					//sprintf(debugStr, "%d %d", (uint16_t)(RIGHT_pwm*100), (uint16_t)(LEFT_pwm*100));
					//debug_send(debugStr, 30);
					}
					//Calculer nouvelles valeurs de PWM
					CalculPWM( speed, angle, LEFT_ADCmean, RIGHT_ADCmean,  
     930:	ab 80       	ldd	r10, Y+3	; 0x03
     932:	bc 80       	ldd	r11, Y+4	; 0x04
     934:	cd 80       	ldd	r12, Y+5	; 0x05
     936:	de 80       	ldd	r13, Y+6	; 0x06
     938:	ef 80       	ldd	r14, Y+7	; 0x07
     93a:	f8 84       	ldd	r15, Y+8	; 0x08
     93c:	09 85       	ldd	r16, Y+9	; 0x09
     93e:	1a 85       	ldd	r17, Y+10	; 0x0a
     940:	9c 89       	ldd	r25, Y+20	; 0x14
     942:	9f 93       	push	r25
     944:	eb 89       	ldd	r30, Y+19	; 0x13
     946:	ef 93       	push	r30
     948:	0f 2e       	mov	r0, r31
     94a:	ff e0       	ldi	r31, 0x0F	; 15
     94c:	8f 2e       	mov	r8, r31
     94e:	91 2c       	mov	r9, r1
     950:	f0 2d       	mov	r31, r0
     952:	8c 0e       	add	r8, r28
     954:	9d 1e       	adc	r9, r29
     956:	79 8d       	ldd	r23, Y+25	; 0x19
     958:	6a 8d       	ldd	r22, Y+26	; 0x1a
     95a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     95c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     95e:	27 2f       	mov	r18, r23
     960:	36 2f       	mov	r19, r22
     962:	49 2f       	mov	r20, r25
     964:	58 2f       	mov	r21, r24
     966:	bd 89       	ldd	r27, Y+21	; 0x15
     968:	ae 89       	ldd	r26, Y+22	; 0x16
     96a:	ff 89       	ldd	r31, Y+23	; 0x17
     96c:	e8 8d       	ldd	r30, Y+24	; 0x18
     96e:	6b 2f       	mov	r22, r27
     970:	7a 2f       	mov	r23, r26
     972:	8f 2f       	mov	r24, r31
     974:	9e 2f       	mov	r25, r30
     976:	0e 94 60 05 	call	0xac0	; 0xac0 <CalculPWM>
							   &LEFT_pwm, &RIGHT_pwm);

					//Mettre a jour les PWM et bits de direction
					
					/* PWM GAUCHE */
					if(LEFT_pwm < 0)		/* MARCHE ARRIÈRE */
     97a:	cf 84       	ldd	r12, Y+15	; 0x0f
     97c:	d8 88       	ldd	r13, Y+16	; 0x10
     97e:	e9 88       	ldd	r14, Y+17	; 0x11
     980:	fa 88       	ldd	r15, Y+18	; 0x12
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	a9 01       	movw	r20, r18
     98c:	c7 01       	movw	r24, r14
     98e:	b6 01       	movw	r22, r12
     990:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     994:	88 23       	and	r24, r24
     996:	c4 f4       	brge	.+48     	; 0x9c8 <__stack+0x169>
					{
						DIR_bit_OFF(LEFT_DIR1); DIR_bit_ON(LEFT_DIR2);
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     99e:	83 e0       	ldi	r24, 0x03	; 3
     9a0:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
						PWM_GAUCHE = (uint16_t)(-1.0*LEFT_pwm*(float)PWM_TOP);
     9a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     9a6:	98 89       	ldd	r25, Y+16	; 0x10
     9a8:	a9 89       	ldd	r26, Y+17	; 0x11
     9aa:	ba 89       	ldd	r27, Y+18	; 0x12
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	90 58       	subi	r25, 0x80	; 128
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e2       	ldi	r19, 0x20	; 32
     9b6:	4c e9       	ldi	r20, 0x9C	; 156
     9b8:	54 e4       	ldi	r21, 0x44	; 68
     9ba:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     9be:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__fixunssfsi>
     9c2:	79 bd       	out	0x29, r23	; 41
     9c4:	68 bd       	out	0x28, r22	; 40
     9c6:	26 c0       	rjmp	.+76     	; 0xa14 <__stack+0x1b5>
					}

					else if(LEFT_pwm > 0)	/*  MARCHE AVANT */
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	a9 01       	movw	r20, r18
     9ce:	c7 01       	movw	r24, r14
     9d0:	b6 01       	movw	r22, r12
     9d2:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
     9d6:	18 16       	cp	r1, r24
     9d8:	ac f4       	brge	.+42     	; 0xa04 <__stack+0x1a5>
					{
						DIR_bit_ON(LEFT_DIR1); DIR_bit_OFF(LEFT_DIR2);
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
						PWM_GAUCHE = (uint16_t)(LEFT_pwm *(float)PWM_TOP); 
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e2       	ldi	r19, 0x20	; 32
     9ea:	4c e9       	ldi	r20, 0x9C	; 156
     9ec:	54 e4       	ldi	r21, 0x44	; 68
     9ee:	6f 85       	ldd	r22, Y+15	; 0x0f
     9f0:	78 89       	ldd	r23, Y+16	; 0x10
     9f2:	89 89       	ldd	r24, Y+17	; 0x11
     9f4:	9a 89       	ldd	r25, Y+18	; 0x12
     9f6:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     9fa:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__fixunssfsi>
     9fe:	79 bd       	out	0x29, r23	; 41
     a00:	68 bd       	out	0x28, r22	; 40
     a02:	08 c0       	rjmp	.+16     	; 0xa14 <__stack+0x1b5>
					}

					else					/*    NEUTRE     */
					{
						DIR_bit_OFF(LEFT_DIR1); DIR_bit_OFF(LEFT_DIR2);
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
						PWM_GAUCHE = 0;
     a10:	19 bc       	out	0x29, r1	; 41
     a12:	18 bc       	out	0x28, r1	; 40
					}
					
					/*PWM DROIT*/
					if(RIGHT_pwm < 0)		/* MARCHE ARRIÈRE */
     a14:	cb 84       	ldd	r12, Y+11	; 0x0b
     a16:	dc 84       	ldd	r13, Y+12	; 0x0c
     a18:	ed 84       	ldd	r14, Y+13	; 0x0d
     a1a:	fe 84       	ldd	r15, Y+14	; 0x0e
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	a9 01       	movw	r20, r18
     a22:	c7 01       	movw	r24, r14
     a24:	b6 01       	movw	r22, r12
     a26:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     a2a:	88 23       	and	r24, r24
     a2c:	c4 f4       	brge	.+48     	; 0xa5e <__stack+0x1ff>
					{
						DIR_bit_OFF(RIGHT_DIR1); DIR_bit_ON(RIGHT_DIR2); 
     a2e:	86 e0       	ldi	r24, 0x06	; 6
     a30:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     a34:	87 e0       	ldi	r24, 0x07	; 7
     a36:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
						PWM_DROIT = (uint16_t)(-1.0*RIGHT_pwm*(float)PWM_TOP); 
     a3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a3c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a3e:	ad 85       	ldd	r26, Y+13	; 0x0d
     a40:	be 85       	ldd	r27, Y+14	; 0x0e
     a42:	bc 01       	movw	r22, r24
     a44:	cd 01       	movw	r24, r26
     a46:	90 58       	subi	r25, 0x80	; 128
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e2       	ldi	r19, 0x20	; 32
     a4c:	4c e9       	ldi	r20, 0x9C	; 156
     a4e:	54 e4       	ldi	r21, 0x44	; 68
     a50:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     a54:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__fixunssfsi>
     a58:	7b bd       	out	0x2b, r23	; 43
     a5a:	6a bd       	out	0x2a, r22	; 42
     a5c:	26 c0       	rjmp	.+76     	; 0xaaa <__stack+0x24b>
					}

					else if(RIGHT_pwm > 0)  /*  MARCHE AVANT */
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	a9 01       	movw	r20, r18
     a64:	c7 01       	movw	r24, r14
     a66:	b6 01       	movw	r22, r12
     a68:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
     a6c:	18 16       	cp	r1, r24
     a6e:	ac f4       	brge	.+42     	; 0xa9a <__stack+0x23b>
					{
						DIR_bit_ON(RIGHT_DIR1); DIR_bit_OFF(RIGHT_DIR2);
     a70:	86 e0       	ldi	r24, 0x06	; 6
     a72:	0e 94 b9 00 	call	0x172	; 0x172 <DIR_bit_ON>
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
						PWM_DROIT = (uint16_t)(RIGHT_pwm * (float)PWM_TOP);  
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e2       	ldi	r19, 0x20	; 32
     a80:	4c e9       	ldi	r20, 0x9C	; 156
     a82:	54 e4       	ldi	r21, 0x44	; 68
     a84:	6b 85       	ldd	r22, Y+11	; 0x0b
     a86:	7c 85       	ldd	r23, Y+12	; 0x0c
     a88:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     a8c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     a90:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__fixunssfsi>
     a94:	7b bd       	out	0x2b, r23	; 43
     a96:	6a bd       	out	0x2a, r22	; 42
     a98:	08 c0       	rjmp	.+16     	; 0xaaa <__stack+0x24b>
					}

					else					/*    NEUTRE     */
					{
						DIR_bit_OFF(RIGHT_DIR1); DIR_bit_OFF(RIGHT_DIR2);
     a9a:	86 e0       	ldi	r24, 0x06	; 6
     a9c:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
     aa0:	87 e0       	ldi	r24, 0x07	; 7
     aa2:	0e 94 c6 00 	call	0x18c	; 0x18c <DIR_bit_OFF>
						PWM_DROIT = 0;
     aa6:	1b bc       	out	0x2b, r1	; 43
     aa8:	1a bc       	out	0x2a, r1	; 42
					}

					flag_PWMcycle = 0;
     aaa:	10 92 a4 00 	sts	0x00A4, r1
     aae:	15 2d       	mov	r17, r5
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <__stack+0x255>

					flag_50ms_TICK = 0;
				}
							
/************************* CONTRÔLE DES MOTEURS **************************/		
				if(flag_PWMcycle)
     ab2:	15 2d       	mov	r17, r5
				}
			}
		}

/************************** AFFICHAGE DU STATUT **************************/
		updateLED(LEDstatus);
     ab4:	87 2d       	mov	r24, r7
     ab6:	0e 94 82 03 	call	0x704	; 0x704 <updateLED>
		LEDstatus &= ~(1<<COMMANDE_RECUE); /* Reset la LED de CMD_IN */
     aba:	fd ef       	ldi	r31, 0xFD	; 253
     abc:	7f 22       	and	r7, r31
	}            
     abe:	7d ce       	rjmp	.-774    	; 0x7ba <main+0xb0>

00000ac0 <CalculPWM>:
#include "moteur.h"


void CalculPWM(float Vitesse_D, float Angle_D, float Vg, float Vd, float *Duty_G, float *Duty_D)
     ac0:	2f 92       	push	r2
     ac2:	3f 92       	push	r3
     ac4:	4f 92       	push	r4
     ac6:	5f 92       	push	r5
     ac8:	6f 92       	push	r6
     aca:	7f 92       	push	r7
     acc:	8f 92       	push	r8
     ace:	9f 92       	push	r9
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	cf 92       	push	r12
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	2e 97       	sbiw	r28, 0x0e	; 14
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	6b 87       	std	Y+11, r22	; 0x0b
     af6:	7c 87       	std	Y+12, r23	; 0x0c
     af8:	8d 87       	std	Y+13, r24	; 0x0d
     afa:	9e 87       	std	Y+14, r25	; 0x0e
     afc:	32 2e       	mov	r3, r18
     afe:	23 2e       	mov	r2, r19
     b00:	49 83       	std	Y+1, r20	; 0x01
     b02:	5a 83       	std	Y+2, r21	; 0x02
     b04:	27 01       	movw	r4, r14
     b06:	38 01       	movw	r6, r16
     b08:	9a 86       	std	Y+10, r9	; 0x0a
     b0a:	89 86       	std	Y+9, r8	; 0x09
	static float Ut     = 0.0;
	static float Ua     = 0.0;
	static int 	 Signe_Ua = 0;
	static int 	 Signe_Ut = 0;


     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	40 e8       	ldi	r20, 0x80	; 128
     b12:	5f e3       	ldi	r21, 0x3F	; 63
     b14:	c8 01       	movw	r24, r16
     b16:	b7 01       	movw	r22, r14
     b18:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
     b1c:	18 16       	cp	r1, r24
     b1e:	9c f0       	brlt	.+38     	; 0xb46 <CalculPWM+0x86>
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	40 e8       	ldi	r20, 0x80	; 128
     b26:	5f eb       	ldi	r21, 0xBF	; 191
     b28:	c8 01       	movw	r24, r16
     b2a:	b7 01       	movw	r22, r14
     b2c:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     b30:	88 23       	and	r24, r24
     b32:	8c f4       	brge	.+34     	; 0xb56 <CalculPWM+0x96>
     b34:	0f 2e       	mov	r0, r31
     b36:	41 2c       	mov	r4, r1
     b38:	51 2c       	mov	r5, r1
     b3a:	f0 e8       	ldi	r31, 0x80	; 128
     b3c:	6f 2e       	mov	r6, r31
     b3e:	ff eb       	ldi	r31, 0xBF	; 191
     b40:	7f 2e       	mov	r7, r31
     b42:	f0 2d       	mov	r31, r0
     b44:	08 c0       	rjmp	.+16     	; 0xb56 <CalculPWM+0x96>
     b46:	0f 2e       	mov	r0, r31
     b48:	41 2c       	mov	r4, r1
     b4a:	51 2c       	mov	r5, r1
     b4c:	f0 e8       	ldi	r31, 0x80	; 128
     b4e:	6f 2e       	mov	r6, r31
     b50:	ff e3       	ldi	r31, 0x3F	; 63
     b52:	7f 2e       	mov	r7, r31
     b54:	f0 2d       	mov	r31, r0
	Vg = (Vg > 1.0) ? 1.0 : ((Vg < -1.0) ? -1.0 : Vg);  /* Regarde les limites (-1.0 à 1.0) */
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	40 e8       	ldi	r20, 0x80	; 128
     b5c:	5f e3       	ldi	r21, 0x3F	; 63
     b5e:	c6 01       	movw	r24, r12
     b60:	b5 01       	movw	r22, r10
     b62:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
     b66:	18 16       	cp	r1, r24
     b68:	9c f0       	brlt	.+38     	; 0xb90 <CalculPWM+0xd0>
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e8       	ldi	r20, 0x80	; 128
     b70:	5f eb       	ldi	r21, 0xBF	; 191
     b72:	c6 01       	movw	r24, r12
     b74:	b5 01       	movw	r22, r10
     b76:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     b7a:	88 23       	and	r24, r24
     b7c:	8c f4       	brge	.+34     	; 0xba0 <CalculPWM+0xe0>
     b7e:	0f 2e       	mov	r0, r31
     b80:	a1 2c       	mov	r10, r1
     b82:	b1 2c       	mov	r11, r1
     b84:	f0 e8       	ldi	r31, 0x80	; 128
     b86:	cf 2e       	mov	r12, r31
     b88:	ff eb       	ldi	r31, 0xBF	; 191
     b8a:	df 2e       	mov	r13, r31
     b8c:	f0 2d       	mov	r31, r0
     b8e:	08 c0       	rjmp	.+16     	; 0xba0 <CalculPWM+0xe0>
     b90:	0f 2e       	mov	r0, r31
     b92:	a1 2c       	mov	r10, r1
     b94:	b1 2c       	mov	r11, r1
     b96:	f0 e8       	ldi	r31, 0x80	; 128
     b98:	cf 2e       	mov	r12, r31
     b9a:	ff e3       	ldi	r31, 0x3F	; 63
     b9c:	df 2e       	mov	r13, r31
     b9e:	f0 2d       	mov	r31, r0
	Vd = (Vd > 1.0) ? 1.0 : ((Vd < -1.0) ? -1.0 : Vd);  /* Regarde les limites (-1.0 à 1.0) */
		
     ba0:	80 91 82 00 	lds	r24, 0x0082
     ba4:	90 91 83 00 	lds	r25, 0x0083
     ba8:	a0 91 84 00 	lds	r26, 0x0084
     bac:	b0 91 85 00 	lds	r27, 0x0085
     bb0:	8d 83       	std	Y+5, r24	; 0x05
     bb2:	9e 83       	std	Y+6, r25	; 0x06
     bb4:	af 83       	std	Y+7, r26	; 0x07
     bb6:	b8 87       	std	Y+8, r27	; 0x08
     bb8:	80 93 86 00 	sts	0x0086, r24
     bbc:	90 93 87 00 	sts	0x0087, r25
     bc0:	a0 93 88 00 	sts	0x0088, r26
     bc4:	b0 93 89 00 	sts	0x0089, r27
	Old_W = W;
     bc8:	a3 01       	movw	r20, r6
     bca:	92 01       	movw	r18, r4
     bcc:	c6 01       	movw	r24, r12
     bce:	b5 01       	movw	r22, r10
     bd0:	0e 94 88 0a 	call	0x1510	; 0x1510 <__subsf3>
     bd4:	2a e1       	ldi	r18, 0x1A	; 26
     bd6:	32 e6       	ldi	r19, 0x62	; 98
     bd8:	46 e8       	ldi	r20, 0x86	; 134
     bda:	50 e4       	ldi	r21, 0x40	; 64
     bdc:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     be0:	96 2e       	mov	r9, r22
     be2:	87 2e       	mov	r8, r23
     be4:	8b 83       	std	Y+3, r24	; 0x03
     be6:	9c 83       	std	Y+4, r25	; 0x04
     be8:	38 2f       	mov	r19, r24
     bea:	29 2f       	mov	r18, r25
     bec:	86 2f       	mov	r24, r22
     bee:	98 2d       	mov	r25, r8
     bf0:	a3 2f       	mov	r26, r19
     bf2:	b2 2f       	mov	r27, r18
     bf4:	80 93 82 00 	sts	0x0082, r24
     bf8:	90 93 83 00 	sts	0x0083, r25
     bfc:	a0 93 84 00 	sts	0x0084, r26
     c00:	b0 93 85 00 	sts	0x0085, r27
	W     = 0.5*(Vmax/RAYON)*(Vd-Vg);
     c04:	a6 01       	movw	r20, r12
     c06:	95 01       	movw	r18, r10
     c08:	c3 01       	movw	r24, r6
     c0a:	b2 01       	movw	r22, r4
     c0c:	0e 94 89 0a 	call	0x1512	; 0x1512 <__addsf3>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	5f e3       	ldi	r21, 0x3F	; 63
     c18:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     c1c:	76 2e       	mov	r7, r22
     c1e:	67 2e       	mov	r6, r23
     c20:	58 2e       	mov	r5, r24
     c22:	49 2e       	mov	r4, r25
     c24:	86 2f       	mov	r24, r22
     c26:	96 2d       	mov	r25, r6
     c28:	a5 2d       	mov	r26, r5
     c2a:	b4 2d       	mov	r27, r4
     c2c:	80 93 8a 00 	sts	0x008A, r24
     c30:	90 93 8b 00 	sts	0x008B, r25
     c34:	a0 93 8c 00 	sts	0x008C, r26
     c38:	b0 93 8d 00 	sts	0x008D, r27
	Vt    = 0.5*(Vd+Vg);

     c3c:	9b 81       	ldd	r25, Y+3	; 0x03
     c3e:	8c 81       	ldd	r24, Y+4	; 0x04
     c40:	29 2d       	mov	r18, r9
     c42:	38 2d       	mov	r19, r8
     c44:	49 2f       	mov	r20, r25
     c46:	58 2f       	mov	r21, r24
     c48:	6d 81       	ldd	r22, Y+5	; 0x05
     c4a:	7e 81       	ldd	r23, Y+6	; 0x06
     c4c:	8f 81       	ldd	r24, Y+7	; 0x07
     c4e:	98 85       	ldd	r25, Y+8	; 0x08
     c50:	0e 94 89 0a 	call	0x1512	; 0x1512 <__addsf3>
     c54:	2a e0       	ldi	r18, 0x0A	; 10
     c56:	37 ed       	ldi	r19, 0xD7	; 215
     c58:	43 e2       	ldi	r20, 0x23	; 35
     c5a:	5b e3       	ldi	r21, 0x3B	; 59
     c5c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     c60:	20 91 8e 00 	lds	r18, 0x008E
     c64:	30 91 8f 00 	lds	r19, 0x008F
     c68:	40 91 90 00 	lds	r20, 0x0090
     c6c:	50 91 91 00 	lds	r21, 0x0091
     c70:	0e 94 89 0a 	call	0x1512	; 0x1512 <__addsf3>
     c74:	a6 2e       	mov	r10, r22
     c76:	b7 2e       	mov	r11, r23
     c78:	c8 2e       	mov	r12, r24
     c7a:	d9 2e       	mov	r13, r25
     c7c:	e6 2e       	mov	r14, r22
     c7e:	f7 2e       	mov	r15, r23
     c80:	08 2f       	mov	r16, r24
     c82:	19 2f       	mov	r17, r25
	Angle = Angle + (0.5)*TS*(W+Old_W);
     c84:	2b ed       	ldi	r18, 0xDB	; 219
     c86:	3f e0       	ldi	r19, 0x0F	; 15
     c88:	49 ec       	ldi	r20, 0xC9	; 201
     c8a:	50 e4       	ldi	r21, 0x40	; 64
     c8c:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
     c90:	18 16       	cp	r1, r24
     c92:	7c f4       	brge	.+30     	; 0xcb2 <CalculPWM+0x1f2>
     c94:	2b ed       	ldi	r18, 0xDB	; 219
     c96:	3f e0       	ldi	r19, 0x0F	; 15
     c98:	49 ec       	ldi	r20, 0xC9	; 201
     c9a:	50 e4       	ldi	r21, 0x40	; 64
     c9c:	6a 2d       	mov	r22, r10
     c9e:	7b 2d       	mov	r23, r11
     ca0:	8c 2d       	mov	r24, r12
     ca2:	9d 2d       	mov	r25, r13
     ca4:	0e 94 88 0a 	call	0x1510	; 0x1510 <__subsf3>
     ca8:	e6 2e       	mov	r14, r22
     caa:	f7 2e       	mov	r15, r23
     cac:	08 2f       	mov	r16, r24
     cae:	19 2f       	mov	r17, r25
     cb0:	19 c0       	rjmp	.+50     	; 0xce4 <CalculPWM+0x224>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	a9 01       	movw	r20, r18
     cb8:	6a 2d       	mov	r22, r10
     cba:	7b 2d       	mov	r23, r11
     cbc:	8c 2d       	mov	r24, r12
     cbe:	9d 2d       	mov	r25, r13
     cc0:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     cc4:	88 23       	and	r24, r24
     cc6:	74 f4       	brge	.+28     	; 0xce4 <CalculPWM+0x224>
     cc8:	2b ed       	ldi	r18, 0xDB	; 219
     cca:	3f e0       	ldi	r19, 0x0F	; 15
     ccc:	49 ec       	ldi	r20, 0xC9	; 201
     cce:	50 e4       	ldi	r21, 0x40	; 64
     cd0:	6a 2d       	mov	r22, r10
     cd2:	7b 2d       	mov	r23, r11
     cd4:	8c 2d       	mov	r24, r12
     cd6:	9d 2d       	mov	r25, r13
     cd8:	0e 94 89 0a 	call	0x1512	; 0x1512 <__addsf3>
     cdc:	e6 2e       	mov	r14, r22
     cde:	f7 2e       	mov	r15, r23
     ce0:	08 2f       	mov	r16, r24
     ce2:	19 2f       	mov	r17, r25
     ce4:	8e 2d       	mov	r24, r14
     ce6:	9f 2d       	mov	r25, r15
     ce8:	a0 2f       	mov	r26, r16
     cea:	b1 2f       	mov	r27, r17
     cec:	80 93 8e 00 	sts	0x008E, r24
     cf0:	90 93 8f 00 	sts	0x008F, r25
     cf4:	a0 93 90 00 	sts	0x0090, r26
     cf8:	b0 93 91 00 	sts	0x0091, r27
	Angle = (Angle > 2.0*Pi) ? Angle - 2*Pi : ((Angle < 0.0) ? Angle + 2*Pi : Angle); /* Angle entre 0 et 2 pi */
     cfc:	2b ed       	ldi	r18, 0xDB	; 219
     cfe:	3f e0       	ldi	r19, 0x0F	; 15
     d00:	49 e4       	ldi	r20, 0x49	; 73
     d02:	50 e4       	ldi	r21, 0x40	; 64
     d04:	6e 2d       	mov	r22, r14
     d06:	7f 2d       	mov	r23, r15
     d08:	80 2f       	mov	r24, r16
     d0a:	91 2f       	mov	r25, r17
     d0c:	0e 94 89 0a 	call	0x1512	; 0x1512 <__addsf3>
     d10:	f9 81       	ldd	r31, Y+1	; 0x01
     d12:	ea 81       	ldd	r30, Y+2	; 0x02
     d14:	23 2d       	mov	r18, r3
     d16:	32 2d       	mov	r19, r2
     d18:	4f 2f       	mov	r20, r31
     d1a:	5e 2f       	mov	r21, r30
     d1c:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     d20:	18 16       	cp	r1, r24
     d22:	8c f0       	brlt	.+34     	; 0xd46 <CalculPWM+0x286>
     d24:	2b ed       	ldi	r18, 0xDB	; 219
     d26:	3f e0       	ldi	r19, 0x0F	; 15
     d28:	49 ec       	ldi	r20, 0xC9	; 201
     d2a:	50 e4       	ldi	r21, 0x40	; 64
     d2c:	f9 81       	ldd	r31, Y+1	; 0x01
     d2e:	ea 81       	ldd	r30, Y+2	; 0x02
     d30:	63 2d       	mov	r22, r3
     d32:	72 2d       	mov	r23, r2
     d34:	8f 2f       	mov	r24, r31
     d36:	9e 2f       	mov	r25, r30
     d38:	0e 94 88 0a 	call	0x1510	; 0x1510 <__subsf3>
     d3c:	36 2e       	mov	r3, r22
     d3e:	27 2e       	mov	r2, r23
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	9a 83       	std	Y+2, r25	; 0x02
     d44:	26 c0       	rjmp	.+76     	; 0xd92 <CalculPWM+0x2d2>
     d46:	2b ed       	ldi	r18, 0xDB	; 219
     d48:	3f e0       	ldi	r19, 0x0F	; 15
     d4a:	49 e4       	ldi	r20, 0x49	; 73
     d4c:	50 e4       	ldi	r21, 0x40	; 64
     d4e:	6e 2d       	mov	r22, r14
     d50:	7f 2d       	mov	r23, r15
     d52:	80 2f       	mov	r24, r16
     d54:	91 2f       	mov	r25, r17
     d56:	0e 94 88 0a 	call	0x1510	; 0x1510 <__subsf3>
     d5a:	9b 01       	movw	r18, r22
     d5c:	ac 01       	movw	r20, r24
     d5e:	f9 81       	ldd	r31, Y+1	; 0x01
     d60:	ea 81       	ldd	r30, Y+2	; 0x02
     d62:	63 2d       	mov	r22, r3
     d64:	72 2d       	mov	r23, r2
     d66:	8f 2f       	mov	r24, r31
     d68:	9e 2f       	mov	r25, r30
     d6a:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     d6e:	18 16       	cp	r1, r24
     d70:	84 f0       	brlt	.+32     	; 0xd92 <CalculPWM+0x2d2>
     d72:	2b ed       	ldi	r18, 0xDB	; 219
     d74:	3f e0       	ldi	r19, 0x0F	; 15
     d76:	49 ec       	ldi	r20, 0xC9	; 201
     d78:	50 e4       	ldi	r21, 0x40	; 64
     d7a:	f9 81       	ldd	r31, Y+1	; 0x01
     d7c:	ea 81       	ldd	r30, Y+2	; 0x02
     d7e:	63 2d       	mov	r22, r3
     d80:	72 2d       	mov	r23, r2
     d82:	8f 2f       	mov	r24, r31
     d84:	9e 2f       	mov	r25, r30
     d86:	0e 94 89 0a 	call	0x1512	; 0x1512 <__addsf3>
     d8a:	36 2e       	mov	r3, r22
     d8c:	27 2e       	mov	r2, r23
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	2e 2d       	mov	r18, r14
     d94:	3f 2d       	mov	r19, r15
     d96:	40 2f       	mov	r20, r16
     d98:	51 2f       	mov	r21, r17
     d9a:	f9 81       	ldd	r31, Y+1	; 0x01
     d9c:	ea 81       	ldd	r30, Y+2	; 0x02
     d9e:	63 2d       	mov	r22, r3
     da0:	72 2d       	mov	r23, r2
     da2:	8f 2f       	mov	r24, r31
     da4:	9e 2f       	mov	r25, r30
     da6:	0e 94 88 0a 	call	0x1510	; 0x1510 <__subsf3>
     daa:	e6 2e       	mov	r14, r22
     dac:	f7 2e       	mov	r15, r23
     dae:	08 2f       	mov	r16, r24
     db0:	19 2f       	mov	r17, r25
     db2:	86 2f       	mov	r24, r22
     db4:	9f 2d       	mov	r25, r15
     db6:	a0 2f       	mov	r26, r16
     db8:	b1 2f       	mov	r27, r17
     dba:	80 93 92 00 	sts	0x0092, r24
     dbe:	90 93 93 00 	sts	0x0093, r25
     dc2:	a0 93 94 00 	sts	0x0094, r26
     dc6:	b0 93 95 00 	sts	0x0095, r27
	ErreurAngle = ((Angle_D >= Pi + Angle) ? Angle_D - 2*Pi : ((Angle_D <= -Pi + Angle) ? Angle_D + 2*Pi : Angle_D))-Angle;

     dca:	28 ee       	ldi	r18, 0xE8	; 232
     dcc:	31 eb       	ldi	r19, 0xB1	; 177
     dce:	49 e7       	ldi	r20, 0x79	; 121
     dd0:	50 ec       	ldi	r21, 0xC0	; 192
     dd2:	67 2d       	mov	r22, r7
     dd4:	76 2d       	mov	r23, r6
     dd6:	85 2d       	mov	r24, r5
     dd8:	94 2d       	mov	r25, r4
     dda:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     dde:	2b 01       	movw	r4, r22
     de0:	3c 01       	movw	r6, r24
     de2:	24 ef       	ldi	r18, 0xF4	; 244
     de4:	38 ed       	ldi	r19, 0xD8	; 216
     de6:	4c e9       	ldi	r20, 0x9C	; 156
     de8:	50 e4       	ldi	r21, 0x40	; 64
     dea:	6b 85       	ldd	r22, Y+11	; 0x0b
     dec:	7c 85       	ldd	r23, Y+12	; 0x0c
     dee:	8d 85       	ldd	r24, Y+13	; 0x0d
     df0:	9e 85       	ldd	r25, Y+14	; 0x0e
     df2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     df6:	9b 01       	movw	r18, r22
     df8:	ac 01       	movw	r20, r24
     dfa:	c3 01       	movw	r24, r6
     dfc:	b2 01       	movw	r22, r4
     dfe:	0e 94 89 0a 	call	0x1512	; 0x1512 <__addsf3>
     e02:	69 83       	std	Y+1, r22	; 0x01
     e04:	7a 83       	std	Y+2, r23	; 0x02
     e06:	68 2e       	mov	r6, r24
     e08:	79 2e       	mov	r7, r25
     e0a:	a6 2e       	mov	r10, r22
     e0c:	b7 2e       	mov	r11, r23
     e0e:	c8 2e       	mov	r12, r24
     e10:	d9 2e       	mov	r13, r25
	Ut = -H11*Vt + H12*Vitesse_D;
     e12:	21 e2       	ldi	r18, 0x21	; 33
     e14:	37 ea       	ldi	r19, 0xA7	; 167
     e16:	44 e9       	ldi	r20, 0x94	; 148
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	6e 2d       	mov	r22, r14
     e1c:	7f 2d       	mov	r23, r15
     e1e:	80 2f       	mov	r24, r16
     e20:	91 2f       	mov	r25, r17
     e22:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     e26:	1b 01       	movw	r2, r22
     e28:	2c 01       	movw	r4, r24
     e2a:	28 e1       	ldi	r18, 0x18	; 24
     e2c:	37 ea       	ldi	r19, 0xA7	; 167
     e2e:	44 e1       	ldi	r20, 0x14	; 20
     e30:	5f e3       	ldi	r21, 0x3F	; 63
     e32:	fb 81       	ldd	r31, Y+3	; 0x03
     e34:	ec 81       	ldd	r30, Y+4	; 0x04
     e36:	69 2d       	mov	r22, r9
     e38:	78 2d       	mov	r23, r8
     e3a:	8f 2f       	mov	r24, r31
     e3c:	9e 2f       	mov	r25, r30
     e3e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     e42:	9b 01       	movw	r18, r22
     e44:	ac 01       	movw	r20, r24
     e46:	c2 01       	movw	r24, r4
     e48:	b1 01       	movw	r22, r2
     e4a:	0e 94 88 0a 	call	0x1510	; 0x1510 <__subsf3>
     e4e:	86 2e       	mov	r8, r22
     e50:	97 2e       	mov	r9, r23
     e52:	e8 2e       	mov	r14, r24
     e54:	f9 2e       	mov	r15, r25
     e56:	46 2e       	mov	r4, r22
     e58:	57 2e       	mov	r5, r23
     e5a:	28 2e       	mov	r2, r24
     e5c:	39 2e       	mov	r3, r25
	Ua = H21*ErreurAngle - H22*W;
			
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	a9 01       	movw	r20, r18
     e64:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
     e68:	88 23       	and	r24, r24
     e6a:	1c f0       	brlt	.+6      	; 0xe72 <CalculPWM+0x3b2>
     e6c:	01 e0       	ldi	r16, 0x01	; 1
     e6e:	10 e0       	ldi	r17, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <CalculPWM+0x3b6>
     e72:	0f ef       	ldi	r16, 0xFF	; 255
     e74:	1f ef       	ldi	r17, 0xFF	; 255
     e76:	10 93 9f 00 	sts	0x009F, r17
     e7a:	00 93 9e 00 	sts	0x009E, r16
	Signe_Ua = (Ua >= 0.0)   ? 1 : -1;
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	a9 01       	movw	r20, r18
     e84:	b9 81       	ldd	r27, Y+1	; 0x01
     e86:	aa 81       	ldd	r26, Y+2	; 0x02
     e88:	6b 2f       	mov	r22, r27
     e8a:	7a 2f       	mov	r23, r26
     e8c:	86 2d       	mov	r24, r6
     e8e:	97 2d       	mov	r25, r7
     e90:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
     e94:	88 23       	and	r24, r24
     e96:	2c f0       	brlt	.+10     	; 0xea2 <CalculPWM+0x3e2>
     e98:	a1 e0       	ldi	r26, 0x01	; 1
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	be 83       	std	Y+6, r27	; 0x06
     e9e:	ad 83       	std	Y+5, r26	; 0x05
     ea0:	04 c0       	rjmp	.+8      	; 0xeaa <CalculPWM+0x3ea>
     ea2:	ef ef       	ldi	r30, 0xFF	; 255
     ea4:	ff ef       	ldi	r31, 0xFF	; 255
     ea6:	fe 83       	std	Y+6, r31	; 0x06
     ea8:	ed 83       	std	Y+5, r30	; 0x05
     eaa:	2d 81       	ldd	r18, Y+5	; 0x05
     eac:	3e 81       	ldd	r19, Y+6	; 0x06
     eae:	30 93 a1 00 	sts	0x00A1, r19
     eb2:	20 93 a0 00 	sts	0x00A0, r18
	Signe_Ut = (Ut >= 0.0) ? 1 : -1;
	
     eb6:	b8 01       	movw	r22, r16
     eb8:	88 27       	eor	r24, r24
     eba:	77 fd       	sbrc	r23, 7
     ebc:	80 95       	com	r24
     ebe:	98 2f       	mov	r25, r24
     ec0:	0e 94 87 0b 	call	0x170e	; 0x170e <__floatsisf>
     ec4:	6b 83       	std	Y+3, r22	; 0x03
     ec6:	7c 83       	std	Y+4, r23	; 0x04
     ec8:	08 2f       	mov	r16, r24
     eca:	19 2f       	mov	r17, r25
     ecc:	76 2f       	mov	r23, r22
     ece:	6c 81       	ldd	r22, Y+4	; 0x04
     ed0:	27 2f       	mov	r18, r23
     ed2:	36 2f       	mov	r19, r22
     ed4:	40 2f       	mov	r20, r16
     ed6:	51 2f       	mov	r21, r17
     ed8:	68 2d       	mov	r22, r8
     eda:	79 2d       	mov	r23, r9
     edc:	8e 2d       	mov	r24, r14
     ede:	9f 2d       	mov	r25, r15
     ee0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     ee4:	86 2e       	mov	r8, r22
     ee6:	97 2e       	mov	r9, r23
     ee8:	e8 2e       	mov	r14, r24
     eea:	f9 2e       	mov	r15, r25
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e8       	ldi	r20, 0x80	; 128
     ef2:	5f e3       	ldi	r21, 0x3F	; 63
     ef4:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
     ef8:	18 16       	cp	r1, r24
     efa:	8c f0       	brlt	.+34     	; 0xf1e <CalculPWM+0x45e>
     efc:	2d ec       	ldi	r18, 0xCD	; 205
     efe:	3c ec       	ldi	r19, 0xCC	; 204
     f00:	4c e4       	ldi	r20, 0x4C	; 76
     f02:	5d e3       	ldi	r21, 0x3D	; 61
     f04:	68 2d       	mov	r22, r8
     f06:	79 2d       	mov	r23, r9
     f08:	8e 2d       	mov	r24, r14
     f0a:	9f 2d       	mov	r25, r15
     f0c:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
     f10:	18 16       	cp	r1, r24
     f12:	4c f0       	brlt	.+18     	; 0xf26 <CalculPWM+0x466>
     f14:	41 2c       	mov	r4, r1
     f16:	51 2c       	mov	r5, r1
     f18:	21 2c       	mov	r2, r1
     f1a:	31 2c       	mov	r3, r1
     f1c:	04 c0       	rjmp	.+8      	; 0xf26 <CalculPWM+0x466>
     f1e:	4b 80       	ldd	r4, Y+3	; 0x03
     f20:	5c 80       	ldd	r5, Y+4	; 0x04
     f22:	20 2e       	mov	r2, r16
     f24:	31 2e       	mov	r3, r17
     f26:	84 2d       	mov	r24, r4
     f28:	95 2d       	mov	r25, r5
     f2a:	a2 2d       	mov	r26, r2
     f2c:	b3 2d       	mov	r27, r3
     f2e:	80 93 9a 00 	sts	0x009A, r24
     f32:	90 93 9b 00 	sts	0x009B, r25
     f36:	a0 93 9c 00 	sts	0x009C, r26
     f3a:	b0 93 9d 00 	sts	0x009D, r27
	Ua = (Signe_Ua*Ua > 1.0) ? Signe_Ua*1.0 : ((Signe_Ua*Ua <= 0.05) ? 0.0 : Ua);
     f3e:	ad 81       	ldd	r26, Y+5	; 0x05
     f40:	be 81       	ldd	r27, Y+6	; 0x06
     f42:	bd 01       	movw	r22, r26
     f44:	88 27       	eor	r24, r24
     f46:	77 fd       	sbrc	r23, 7
     f48:	80 95       	com	r24
     f4a:	98 2f       	mov	r25, r24
     f4c:	0e 94 87 0b 	call	0x170e	; 0x170e <__floatsisf>
     f50:	86 2e       	mov	r8, r22
     f52:	97 2e       	mov	r9, r23
     f54:	e8 2e       	mov	r14, r24
     f56:	f9 2e       	mov	r15, r25
     f58:	76 2f       	mov	r23, r22
     f5a:	27 2f       	mov	r18, r23
     f5c:	39 2d       	mov	r19, r9
     f5e:	4e 2d       	mov	r20, r14
     f60:	5f 2d       	mov	r21, r15
     f62:	b9 81       	ldd	r27, Y+1	; 0x01
     f64:	aa 81       	ldd	r26, Y+2	; 0x02
     f66:	6b 2f       	mov	r22, r27
     f68:	7a 2f       	mov	r23, r26
     f6a:	86 2d       	mov	r24, r6
     f6c:	97 2d       	mov	r25, r7
     f6e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e8       	ldi	r20, 0x80	; 128
     f78:	5f e3       	ldi	r21, 0x3F	; 63
     f7a:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
     f7e:	18 16       	cp	r1, r24
     f80:	24 f4       	brge	.+8      	; 0xf8a <CalculPWM+0x4ca>
     f82:	a8 2c       	mov	r10, r8
     f84:	b9 2c       	mov	r11, r9
     f86:	ce 2c       	mov	r12, r14
     f88:	df 2c       	mov	r13, r15
	Ut = (Signe_Ut*Ut > 1.0) ? Signe_Ut*1.0 : Ut;
     f8a:	7b 81       	ldd	r23, Y+3	; 0x03
     f8c:	6c 81       	ldd	r22, Y+4	; 0x04
     f8e:	27 2f       	mov	r18, r23
     f90:	36 2f       	mov	r19, r22
     f92:	40 2f       	mov	r20, r16
     f94:	51 2f       	mov	r21, r17
     f96:	64 2d       	mov	r22, r4
     f98:	75 2d       	mov	r23, r5
     f9a:	82 2d       	mov	r24, r2
     f9c:	93 2d       	mov	r25, r3
     f9e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     fa2:	9b 01       	movw	r18, r22
     fa4:	ac 01       	movw	r20, r24
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	80 e8       	ldi	r24, 0x80	; 128
     fac:	9f e3       	ldi	r25, 0x3F	; 63
     fae:	0e 94 88 0a 	call	0x1510	; 0x1510 <__subsf3>
     fb2:	66 2e       	mov	r6, r22
     fb4:	77 2e       	mov	r7, r23
     fb6:	08 2f       	mov	r16, r24
     fb8:	19 2f       	mov	r17, r25
     fba:	28 2d       	mov	r18, r8
     fbc:	39 2d       	mov	r19, r9
     fbe:	4e 2d       	mov	r20, r14
     fc0:	5f 2d       	mov	r21, r15
     fc2:	6a 2d       	mov	r22, r10
     fc4:	7b 2d       	mov	r23, r11
     fc6:	8c 2d       	mov	r24, r12
     fc8:	9d 2d       	mov	r25, r13
     fca:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     fce:	26 2d       	mov	r18, r6
     fd0:	37 2d       	mov	r19, r7
     fd2:	40 2f       	mov	r20, r16
     fd4:	51 2f       	mov	r21, r17
     fd6:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
     fda:	18 16       	cp	r1, r24
     fdc:	74 f4       	brge	.+28     	; 0xffa <CalculPWM+0x53a>
     fde:	26 2d       	mov	r18, r6
     fe0:	37 2d       	mov	r19, r7
     fe2:	40 2f       	mov	r20, r16
     fe4:	51 2f       	mov	r21, r17
     fe6:	68 2d       	mov	r22, r8
     fe8:	79 2d       	mov	r23, r9
     fea:	8e 2d       	mov	r24, r14
     fec:	9f 2d       	mov	r25, r15
     fee:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__mulsf3>
     ff2:	a6 2e       	mov	r10, r22
     ff4:	b7 2e       	mov	r11, r23
     ff6:	c8 2e       	mov	r12, r24
     ff8:	d9 2e       	mov	r13, r25
     ffa:	5a 2d       	mov	r21, r10
     ffc:	4b 2d       	mov	r20, r11
     ffe:	8a 2d       	mov	r24, r10
    1000:	9b 2d       	mov	r25, r11
    1002:	ac 2d       	mov	r26, r12
    1004:	bd 2d       	mov	r27, r13
    1006:	80 93 96 00 	sts	0x0096, r24
    100a:	90 93 97 00 	sts	0x0097, r25
    100e:	a0 93 98 00 	sts	0x0098, r26
    1012:	b0 93 99 00 	sts	0x0099, r27
	Ut = ((Signe_Ut*Ut) > (1.0 - Signe_Ua*Ua)) ? Signe_Ut*(1.0 - Signe_Ua*Ua) : Ut;


    1016:	25 2f       	mov	r18, r21
    1018:	34 2f       	mov	r19, r20
    101a:	4a 2f       	mov	r20, r26
    101c:	5b 2f       	mov	r21, r27
    101e:	64 2d       	mov	r22, r4
    1020:	75 2d       	mov	r23, r5
    1022:	82 2d       	mov	r24, r2
    1024:	93 2d       	mov	r25, r3
    1026:	0e 94 89 0a 	call	0x1512	; 0x1512 <__addsf3>
    102a:	eb a1       	ldd	r30, Y+35	; 0x23
    102c:	fc a1       	ldd	r31, Y+36	; 0x24
    102e:	60 83       	st	Z, r22
    1030:	71 83       	std	Z+1, r23	; 0x01
    1032:	82 83       	std	Z+2, r24	; 0x02
    1034:	93 83       	std	Z+3, r25	; 0x03
	*Duty_D = (Ut+Ua);
    1036:	24 2d       	mov	r18, r4
    1038:	35 2d       	mov	r19, r5
    103a:	42 2d       	mov	r20, r2
    103c:	53 2d       	mov	r21, r3
    103e:	6a 2d       	mov	r22, r10
    1040:	7b 2d       	mov	r23, r11
    1042:	8c 2d       	mov	r24, r12
    1044:	9d 2d       	mov	r25, r13
    1046:	0e 94 88 0a 	call	0x1510	; 0x1510 <__subsf3>
    104a:	a9 85       	ldd	r26, Y+9	; 0x09
    104c:	ba 85       	ldd	r27, Y+10	; 0x0a
    104e:	6d 93       	st	X+, r22
    1050:	7d 93       	st	X+, r23
    1052:	8d 93       	st	X+, r24
    1054:	9c 93       	st	X, r25
    1056:	13 97       	sbiw	r26, 0x03	; 3
	*Duty_G = (Ut-Ua);

    1058:	eb a1       	ldd	r30, Y+35	; 0x23
    105a:	fc a1       	ldd	r31, Y+36	; 0x24
    105c:	c0 80       	ld	r12, Z
    105e:	d1 80       	ldd	r13, Z+1	; 0x01
    1060:	e2 80       	ldd	r14, Z+2	; 0x02
    1062:	f3 80       	ldd	r15, Z+3	; 0x03
    1064:	24 ea       	ldi	r18, 0xA4	; 164
    1066:	30 e7       	ldi	r19, 0x70	; 112
    1068:	4d e7       	ldi	r20, 0x7D	; 125
    106a:	5f e3       	ldi	r21, 0x3F	; 63
    106c:	c7 01       	movw	r24, r14
    106e:	b6 01       	movw	r22, r12
    1070:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
    1074:	18 16       	cp	r1, r24
    1076:	ac f0       	brlt	.+42     	; 0x10a2 <CalculPWM+0x5e2>
    1078:	24 ea       	ldi	r18, 0xA4	; 164
    107a:	30 e7       	ldi	r19, 0x70	; 112
    107c:	4d e7       	ldi	r20, 0x7D	; 125
    107e:	5f eb       	ldi	r21, 0xBF	; 191
    1080:	c7 01       	movw	r24, r14
    1082:	b6 01       	movw	r22, r12
    1084:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
    1088:	88 23       	and	r24, r24
    108a:	ac f4       	brge	.+42     	; 0x10b6 <CalculPWM+0x5f6>
    108c:	0f 2e       	mov	r0, r31
    108e:	f4 ea       	ldi	r31, 0xA4	; 164
    1090:	cf 2e       	mov	r12, r31
    1092:	f0 e7       	ldi	r31, 0x70	; 112
    1094:	df 2e       	mov	r13, r31
    1096:	fd e7       	ldi	r31, 0x7D	; 125
    1098:	ef 2e       	mov	r14, r31
    109a:	ff eb       	ldi	r31, 0xBF	; 191
    109c:	ff 2e       	mov	r15, r31
    109e:	f0 2d       	mov	r31, r0
    10a0:	0a c0       	rjmp	.+20     	; 0x10b6 <CalculPWM+0x5f6>
    10a2:	0f 2e       	mov	r0, r31
    10a4:	f4 ea       	ldi	r31, 0xA4	; 164
    10a6:	cf 2e       	mov	r12, r31
    10a8:	f0 e7       	ldi	r31, 0x70	; 112
    10aa:	df 2e       	mov	r13, r31
    10ac:	fd e7       	ldi	r31, 0x7D	; 125
    10ae:	ef 2e       	mov	r14, r31
    10b0:	ff e3       	ldi	r31, 0x3F	; 63
    10b2:	ff 2e       	mov	r15, r31
    10b4:	f0 2d       	mov	r31, r0
    10b6:	ab a1       	ldd	r26, Y+35	; 0x23
    10b8:	bc a1       	ldd	r27, Y+36	; 0x24
    10ba:	cd 92       	st	X+, r12
    10bc:	dd 92       	st	X+, r13
    10be:	ed 92       	st	X+, r14
    10c0:	fc 92       	st	X, r15
    10c2:	13 97       	sbiw	r26, 0x03	; 3
	*Duty_D = (*Duty_D > 0.99) ? 0.99 : ((*Duty_D < -0.99) ? -0.99 : *Duty_D);
    10c4:	e9 85       	ldd	r30, Y+9	; 0x09
    10c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    10c8:	c0 80       	ld	r12, Z
    10ca:	d1 80       	ldd	r13, Z+1	; 0x01
    10cc:	e2 80       	ldd	r14, Z+2	; 0x02
    10ce:	f3 80       	ldd	r15, Z+3	; 0x03
    10d0:	24 ea       	ldi	r18, 0xA4	; 164
    10d2:	30 e7       	ldi	r19, 0x70	; 112
    10d4:	4d e7       	ldi	r20, 0x7D	; 125
    10d6:	5f e3       	ldi	r21, 0x3F	; 63
    10d8:	c7 01       	movw	r24, r14
    10da:	b6 01       	movw	r22, r12
    10dc:	0e 94 37 0c 	call	0x186e	; 0x186e <__gesf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	ac f0       	brlt	.+42     	; 0x110e <CalculPWM+0x64e>
    10e4:	24 ea       	ldi	r18, 0xA4	; 164
    10e6:	30 e7       	ldi	r19, 0x70	; 112
    10e8:	4d e7       	ldi	r20, 0x7D	; 125
    10ea:	5f eb       	ldi	r21, 0xBF	; 191
    10ec:	c7 01       	movw	r24, r14
    10ee:	b6 01       	movw	r22, r12
    10f0:	0e 94 ed 0a 	call	0x15da	; 0x15da <__cmpsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	ac f4       	brge	.+42     	; 0x1122 <CalculPWM+0x662>
    10f8:	0f 2e       	mov	r0, r31
    10fa:	f4 ea       	ldi	r31, 0xA4	; 164
    10fc:	cf 2e       	mov	r12, r31
    10fe:	f0 e7       	ldi	r31, 0x70	; 112
    1100:	df 2e       	mov	r13, r31
    1102:	fd e7       	ldi	r31, 0x7D	; 125
    1104:	ef 2e       	mov	r14, r31
    1106:	ff eb       	ldi	r31, 0xBF	; 191
    1108:	ff 2e       	mov	r15, r31
    110a:	f0 2d       	mov	r31, r0
    110c:	0a c0       	rjmp	.+20     	; 0x1122 <CalculPWM+0x662>
    110e:	0f 2e       	mov	r0, r31
    1110:	f4 ea       	ldi	r31, 0xA4	; 164
    1112:	cf 2e       	mov	r12, r31
    1114:	f0 e7       	ldi	r31, 0x70	; 112
    1116:	df 2e       	mov	r13, r31
    1118:	fd e7       	ldi	r31, 0x7D	; 125
    111a:	ef 2e       	mov	r14, r31
    111c:	ff e3       	ldi	r31, 0x3F	; 63
    111e:	ff 2e       	mov	r15, r31
    1120:	f0 2d       	mov	r31, r0
    1122:	a9 85       	ldd	r26, Y+9	; 0x09
    1124:	ba 85       	ldd	r27, Y+10	; 0x0a
    1126:	cd 92       	st	X+, r12
    1128:	dd 92       	st	X+, r13
    112a:	ed 92       	st	X+, r14
    112c:	fc 92       	st	X, r15
    112e:	13 97       	sbiw	r26, 0x03	; 3
	*Duty_G = (*Duty_G > 0.99) ? 0.99 : ((*Duty_G < -0.99) ? -0.99 : *Duty_G);	
    1130:	2e 96       	adiw	r28, 0x0e	; 14
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	bf 90       	pop	r11
    114e:	af 90       	pop	r10
    1150:	9f 90       	pop	r9
    1152:	8f 90       	pop	r8
    1154:	7f 90       	pop	r7
    1156:	6f 90       	pop	r6
    1158:	5f 90       	pop	r5
    115a:	4f 90       	pop	r4
    115c:	3f 90       	pop	r3
    115e:	2f 90       	pop	r2
    1160:	08 95       	ret

00001162 <__vector_9>:
/*************************** VARIABLES LOCALES ***************************/	
static volatile uint8_t TICK_counter = 0;

/********************** Interrupt TIMER 1 overflow ***********************/
ISR(TIMER1_OVF_vect)
{	
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	8f 93       	push	r24
	flag_PWMcycle = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	80 93 a4 00 	sts	0x00A4, r24
	
	TICK_counter++;
    1174:	80 91 a2 00 	lds	r24, 0x00A2
    1178:	8f 5f       	subi	r24, 0xFF	; 255
    117a:	80 93 a2 00 	sts	0x00A2, r24
	
	if(TICK_counter == 10)
    117e:	80 91 a2 00 	lds	r24, 0x00A2
    1182:	8a 30       	cpi	r24, 0x0A	; 10
    1184:	29 f4       	brne	.+10     	; 0x1190 <__vector_9+0x2e>
	{
		flag_50ms_TICK = 1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 a3 00 	sts	0x00A3, r24
		TICK_counter = 0;
    118c:	10 92 a2 00 	sts	0x00A2, r1
	}
}
    1190:	8f 91       	pop	r24
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	0f 90       	pop	r0
    1198:	1f 90       	pop	r1
    119a:	18 95       	reti

0000119c <initTIMER>:
	//    = (16000000)/(200*64) - 1 
	//    = 1249 = 0x04E1
	
	//	see [datasheet p.99]
	
	ICR1H = 0x04;
    119c:	84 e0       	ldi	r24, 0x04	; 4
    119e:	87 bd       	out	0x27, r24	; 39
	ICR1L = 0xE1;
    11a0:	91 ee       	ldi	r25, 0xE1	; 225
    11a2:	96 bd       	out	0x26, r25	; 38
	
	TIMSK = 0x04;
    11a4:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|
    11a6:	92 ea       	ldi	r25, 0xA2	; 162
    11a8:	9f bd       	out	0x2f, r25	; 47
			 (0<<FOC1A)|(0<<FOC1B)|(1<<WGM11)|(0<<WGM10);
			 
	TCCR1B = (1<<ICES1)|(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);
    11aa:	9b e5       	ldi	r25, 0x5B	; 91
    11ac:	9e bd       	out	0x2e, r25	; 46
	 
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|
    11ae:	9b e1       	ldi	r25, 0x1B	; 27
    11b0:	9e bd       	out	0x2e, r25	; 46
			 (0<<CS12)|(1<<CS11)|(1<<CS10);
			 
	TIMSK  = (0<<TICIE1)|(0<<OCIE1A)|(0<<OCIE1B)|(1<<TOIE1);
    11b2:	89 bf       	out	0x39, r24	; 57
    11b4:	08 95       	ret

000011b6 <initTWI>:
	//  - Mode maître
	//  - pas dadresse « esclave »
	
	//SCL freq = FCPU/ (16 + 2(TWBR) * 4^TWPS) [datasheet p.173]
	//Avec prescaler = 1 (TWPS1=0 TWPS0=0), TWBR = 198 = 0xC6 
	TWBR = 0xC6;
    11b6:	86 ec       	ldi	r24, 0xC6	; 198
    11b8:	80 b9       	out	0x00, r24	; 0
	TWSR = ~((1<<TWPS1)|(1<<TWPS0));
    11ba:	8c ef       	ldi	r24, 0xFC	; 252
    11bc:	81 b9       	out	0x01, r24	; 1
	TWDR = 0xFF;
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	83 b9       	out	0x03, r24	; 3
	TWCR = (0<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(0<<TWIE);
    11c2:	84 e0       	ldi	r24, 0x04	; 4
    11c4:	86 bf       	out	0x36, r24	; 54
    11c6:	08 95       	ret

000011c8 <putDataOutBuf>:
/******************************************************************************
 * Insérer dans le buffer out
 *****************************************************************************/
void putDataOutBuf(uint8_t data){

	CircularBufferOutEnd++;
    11c8:	e0 91 ef 00 	lds	r30, 0x00EF
    11cc:	ef 5f       	subi	r30, 0xFF	; 255
	CircularBufferOutEnd %= CIRCULAR_BUFFER_SIZE;
    11ce:	ef 71       	andi	r30, 0x1F	; 31
    11d0:	e0 93 ef 00 	sts	0x00EF, r30
	TWIdataCounter++;
    11d4:	90 91 a5 00 	lds	r25, 0x00A5
    11d8:	9f 5f       	subi	r25, 0xFF	; 255
    11da:	90 93 a5 00 	sts	0x00A5, r25
	CircularBufferOut[CircularBufferOutEnd] = data;
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	e0 51       	subi	r30, 0x10	; 16
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	80 83       	st	Z, r24
    11e6:	08 95       	ret

000011e8 <getDataOutBuf>:
/******************************************************************************
 * Retirer du buffer out
 *****************************************************************************/
uint8_t getDataOutBuf(void){

	CircularBufferOutIndex++;
    11e8:	e0 91 10 01 	lds	r30, 0x0110
    11ec:	ef 5f       	subi	r30, 0xFF	; 255
	CircularBufferOutIndex %= CIRCULAR_BUFFER_SIZE;
    11ee:	ef 71       	andi	r30, 0x1F	; 31
    11f0:	e0 93 10 01 	sts	0x0110, r30
	TWIdataCounter--;
    11f4:	80 91 a5 00 	lds	r24, 0x00A5
    11f8:	81 50       	subi	r24, 0x01	; 1
    11fa:	80 93 a5 00 	sts	0x00A5, r24
	return (uint8_t)CircularBufferOut[CircularBufferOutIndex];
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	e0 51       	subi	r30, 0x10	; 16
    1202:	ff 4f       	sbci	r31, 0xFF	; 255

}
    1204:	80 81       	ld	r24, Z
    1206:	08 95       	ret

00001208 <putDataInBuf>:
/******************************************************************************
 * Insérer dans le buffer in
 *****************************************************************************/
void putDataInBuf(uint8_t* ptr){

	CircularBufferInEnd++;
    1208:	e0 91 11 01 	lds	r30, 0x0111
    120c:	ef 5f       	subi	r30, 0xFF	; 255
	CircularBufferInEnd %= CIRCULAR_BUFFER_SIZE;
    120e:	ef 71       	andi	r30, 0x1F	; 31
    1210:	e0 93 11 01 	sts	0x0111, r30
	CircularBufferIn[CircularBufferInEnd] = ptr;
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	e1 55       	subi	r30, 0x51	; 81
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	08 95       	ret

00001224 <getDataInBuf>:
/******************************************************************************
 * Retirer du buffer in
 *****************************************************************************/
uint8_t* getDataInBuf(void){

	CircularBufferInIndex++;
    1224:	e0 91 12 01 	lds	r30, 0x0112
    1228:	ef 5f       	subi	r30, 0xFF	; 255
	CircularBufferInIndex %= CIRCULAR_BUFFER_SIZE;
    122a:	ef 71       	andi	r30, 0x1F	; 31
    122c:	e0 93 12 01 	sts	0x0112, r30
	return CircularBufferIn[CircularBufferInIndex];	
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	ee 0f       	add	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	e1 55       	subi	r30, 0x51	; 81
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
}
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	08 95       	ret

00001240 <__vector_19>:
uint8_t TWIdataCounter = 0;

/******************************************************************************
 *
 *****************************************************************************/
ISR(TWI_vect) {
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	11 24       	eor	r1, r1
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
	
	uint8_t* ptr;
	uint8_t status  = TWSR & 0xF8;
    1262:	81 b1       	in	r24, 0x01	; 1
    1264:	88 7f       	andi	r24, 0xF8	; 248
		
	switch (status) {
    1266:	88 32       	cpi	r24, 0x28	; 40
    1268:	89 f1       	breq	.+98     	; 0x12cc <__vector_19+0x8c>
    126a:	68 f4       	brcc	.+26     	; 0x1286 <__vector_19+0x46>
    126c:	80 31       	cpi	r24, 0x10	; 16
    126e:	41 f1       	breq	.+80     	; 0x12c0 <__vector_19+0x80>
    1270:	20 f4       	brcc	.+8      	; 0x127a <__vector_19+0x3a>
    1272:	88 30       	cpi	r24, 0x08	; 8
    1274:	09 f0       	breq	.+2      	; 0x1278 <__vector_19+0x38>
    1276:	77 c0       	rjmp	.+238    	; 0x1366 <__vector_19+0x126>
    1278:	23 c0       	rjmp	.+70     	; 0x12c0 <__vector_19+0x80>
    127a:	88 31       	cpi	r24, 0x18	; 24
    127c:	39 f1       	breq	.+78     	; 0x12cc <__vector_19+0x8c>
    127e:	80 32       	cpi	r24, 0x20	; 32
    1280:	09 f0       	breq	.+2      	; 0x1284 <__vector_19+0x44>
    1282:	71 c0       	rjmp	.+226    	; 0x1366 <__vector_19+0x126>
    1284:	0f c0       	rjmp	.+30     	; 0x12a4 <__vector_19+0x64>
    1286:	88 34       	cpi	r24, 0x48	; 72
    1288:	69 f0       	breq	.+26     	; 0x12a4 <__vector_19+0x64>
    128a:	30 f4       	brcc	.+12     	; 0x1298 <__vector_19+0x58>
    128c:	80 33       	cpi	r24, 0x30	; 48
    128e:	f1 f0       	breq	.+60     	; 0x12cc <__vector_19+0x8c>
    1290:	80 34       	cpi	r24, 0x40	; 64
    1292:	09 f0       	breq	.+2      	; 0x1296 <__vector_19+0x56>
    1294:	68 c0       	rjmp	.+208    	; 0x1366 <__vector_19+0x126>
    1296:	37 c0       	rjmp	.+110    	; 0x1306 <__vector_19+0xc6>
    1298:	80 35       	cpi	r24, 0x50	; 80
    129a:	81 f1       	breq	.+96     	; 0x12fc <__vector_19+0xbc>
    129c:	88 35       	cpi	r24, 0x58	; 88
    129e:	09 f0       	breq	.+2      	; 0x12a2 <__vector_19+0x62>
    12a0:	62 c0       	rjmp	.+196    	; 0x1366 <__vector_19+0x126>
    12a2:	2c c0       	rjmp	.+88     	; 0x12fc <__vector_19+0xbc>

		case	0x48: /* Address Read NoAck */
		case	0x20: /* Address Write NoAck */


			while((CircularBufferOut[CircularBufferOutIndex+1] <= 0xE0) && (TWIdataCounter > 0))
    12a4:	e0 91 10 01 	lds	r30, 0x0110
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	e0 51       	subi	r30, 0x10	; 16
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	81 81       	ldd	r24, Z+1	; 0x01
    12b0:	81 3e       	cpi	r24, 0xE1	; 225
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <__vector_19+0x76>
    12b4:	4f c0       	rjmp	.+158    	; 0x1354 <__vector_19+0x114>
    12b6:	80 91 a5 00 	lds	r24, 0x00A5
    12ba:	81 11       	cpse	r24, r1
    12bc:	3c c0       	rjmp	.+120    	; 0x1336 <__vector_19+0xf6>
    12be:	51 c0       	rjmp	.+162    	; 0x1362 <__vector_19+0x122>
	switch (status) {
		case	0x08: /* Start Condition */
		case	0x10: /* Restart Condition */
			
			// Load data register with TWI slave address
			TWDR = getDataOutBuf();
    12c0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <getDataOutBuf>
    12c4:	83 b9       	out	0x03, r24	; 3
			// TWI Interrupt enabled and clear flag to send next byte
			TWCR = (1<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(1<<TWIE);
    12c6:	85 e8       	ldi	r24, 0x85	; 133
    12c8:	86 bf       	out	0x36, r24	; 54
			
			break;
    12ca:	4d c0       	rjmp	.+154    	; 0x1366 <__vector_19+0x126>
		case	0x18: /* Address Write Ack */
		case	0x28: /* Data Write Ack */
		case	0x30: /* Date Write NoAck */

			
			if (TWIdataCounter>0) /*Si le buffer n'est pas vide*/
    12cc:	80 91 a5 00 	lds	r24, 0x00A5
    12d0:	88 23       	and	r24, r24
    12d2:	89 f0       	breq	.+34     	; 0x12f6 <__vector_19+0xb6>
			{
				/* Nouveau packet*/
				if(CircularBufferOut[CircularBufferOutIndex+1] >= 0xE0)
    12d4:	e0 91 10 01 	lds	r30, 0x0110
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	e0 51       	subi	r30, 0x10	; 16
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	81 81       	ldd	r24, Z+1	; 0x01
    12e0:	80 3e       	cpi	r24, 0xE0	; 224
    12e2:	18 f0       	brcs	.+6      	; 0x12ea <__vector_19+0xaa>
				{
					//Generate restart condition on the bus to start next transmission
					TWCR = (1<<TWINT)|(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(1<<TWIE);
    12e4:	85 ea       	ldi	r24, 0xA5	; 165
    12e6:	86 bf       	out	0x36, r24	; 54
    12e8:	3e c0       	rjmp	.+124    	; 0x1366 <__vector_19+0x126>
				}
				/*Suite du packet en cours de transmission*/
				else
				{
					//Load TWDR with data byte to send
					TWDR = getDataOutBuf();
    12ea:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <getDataOutBuf>
    12ee:	83 b9       	out	0x03, r24	; 3
					// TWI Interrupt enabled and clear flag to send next byte
					TWCR = (1<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(1<<TWIE);
    12f0:	85 e8       	ldi	r24, 0x85	; 133
    12f2:	86 bf       	out	0x36, r24	; 54
    12f4:	38 c0       	rjmp	.+112    	; 0x1366 <__vector_19+0x126>
			}
			/*Fin */
			else
			{
				//Generate STOP condition
				TWCR = (1<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(0<<TWIE);
    12f6:	84 e9       	ldi	r24, 0x94	; 148
    12f8:	86 bf       	out	0x36, r24	; 54
    12fa:	35 c0       	rjmp	.+106    	; 0x1366 <__vector_19+0x126>
			break;

		case	0x50: /* Data Read Ack */
		case	0x58: /* Data Read NoAck */

			ptr = getDataInBuf(); /*Récupérer la lecture sur le bus*/
    12fc:	0e 94 12 09 	call	0x1224	; 0x1224 <getDataInBuf>
			*ptr = TWDR;
    1300:	23 b1       	in	r18, 0x03	; 3
    1302:	fc 01       	movw	r30, r24
    1304:	20 83       	st	Z, r18

		case	0x40: /* Address Read Ack */

			if(TWIdataCounter > 0) /*Si le buffer n'est pas vide*/
    1306:	80 91 a5 00 	lds	r24, 0x00A5
    130a:	88 23       	and	r24, r24
    130c:	89 f0       	breq	.+34     	; 0x1330 <__vector_19+0xf0>
			{
				if(CircularBufferOut[CircularBufferOutIndex+1] >= 0xE0)
    130e:	e0 91 10 01 	lds	r30, 0x0110
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	e0 51       	subi	r30, 0x10	; 16
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	81 81       	ldd	r24, Z+1	; 0x01
    131a:	80 3e       	cpi	r24, 0xE0	; 224
    131c:	18 f0       	brcs	.+6      	; 0x1324 <__vector_19+0xe4>
				{
					//Generate restart condition on the bus to start next transmission
					TWCR = (1<<TWINT)|(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(1<<TWIE);
    131e:	85 ea       	ldi	r24, 0xA5	; 165
    1320:	86 bf       	out	0x36, r24	; 54
    1322:	21 c0       	rjmp	.+66     	; 0x1366 <__vector_19+0x126>
				}
				else
				{
					//Load TWDR with data byte to send
					TWDR = getDataOutBuf();
    1324:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <getDataOutBuf>
    1328:	83 b9       	out	0x03, r24	; 3
					// TWI Interrupt enabled and clear flag to send next byte
					TWCR = (1<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(1<<TWIE);
    132a:	85 e8       	ldi	r24, 0x85	; 133
    132c:	86 bf       	out	0x36, r24	; 54
    132e:	1b c0       	rjmp	.+54     	; 0x1366 <__vector_19+0x126>
				}
			}
			else
			{
				//Generate STOP condition
				TWCR = (1<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(0<<TWIE);
    1330:	84 e9       	ldi	r24, 0x94	; 148
    1332:	86 bf       	out	0x36, r24	; 54
    1334:	18 c0       	rjmp	.+48     	; 0x1366 <__vector_19+0x126>
		case	0x20: /* Address Write NoAck */


			while((CircularBufferOut[CircularBufferOutIndex+1] <= 0xE0) && (TWIdataCounter > 0))
			{
				getDataOutBuf(); /*Sauter au prochain packet dans le buffer*/
    1336:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <getDataOutBuf>

		case	0x48: /* Address Read NoAck */
		case	0x20: /* Address Write NoAck */


			while((CircularBufferOut[CircularBufferOutIndex+1] <= 0xE0) && (TWIdataCounter > 0))
    133a:	e0 91 10 01 	lds	r30, 0x0110
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	e0 51       	subi	r30, 0x10	; 16
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	81 81       	ldd	r24, Z+1	; 0x01
    1346:	81 3e       	cpi	r24, 0xE1	; 225
    1348:	28 f4       	brcc	.+10     	; 0x1354 <__vector_19+0x114>
    134a:	80 91 a5 00 	lds	r24, 0x00A5
    134e:	81 11       	cpse	r24, r1
    1350:	f2 cf       	rjmp	.-28     	; 0x1336 <__vector_19+0xf6>
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <__vector_19+0x122>
			{
				getDataOutBuf(); /*Sauter au prochain packet dans le buffer*/
			}
			
			if(TWIdataCounter >0)
    1354:	80 91 a5 00 	lds	r24, 0x00A5
    1358:	88 23       	and	r24, r24
    135a:	19 f0       	breq	.+6      	; 0x1362 <__vector_19+0x122>
			{
				//Generate restart condition on the bus to start next transmission
				TWCR = (1<<TWINT)|(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(1<<TWIE);
    135c:	85 ea       	ldi	r24, 0xA5	; 165
    135e:	86 bf       	out	0x36, r24	; 54
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <__vector_19+0x126>
			}
			
			else
			{
				//Generate STOP condition
				TWCR = (1<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(0<<TWIE);				
    1362:	84 e9       	ldi	r24, 0x94	; 148
    1364:	86 bf       	out	0x36, r24	; 54
			break;

		default : 
			break;
	}
}
    1366:	ff 91       	pop	r31
    1368:	ef 91       	pop	r30
    136a:	bf 91       	pop	r27
    136c:	af 91       	pop	r26
    136e:	9f 91       	pop	r25
    1370:	8f 91       	pop	r24
    1372:	7f 91       	pop	r23
    1374:	6f 91       	pop	r22
    1376:	5f 91       	pop	r21
    1378:	4f 91       	pop	r20
    137a:	3f 91       	pop	r19
    137c:	2f 91       	pop	r18
    137e:	0f 90       	pop	r0
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	0f 90       	pop	r0
    1384:	1f 90       	pop	r1
    1386:	18 95       	reti

00001388 <twiWrite>:

/******************************************************************************
 * Écrire sur le bus twi
 *****************************************************************************/
void twiWrite(uint8_t address, uint8_t registre, uint8_t data)
{	
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	d6 2f       	mov	r29, r22
    138e:	c4 2f       	mov	r28, r20
	cli();
    1390:	f8 94       	cli

	/* Ajouter les 3 donnees a envoyer sur le bus au buffer circulaire */
	putDataOutBuf(address);
    1392:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <putDataOutBuf>
	putDataOutBuf(registre);
    1396:	8d 2f       	mov	r24, r29
    1398:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <putDataOutBuf>
	putDataOutBuf(data);
    139c:	8c 2f       	mov	r24, r28
    139e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <putDataOutBuf>
	
	sei();
    13a2:	78 94       	sei
	
	if(~(TWCR & (1<<TWIE)))
    13a4:	86 b7       	in	r24, 0x36	; 54
	{
		TWCR = (1<<TWINT)|(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(1<<TWIE);
    13a6:	85 ea       	ldi	r24, 0xA5	; 165
    13a8:	86 bf       	out	0x36, r24	; 54
	}
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <twiRead>:

/******************************************************************************
 * lire sur le bus
 *****************************************************************************/
void twiRead(uint8_t address, uint8_t registre, uint8_t *ptr)
{
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	18 2f       	mov	r17, r24
    13ba:	06 2f       	mov	r16, r22
    13bc:	ea 01       	movw	r28, r20
	cli();
    13be:	f8 94       	cli
	putDataOutBuf(address-1);
    13c0:	81 50       	subi	r24, 0x01	; 1
    13c2:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <putDataOutBuf>
	putDataOutBuf(registre);
    13c6:	80 2f       	mov	r24, r16
    13c8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <putDataOutBuf>
	putDataOutBuf(address);
    13cc:	81 2f       	mov	r24, r17
    13ce:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <putDataOutBuf>
	putDataInBuf(ptr);
    13d2:	ce 01       	movw	r24, r28
    13d4:	0e 94 04 09 	call	0x1208	; 0x1208 <putDataInBuf>
	
	sei();
    13d8:	78 94       	sei
	
	if(~(TWCR & (1<<TWIE)))
    13da:	86 b7       	in	r24, 0x36	; 54
	{
		TWCR = (1<<TWINT)|(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(1<<TWIE);
    13dc:	85 ea       	ldi	r24, 0xA5	; 165
    13de:	86 bf       	out	0x36, r24	; 54
	}
}
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	08 95       	ret

000013ea <__vector_15>:
static volatile uint8_t uart_out_counter;
static volatile uint8_t uart_in_counter;

/********************** INTERRUPT UART TX Complete ***********************/	
ISR(USART_TXC_vect)      
{
    13ea:	1f 92       	push	r1
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	8f 93       	push	r24
    13f6:	ef 93       	push	r30
    13f8:	ff 93       	push	r31
	if (uart_out_counter)
    13fa:	80 91 a7 00 	lds	r24, 0x00A7
    13fe:	88 23       	and	r24, r24
    1400:	81 f0       	breq	.+32     	; 0x1422 <__vector_15+0x38>
	{
		UDR = *uart_data_ptr;
    1402:	e0 91 ad 00 	lds	r30, 0x00AD
    1406:	f0 91 ae 00 	lds	r31, 0x00AE
    140a:	81 91       	ld	r24, Z+
    140c:	8c b9       	out	0x0c, r24	; 12
		uart_data_ptr++;
    140e:	f0 93 ae 00 	sts	0x00AE, r31
    1412:	e0 93 ad 00 	sts	0x00AD, r30
		uart_out_counter--;
    1416:	80 91 a7 00 	lds	r24, 0x00A7
    141a:	81 50       	subi	r24, 0x01	; 1
    141c:	80 93 a7 00 	sts	0x00A7, r24
    1420:	08 c0       	rjmp	.+16     	; 0x1432 <__vector_15+0x48>
	}
	else
	{
		UDR = 0xFF;
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	8c b9       	out	0x0c, r24	; 12
		flag_trans_ON = 0;
    1426:	10 92 ab 00 	sts	0x00AB, r1
		flag_echo_EN = 1;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	80 93 68 00 	sts	0x0068, r24
		UCSRB &= ~(1<<TXCIE);
    1430:	56 98       	cbi	0x0a, 6	; 10
	}
}
    1432:	ff 91       	pop	r31
    1434:	ef 91       	pop	r30
    1436:	8f 91       	pop	r24
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	0f 90       	pop	r0
    143e:	1f 90       	pop	r1
    1440:	18 95       	reti

00001442 <__vector_13>:
/*************************************************************************/

/********************** INTERRUPT UART RX Complete ***********************/	
ISR(USART_RXC_vect)      
{
    1442:	1f 92       	push	r1
    1444:	0f 92       	push	r0
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	0f 92       	push	r0
    144a:	11 24       	eor	r1, r1
    144c:	8f 93       	push	r24
    144e:	9f 93       	push	r25
    1450:	ef 93       	push	r30
    1452:	ff 93       	push	r31
	uint8_t data;
	data = UDR;
    1454:	8c b1       	in	r24, 0x0c	; 12

	/* Reset WATCHDOG*/
	wdt_reset();
    1456:	a8 95       	wdr
		
	if(data == 0xF0)
    1458:	80 3f       	cpi	r24, 0xF0	; 240
    145a:	69 f4       	brne	.+26     	; 0x1476 <__vector_13+0x34>
	{
		commande[uart_in_counter] = data;
    145c:	e0 91 a6 00 	lds	r30, 0x00A6
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	e8 55       	subi	r30, 0x58	; 88
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	90 ef       	ldi	r25, 0xF0	; 240
    1468:	90 83       	st	Z, r25
		flag_CMD_in = 1;
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	90 93 ac 00 	sts	0x00AC, r25
		uart_in_counter = 0;
    1470:	10 92 a6 00 	sts	0x00A6, r1
    1474:	1c c0       	rjmp	.+56     	; 0x14ae <__vector_13+0x6c>
	} 
	else if(data == 0xF1)
    1476:	81 3f       	cpi	r24, 0xF1	; 241
    1478:	79 f4       	brne	.+30     	; 0x1498 <__vector_13+0x56>
	{
		uart_in_counter = 0;
    147a:	10 92 a6 00 	sts	0x00A6, r1
		commande[uart_in_counter] = data;
    147e:	e0 91 a6 00 	lds	r30, 0x00A6
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	e8 55       	subi	r30, 0x58	; 88
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	91 ef       	ldi	r25, 0xF1	; 241
    148a:	90 83       	st	Z, r25
		uart_in_counter++;
    148c:	90 91 a6 00 	lds	r25, 0x00A6
    1490:	9f 5f       	subi	r25, 0xFF	; 255
    1492:	90 93 a6 00 	sts	0x00A6, r25
    1496:	0b c0       	rjmp	.+22     	; 0x14ae <__vector_13+0x6c>
	}
	else
	{
 		commande[uart_in_counter] = data;
    1498:	e0 91 a6 00 	lds	r30, 0x00A6
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	e8 55       	subi	r30, 0x58	; 88
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	80 83       	st	Z, r24
 		uart_in_counter++;
    14a4:	90 91 a6 00 	lds	r25, 0x00A6
    14a8:	9f 5f       	subi	r25, 0xFF	; 255
    14aa:	90 93 a6 00 	sts	0x00A6, r25
	}
	/* Reset counter*/
	if(uart_in_counter == 3)
    14ae:	90 91 a6 00 	lds	r25, 0x00A6
    14b2:	93 30       	cpi	r25, 0x03	; 3
    14b4:	29 f4       	brne	.+10     	; 0x14c0 <__vector_13+0x7e>
	{
		flag_CMD_in = 1;
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	90 93 ac 00 	sts	0x00AC, r25
 		uart_in_counter = 0;
    14bc:	10 92 a6 00 	sts	0x00A6, r1
	}

	/* Send echo if enabled */
	if( flag_echo_EN == 1)
    14c0:	90 91 68 00 	lds	r25, 0x0068
    14c4:	91 30       	cpi	r25, 0x01	; 1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <__vector_13+0x88>
	{
		UDR = data;
    14c8:	8c b9       	out	0x0c, r24	; 12
	}
}
    14ca:	ff 91       	pop	r31
    14cc:	ef 91       	pop	r30
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <initUART>:
	//- 1 bit darrêt 
	//- Mode : Interruption
	//- 8 bits de données 
	//- pas de parité
	
	flag_echo_EN = 1;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	80 93 68 00 	sts	0x0068, r24
	flag_CMD_in = 0;
    14e2:	10 92 ac 00 	sts	0x00AC, r1
	uart_out_counter = 0;
    14e6:	10 92 a7 00 	sts	0x00A7, r1
	uart_in_counter = 0;
    14ea:	10 92 a6 00 	sts	0x00A6, r1
    UCSRC = (1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|
    14ee:	86 e8       	ldi	r24, 0x86	; 134
    14f0:	80 bd       	out	0x20, r24	; 32
			(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0)|(0<<UCPOL);
			
    UCSRB = (1<<RXCIE)|(1<<TXCIE)|(1<<RXEN)|(1<<TXEN)|(0<<UCSZ2);       
    14f2:	88 ed       	ldi	r24, 0xD8	; 216
    14f4:	8a b9       	out	0x0a, r24	; 10
   
    /* set baud rate */
    UBRRH = (uint8_t)(UART_BAUD_SELECT >> 8);         
    14f6:	10 bc       	out	0x20, r1	; 32
    UBRRL = (uint8_t)(UART_BAUD_SELECT & 0x00FF);
    14f8:	87 e6       	ldi	r24, 0x67	; 103
    14fa:	89 b9       	out	0x09, r24	; 9
	
	/*Enable WATCHDOG with a 1s timer*/
	wdt_enable(WDTO_1S);          
    14fc:	2e e0       	ldi	r18, 0x0E	; 14
    14fe:	88 e1       	ldi	r24, 0x18	; 24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	a8 95       	wdr
    1508:	81 bd       	out	0x21, r24	; 33
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	21 bd       	out	0x21, r18	; 33
    150e:	08 95       	ret

00001510 <__subsf3>:
    1510:	50 58       	subi	r21, 0x80	; 128

00001512 <__addsf3>:
    1512:	bb 27       	eor	r27, r27
    1514:	aa 27       	eor	r26, r26
    1516:	0e d0       	rcall	.+28     	; 0x1534 <__addsf3x>
    1518:	70 c1       	rjmp	.+736    	; 0x17fa <__fp_round>
    151a:	61 d1       	rcall	.+706    	; 0x17de <__fp_pscA>
    151c:	30 f0       	brcs	.+12     	; 0x152a <__addsf3+0x18>
    151e:	66 d1       	rcall	.+716    	; 0x17ec <__fp_pscB>
    1520:	20 f0       	brcs	.+8      	; 0x152a <__addsf3+0x18>
    1522:	31 f4       	brne	.+12     	; 0x1530 <__addsf3+0x1e>
    1524:	9f 3f       	cpi	r25, 0xFF	; 255
    1526:	11 f4       	brne	.+4      	; 0x152c <__addsf3+0x1a>
    1528:	1e f4       	brtc	.+6      	; 0x1530 <__addsf3+0x1e>
    152a:	56 c1       	rjmp	.+684    	; 0x17d8 <__fp_nan>
    152c:	0e f4       	brtc	.+2      	; 0x1530 <__addsf3+0x1e>
    152e:	e0 95       	com	r30
    1530:	e7 fb       	bst	r30, 7
    1532:	4c c1       	rjmp	.+664    	; 0x17cc <__fp_inf>

00001534 <__addsf3x>:
    1534:	e9 2f       	mov	r30, r25
    1536:	72 d1       	rcall	.+740    	; 0x181c <__fp_split3>
    1538:	80 f3       	brcs	.-32     	; 0x151a <__addsf3+0x8>
    153a:	ba 17       	cp	r27, r26
    153c:	62 07       	cpc	r22, r18
    153e:	73 07       	cpc	r23, r19
    1540:	84 07       	cpc	r24, r20
    1542:	95 07       	cpc	r25, r21
    1544:	18 f0       	brcs	.+6      	; 0x154c <__addsf3x+0x18>
    1546:	71 f4       	brne	.+28     	; 0x1564 <__addsf3x+0x30>
    1548:	9e f5       	brtc	.+102    	; 0x15b0 <__addsf3x+0x7c>
    154a:	8a c1       	rjmp	.+788    	; 0x1860 <__fp_zero>
    154c:	0e f4       	brtc	.+2      	; 0x1550 <__addsf3x+0x1c>
    154e:	e0 95       	com	r30
    1550:	0b 2e       	mov	r0, r27
    1552:	ba 2f       	mov	r27, r26
    1554:	a0 2d       	mov	r26, r0
    1556:	0b 01       	movw	r0, r22
    1558:	b9 01       	movw	r22, r18
    155a:	90 01       	movw	r18, r0
    155c:	0c 01       	movw	r0, r24
    155e:	ca 01       	movw	r24, r20
    1560:	a0 01       	movw	r20, r0
    1562:	11 24       	eor	r1, r1
    1564:	ff 27       	eor	r31, r31
    1566:	59 1b       	sub	r21, r25
    1568:	99 f0       	breq	.+38     	; 0x1590 <__addsf3x+0x5c>
    156a:	59 3f       	cpi	r21, 0xF9	; 249
    156c:	50 f4       	brcc	.+20     	; 0x1582 <__addsf3x+0x4e>
    156e:	50 3e       	cpi	r21, 0xE0	; 224
    1570:	68 f1       	brcs	.+90     	; 0x15cc <__addsf3x+0x98>
    1572:	1a 16       	cp	r1, r26
    1574:	f0 40       	sbci	r31, 0x00	; 0
    1576:	a2 2f       	mov	r26, r18
    1578:	23 2f       	mov	r18, r19
    157a:	34 2f       	mov	r19, r20
    157c:	44 27       	eor	r20, r20
    157e:	58 5f       	subi	r21, 0xF8	; 248
    1580:	f3 cf       	rjmp	.-26     	; 0x1568 <__addsf3x+0x34>
    1582:	46 95       	lsr	r20
    1584:	37 95       	ror	r19
    1586:	27 95       	ror	r18
    1588:	a7 95       	ror	r26
    158a:	f0 40       	sbci	r31, 0x00	; 0
    158c:	53 95       	inc	r21
    158e:	c9 f7       	brne	.-14     	; 0x1582 <__addsf3x+0x4e>
    1590:	7e f4       	brtc	.+30     	; 0x15b0 <__addsf3x+0x7c>
    1592:	1f 16       	cp	r1, r31
    1594:	ba 0b       	sbc	r27, r26
    1596:	62 0b       	sbc	r22, r18
    1598:	73 0b       	sbc	r23, r19
    159a:	84 0b       	sbc	r24, r20
    159c:	ba f0       	brmi	.+46     	; 0x15cc <__addsf3x+0x98>
    159e:	91 50       	subi	r25, 0x01	; 1
    15a0:	a1 f0       	breq	.+40     	; 0x15ca <__addsf3x+0x96>
    15a2:	ff 0f       	add	r31, r31
    15a4:	bb 1f       	adc	r27, r27
    15a6:	66 1f       	adc	r22, r22
    15a8:	77 1f       	adc	r23, r23
    15aa:	88 1f       	adc	r24, r24
    15ac:	c2 f7       	brpl	.-16     	; 0x159e <__addsf3x+0x6a>
    15ae:	0e c0       	rjmp	.+28     	; 0x15cc <__addsf3x+0x98>
    15b0:	ba 0f       	add	r27, r26
    15b2:	62 1f       	adc	r22, r18
    15b4:	73 1f       	adc	r23, r19
    15b6:	84 1f       	adc	r24, r20
    15b8:	48 f4       	brcc	.+18     	; 0x15cc <__addsf3x+0x98>
    15ba:	87 95       	ror	r24
    15bc:	77 95       	ror	r23
    15be:	67 95       	ror	r22
    15c0:	b7 95       	ror	r27
    15c2:	f7 95       	ror	r31
    15c4:	9e 3f       	cpi	r25, 0xFE	; 254
    15c6:	08 f0       	brcs	.+2      	; 0x15ca <__addsf3x+0x96>
    15c8:	b3 cf       	rjmp	.-154    	; 0x1530 <__addsf3+0x1e>
    15ca:	93 95       	inc	r25
    15cc:	88 0f       	add	r24, r24
    15ce:	08 f0       	brcs	.+2      	; 0x15d2 <__addsf3x+0x9e>
    15d0:	99 27       	eor	r25, r25
    15d2:	ee 0f       	add	r30, r30
    15d4:	97 95       	ror	r25
    15d6:	87 95       	ror	r24
    15d8:	08 95       	ret

000015da <__cmpsf2>:
    15da:	d4 d0       	rcall	.+424    	; 0x1784 <__fp_cmp>
    15dc:	08 f4       	brcc	.+2      	; 0x15e0 <__cmpsf2+0x6>
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	08 95       	ret

000015e2 <__divsf3>:
    15e2:	0c d0       	rcall	.+24     	; 0x15fc <__divsf3x>
    15e4:	0a c1       	rjmp	.+532    	; 0x17fa <__fp_round>
    15e6:	02 d1       	rcall	.+516    	; 0x17ec <__fp_pscB>
    15e8:	40 f0       	brcs	.+16     	; 0x15fa <__divsf3+0x18>
    15ea:	f9 d0       	rcall	.+498    	; 0x17de <__fp_pscA>
    15ec:	30 f0       	brcs	.+12     	; 0x15fa <__divsf3+0x18>
    15ee:	21 f4       	brne	.+8      	; 0x15f8 <__divsf3+0x16>
    15f0:	5f 3f       	cpi	r21, 0xFF	; 255
    15f2:	19 f0       	breq	.+6      	; 0x15fa <__divsf3+0x18>
    15f4:	eb c0       	rjmp	.+470    	; 0x17cc <__fp_inf>
    15f6:	51 11       	cpse	r21, r1
    15f8:	34 c1       	rjmp	.+616    	; 0x1862 <__fp_szero>
    15fa:	ee c0       	rjmp	.+476    	; 0x17d8 <__fp_nan>

000015fc <__divsf3x>:
    15fc:	0f d1       	rcall	.+542    	; 0x181c <__fp_split3>
    15fe:	98 f3       	brcs	.-26     	; 0x15e6 <__divsf3+0x4>

00001600 <__divsf3_pse>:
    1600:	99 23       	and	r25, r25
    1602:	c9 f3       	breq	.-14     	; 0x15f6 <__divsf3+0x14>
    1604:	55 23       	and	r21, r21
    1606:	b1 f3       	breq	.-20     	; 0x15f4 <__divsf3+0x12>
    1608:	95 1b       	sub	r25, r21
    160a:	55 0b       	sbc	r21, r21
    160c:	bb 27       	eor	r27, r27
    160e:	aa 27       	eor	r26, r26
    1610:	62 17       	cp	r22, r18
    1612:	73 07       	cpc	r23, r19
    1614:	84 07       	cpc	r24, r20
    1616:	38 f0       	brcs	.+14     	; 0x1626 <__divsf3_pse+0x26>
    1618:	9f 5f       	subi	r25, 0xFF	; 255
    161a:	5f 4f       	sbci	r21, 0xFF	; 255
    161c:	22 0f       	add	r18, r18
    161e:	33 1f       	adc	r19, r19
    1620:	44 1f       	adc	r20, r20
    1622:	aa 1f       	adc	r26, r26
    1624:	a9 f3       	breq	.-22     	; 0x1610 <__divsf3_pse+0x10>
    1626:	33 d0       	rcall	.+102    	; 0x168e <__divsf3_pse+0x8e>
    1628:	0e 2e       	mov	r0, r30
    162a:	3a f0       	brmi	.+14     	; 0x163a <__divsf3_pse+0x3a>
    162c:	e0 e8       	ldi	r30, 0x80	; 128
    162e:	30 d0       	rcall	.+96     	; 0x1690 <__divsf3_pse+0x90>
    1630:	91 50       	subi	r25, 0x01	; 1
    1632:	50 40       	sbci	r21, 0x00	; 0
    1634:	e6 95       	lsr	r30
    1636:	00 1c       	adc	r0, r0
    1638:	ca f7       	brpl	.-14     	; 0x162c <__divsf3_pse+0x2c>
    163a:	29 d0       	rcall	.+82     	; 0x168e <__divsf3_pse+0x8e>
    163c:	fe 2f       	mov	r31, r30
    163e:	27 d0       	rcall	.+78     	; 0x168e <__divsf3_pse+0x8e>
    1640:	66 0f       	add	r22, r22
    1642:	77 1f       	adc	r23, r23
    1644:	88 1f       	adc	r24, r24
    1646:	bb 1f       	adc	r27, r27
    1648:	26 17       	cp	r18, r22
    164a:	37 07       	cpc	r19, r23
    164c:	48 07       	cpc	r20, r24
    164e:	ab 07       	cpc	r26, r27
    1650:	b0 e8       	ldi	r27, 0x80	; 128
    1652:	09 f0       	breq	.+2      	; 0x1656 <__divsf3_pse+0x56>
    1654:	bb 0b       	sbc	r27, r27
    1656:	80 2d       	mov	r24, r0
    1658:	bf 01       	movw	r22, r30
    165a:	ff 27       	eor	r31, r31
    165c:	93 58       	subi	r25, 0x83	; 131
    165e:	5f 4f       	sbci	r21, 0xFF	; 255
    1660:	2a f0       	brmi	.+10     	; 0x166c <__divsf3_pse+0x6c>
    1662:	9e 3f       	cpi	r25, 0xFE	; 254
    1664:	51 05       	cpc	r21, r1
    1666:	68 f0       	brcs	.+26     	; 0x1682 <__divsf3_pse+0x82>
    1668:	b1 c0       	rjmp	.+354    	; 0x17cc <__fp_inf>
    166a:	fb c0       	rjmp	.+502    	; 0x1862 <__fp_szero>
    166c:	5f 3f       	cpi	r21, 0xFF	; 255
    166e:	ec f3       	brlt	.-6      	; 0x166a <__divsf3_pse+0x6a>
    1670:	98 3e       	cpi	r25, 0xE8	; 232
    1672:	dc f3       	brlt	.-10     	; 0x166a <__divsf3_pse+0x6a>
    1674:	86 95       	lsr	r24
    1676:	77 95       	ror	r23
    1678:	67 95       	ror	r22
    167a:	b7 95       	ror	r27
    167c:	f7 95       	ror	r31
    167e:	9f 5f       	subi	r25, 0xFF	; 255
    1680:	c9 f7       	brne	.-14     	; 0x1674 <__divsf3_pse+0x74>
    1682:	88 0f       	add	r24, r24
    1684:	91 1d       	adc	r25, r1
    1686:	96 95       	lsr	r25
    1688:	87 95       	ror	r24
    168a:	97 f9       	bld	r25, 7
    168c:	08 95       	ret
    168e:	e1 e0       	ldi	r30, 0x01	; 1
    1690:	66 0f       	add	r22, r22
    1692:	77 1f       	adc	r23, r23
    1694:	88 1f       	adc	r24, r24
    1696:	bb 1f       	adc	r27, r27
    1698:	62 17       	cp	r22, r18
    169a:	73 07       	cpc	r23, r19
    169c:	84 07       	cpc	r24, r20
    169e:	ba 07       	cpc	r27, r26
    16a0:	20 f0       	brcs	.+8      	; 0x16aa <__divsf3_pse+0xaa>
    16a2:	62 1b       	sub	r22, r18
    16a4:	73 0b       	sbc	r23, r19
    16a6:	84 0b       	sbc	r24, r20
    16a8:	ba 0b       	sbc	r27, r26
    16aa:	ee 1f       	adc	r30, r30
    16ac:	88 f7       	brcc	.-30     	; 0x1690 <__divsf3_pse+0x90>
    16ae:	e0 95       	com	r30
    16b0:	08 95       	ret

000016b2 <__fixunssfsi>:
    16b2:	bc d0       	rcall	.+376    	; 0x182c <__fp_splitA>
    16b4:	88 f0       	brcs	.+34     	; 0x16d8 <__fixunssfsi+0x26>
    16b6:	9f 57       	subi	r25, 0x7F	; 127
    16b8:	90 f0       	brcs	.+36     	; 0x16de <__fixunssfsi+0x2c>
    16ba:	b9 2f       	mov	r27, r25
    16bc:	99 27       	eor	r25, r25
    16be:	b7 51       	subi	r27, 0x17	; 23
    16c0:	a0 f0       	brcs	.+40     	; 0x16ea <__fixunssfsi+0x38>
    16c2:	d1 f0       	breq	.+52     	; 0x16f8 <__fixunssfsi+0x46>
    16c4:	66 0f       	add	r22, r22
    16c6:	77 1f       	adc	r23, r23
    16c8:	88 1f       	adc	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	1a f0       	brmi	.+6      	; 0x16d4 <__fixunssfsi+0x22>
    16ce:	ba 95       	dec	r27
    16d0:	c9 f7       	brne	.-14     	; 0x16c4 <__fixunssfsi+0x12>
    16d2:	12 c0       	rjmp	.+36     	; 0x16f8 <__fixunssfsi+0x46>
    16d4:	b1 30       	cpi	r27, 0x01	; 1
    16d6:	81 f0       	breq	.+32     	; 0x16f8 <__fixunssfsi+0x46>
    16d8:	c3 d0       	rcall	.+390    	; 0x1860 <__fp_zero>
    16da:	b1 e0       	ldi	r27, 0x01	; 1
    16dc:	08 95       	ret
    16de:	c0 c0       	rjmp	.+384    	; 0x1860 <__fp_zero>
    16e0:	67 2f       	mov	r22, r23
    16e2:	78 2f       	mov	r23, r24
    16e4:	88 27       	eor	r24, r24
    16e6:	b8 5f       	subi	r27, 0xF8	; 248
    16e8:	39 f0       	breq	.+14     	; 0x16f8 <__fixunssfsi+0x46>
    16ea:	b9 3f       	cpi	r27, 0xF9	; 249
    16ec:	cc f3       	brlt	.-14     	; 0x16e0 <__fixunssfsi+0x2e>
    16ee:	86 95       	lsr	r24
    16f0:	77 95       	ror	r23
    16f2:	67 95       	ror	r22
    16f4:	b3 95       	inc	r27
    16f6:	d9 f7       	brne	.-10     	; 0x16ee <__fixunssfsi+0x3c>
    16f8:	3e f4       	brtc	.+14     	; 0x1708 <__fixunssfsi+0x56>
    16fa:	90 95       	com	r25
    16fc:	80 95       	com	r24
    16fe:	70 95       	com	r23
    1700:	61 95       	neg	r22
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	8f 4f       	sbci	r24, 0xFF	; 255
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	08 95       	ret

0000170a <__floatunsisf>:
    170a:	e8 94       	clt
    170c:	09 c0       	rjmp	.+18     	; 0x1720 <__floatsisf+0x12>

0000170e <__floatsisf>:
    170e:	97 fb       	bst	r25, 7
    1710:	3e f4       	brtc	.+14     	; 0x1720 <__floatsisf+0x12>
    1712:	90 95       	com	r25
    1714:	80 95       	com	r24
    1716:	70 95       	com	r23
    1718:	61 95       	neg	r22
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	8f 4f       	sbci	r24, 0xFF	; 255
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	99 23       	and	r25, r25
    1722:	a9 f0       	breq	.+42     	; 0x174e <__floatsisf+0x40>
    1724:	f9 2f       	mov	r31, r25
    1726:	96 e9       	ldi	r25, 0x96	; 150
    1728:	bb 27       	eor	r27, r27
    172a:	93 95       	inc	r25
    172c:	f6 95       	lsr	r31
    172e:	87 95       	ror	r24
    1730:	77 95       	ror	r23
    1732:	67 95       	ror	r22
    1734:	b7 95       	ror	r27
    1736:	f1 11       	cpse	r31, r1
    1738:	f8 cf       	rjmp	.-16     	; 0x172a <__floatsisf+0x1c>
    173a:	fa f4       	brpl	.+62     	; 0x177a <__floatsisf+0x6c>
    173c:	bb 0f       	add	r27, r27
    173e:	11 f4       	brne	.+4      	; 0x1744 <__floatsisf+0x36>
    1740:	60 ff       	sbrs	r22, 0
    1742:	1b c0       	rjmp	.+54     	; 0x177a <__floatsisf+0x6c>
    1744:	6f 5f       	subi	r22, 0xFF	; 255
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	8f 4f       	sbci	r24, 0xFF	; 255
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	16 c0       	rjmp	.+44     	; 0x177a <__floatsisf+0x6c>
    174e:	88 23       	and	r24, r24
    1750:	11 f0       	breq	.+4      	; 0x1756 <__floatsisf+0x48>
    1752:	96 e9       	ldi	r25, 0x96	; 150
    1754:	11 c0       	rjmp	.+34     	; 0x1778 <__floatsisf+0x6a>
    1756:	77 23       	and	r23, r23
    1758:	21 f0       	breq	.+8      	; 0x1762 <__floatsisf+0x54>
    175a:	9e e8       	ldi	r25, 0x8E	; 142
    175c:	87 2f       	mov	r24, r23
    175e:	76 2f       	mov	r23, r22
    1760:	05 c0       	rjmp	.+10     	; 0x176c <__floatsisf+0x5e>
    1762:	66 23       	and	r22, r22
    1764:	71 f0       	breq	.+28     	; 0x1782 <__floatsisf+0x74>
    1766:	96 e8       	ldi	r25, 0x86	; 134
    1768:	86 2f       	mov	r24, r22
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	2a f0       	brmi	.+10     	; 0x177a <__floatsisf+0x6c>
    1770:	9a 95       	dec	r25
    1772:	66 0f       	add	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	da f7       	brpl	.-10     	; 0x1770 <__floatsisf+0x62>
    177a:	88 0f       	add	r24, r24
    177c:	96 95       	lsr	r25
    177e:	87 95       	ror	r24
    1780:	97 f9       	bld	r25, 7
    1782:	08 95       	ret

00001784 <__fp_cmp>:
    1784:	99 0f       	add	r25, r25
    1786:	00 08       	sbc	r0, r0
    1788:	55 0f       	add	r21, r21
    178a:	aa 0b       	sbc	r26, r26
    178c:	e0 e8       	ldi	r30, 0x80	; 128
    178e:	fe ef       	ldi	r31, 0xFE	; 254
    1790:	16 16       	cp	r1, r22
    1792:	17 06       	cpc	r1, r23
    1794:	e8 07       	cpc	r30, r24
    1796:	f9 07       	cpc	r31, r25
    1798:	c0 f0       	brcs	.+48     	; 0x17ca <__fp_cmp+0x46>
    179a:	12 16       	cp	r1, r18
    179c:	13 06       	cpc	r1, r19
    179e:	e4 07       	cpc	r30, r20
    17a0:	f5 07       	cpc	r31, r21
    17a2:	98 f0       	brcs	.+38     	; 0x17ca <__fp_cmp+0x46>
    17a4:	62 1b       	sub	r22, r18
    17a6:	73 0b       	sbc	r23, r19
    17a8:	84 0b       	sbc	r24, r20
    17aa:	95 0b       	sbc	r25, r21
    17ac:	39 f4       	brne	.+14     	; 0x17bc <__fp_cmp+0x38>
    17ae:	0a 26       	eor	r0, r26
    17b0:	61 f0       	breq	.+24     	; 0x17ca <__fp_cmp+0x46>
    17b2:	23 2b       	or	r18, r19
    17b4:	24 2b       	or	r18, r20
    17b6:	25 2b       	or	r18, r21
    17b8:	21 f4       	brne	.+8      	; 0x17c2 <__fp_cmp+0x3e>
    17ba:	08 95       	ret
    17bc:	0a 26       	eor	r0, r26
    17be:	09 f4       	brne	.+2      	; 0x17c2 <__fp_cmp+0x3e>
    17c0:	a1 40       	sbci	r26, 0x01	; 1
    17c2:	a6 95       	lsr	r26
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	81 1d       	adc	r24, r1
    17c8:	81 1d       	adc	r24, r1
    17ca:	08 95       	ret

000017cc <__fp_inf>:
    17cc:	97 f9       	bld	r25, 7
    17ce:	9f 67       	ori	r25, 0x7F	; 127
    17d0:	80 e8       	ldi	r24, 0x80	; 128
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	08 95       	ret

000017d8 <__fp_nan>:
    17d8:	9f ef       	ldi	r25, 0xFF	; 255
    17da:	80 ec       	ldi	r24, 0xC0	; 192
    17dc:	08 95       	ret

000017de <__fp_pscA>:
    17de:	00 24       	eor	r0, r0
    17e0:	0a 94       	dec	r0
    17e2:	16 16       	cp	r1, r22
    17e4:	17 06       	cpc	r1, r23
    17e6:	18 06       	cpc	r1, r24
    17e8:	09 06       	cpc	r0, r25
    17ea:	08 95       	ret

000017ec <__fp_pscB>:
    17ec:	00 24       	eor	r0, r0
    17ee:	0a 94       	dec	r0
    17f0:	12 16       	cp	r1, r18
    17f2:	13 06       	cpc	r1, r19
    17f4:	14 06       	cpc	r1, r20
    17f6:	05 06       	cpc	r0, r21
    17f8:	08 95       	ret

000017fa <__fp_round>:
    17fa:	09 2e       	mov	r0, r25
    17fc:	03 94       	inc	r0
    17fe:	00 0c       	add	r0, r0
    1800:	11 f4       	brne	.+4      	; 0x1806 <__fp_round+0xc>
    1802:	88 23       	and	r24, r24
    1804:	52 f0       	brmi	.+20     	; 0x181a <__fp_round+0x20>
    1806:	bb 0f       	add	r27, r27
    1808:	40 f4       	brcc	.+16     	; 0x181a <__fp_round+0x20>
    180a:	bf 2b       	or	r27, r31
    180c:	11 f4       	brne	.+4      	; 0x1812 <__fp_round+0x18>
    180e:	60 ff       	sbrs	r22, 0
    1810:	04 c0       	rjmp	.+8      	; 0x181a <__fp_round+0x20>
    1812:	6f 5f       	subi	r22, 0xFF	; 255
    1814:	7f 4f       	sbci	r23, 0xFF	; 255
    1816:	8f 4f       	sbci	r24, 0xFF	; 255
    1818:	9f 4f       	sbci	r25, 0xFF	; 255
    181a:	08 95       	ret

0000181c <__fp_split3>:
    181c:	57 fd       	sbrc	r21, 7
    181e:	90 58       	subi	r25, 0x80	; 128
    1820:	44 0f       	add	r20, r20
    1822:	55 1f       	adc	r21, r21
    1824:	59 f0       	breq	.+22     	; 0x183c <__fp_splitA+0x10>
    1826:	5f 3f       	cpi	r21, 0xFF	; 255
    1828:	71 f0       	breq	.+28     	; 0x1846 <__fp_splitA+0x1a>
    182a:	47 95       	ror	r20

0000182c <__fp_splitA>:
    182c:	88 0f       	add	r24, r24
    182e:	97 fb       	bst	r25, 7
    1830:	99 1f       	adc	r25, r25
    1832:	61 f0       	breq	.+24     	; 0x184c <__fp_splitA+0x20>
    1834:	9f 3f       	cpi	r25, 0xFF	; 255
    1836:	79 f0       	breq	.+30     	; 0x1856 <__fp_splitA+0x2a>
    1838:	87 95       	ror	r24
    183a:	08 95       	ret
    183c:	12 16       	cp	r1, r18
    183e:	13 06       	cpc	r1, r19
    1840:	14 06       	cpc	r1, r20
    1842:	55 1f       	adc	r21, r21
    1844:	f2 cf       	rjmp	.-28     	; 0x182a <__fp_split3+0xe>
    1846:	46 95       	lsr	r20
    1848:	f1 df       	rcall	.-30     	; 0x182c <__fp_splitA>
    184a:	08 c0       	rjmp	.+16     	; 0x185c <__fp_splitA+0x30>
    184c:	16 16       	cp	r1, r22
    184e:	17 06       	cpc	r1, r23
    1850:	18 06       	cpc	r1, r24
    1852:	99 1f       	adc	r25, r25
    1854:	f1 cf       	rjmp	.-30     	; 0x1838 <__fp_splitA+0xc>
    1856:	86 95       	lsr	r24
    1858:	71 05       	cpc	r23, r1
    185a:	61 05       	cpc	r22, r1
    185c:	08 94       	sec
    185e:	08 95       	ret

00001860 <__fp_zero>:
    1860:	e8 94       	clt

00001862 <__fp_szero>:
    1862:	bb 27       	eor	r27, r27
    1864:	66 27       	eor	r22, r22
    1866:	77 27       	eor	r23, r23
    1868:	cb 01       	movw	r24, r22
    186a:	97 f9       	bld	r25, 7
    186c:	08 95       	ret

0000186e <__gesf2>:
    186e:	8a df       	rcall	.-236    	; 0x1784 <__fp_cmp>
    1870:	08 f4       	brcc	.+2      	; 0x1874 <__gesf2+0x6>
    1872:	8f ef       	ldi	r24, 0xFF	; 255
    1874:	08 95       	ret

00001876 <__mulsf3>:
    1876:	0b d0       	rcall	.+22     	; 0x188e <__mulsf3x>
    1878:	c0 cf       	rjmp	.-128    	; 0x17fa <__fp_round>
    187a:	b1 df       	rcall	.-158    	; 0x17de <__fp_pscA>
    187c:	28 f0       	brcs	.+10     	; 0x1888 <__mulsf3+0x12>
    187e:	b6 df       	rcall	.-148    	; 0x17ec <__fp_pscB>
    1880:	18 f0       	brcs	.+6      	; 0x1888 <__mulsf3+0x12>
    1882:	95 23       	and	r25, r21
    1884:	09 f0       	breq	.+2      	; 0x1888 <__mulsf3+0x12>
    1886:	a2 cf       	rjmp	.-188    	; 0x17cc <__fp_inf>
    1888:	a7 cf       	rjmp	.-178    	; 0x17d8 <__fp_nan>
    188a:	11 24       	eor	r1, r1
    188c:	ea cf       	rjmp	.-44     	; 0x1862 <__fp_szero>

0000188e <__mulsf3x>:
    188e:	c6 df       	rcall	.-116    	; 0x181c <__fp_split3>
    1890:	a0 f3       	brcs	.-24     	; 0x187a <__mulsf3+0x4>

00001892 <__mulsf3_pse>:
    1892:	95 9f       	mul	r25, r21
    1894:	d1 f3       	breq	.-12     	; 0x188a <__mulsf3+0x14>
    1896:	95 0f       	add	r25, r21
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	55 1f       	adc	r21, r21
    189c:	62 9f       	mul	r22, r18
    189e:	f0 01       	movw	r30, r0
    18a0:	72 9f       	mul	r23, r18
    18a2:	bb 27       	eor	r27, r27
    18a4:	f0 0d       	add	r31, r0
    18a6:	b1 1d       	adc	r27, r1
    18a8:	63 9f       	mul	r22, r19
    18aa:	aa 27       	eor	r26, r26
    18ac:	f0 0d       	add	r31, r0
    18ae:	b1 1d       	adc	r27, r1
    18b0:	aa 1f       	adc	r26, r26
    18b2:	64 9f       	mul	r22, r20
    18b4:	66 27       	eor	r22, r22
    18b6:	b0 0d       	add	r27, r0
    18b8:	a1 1d       	adc	r26, r1
    18ba:	66 1f       	adc	r22, r22
    18bc:	82 9f       	mul	r24, r18
    18be:	22 27       	eor	r18, r18
    18c0:	b0 0d       	add	r27, r0
    18c2:	a1 1d       	adc	r26, r1
    18c4:	62 1f       	adc	r22, r18
    18c6:	73 9f       	mul	r23, r19
    18c8:	b0 0d       	add	r27, r0
    18ca:	a1 1d       	adc	r26, r1
    18cc:	62 1f       	adc	r22, r18
    18ce:	83 9f       	mul	r24, r19
    18d0:	a0 0d       	add	r26, r0
    18d2:	61 1d       	adc	r22, r1
    18d4:	22 1f       	adc	r18, r18
    18d6:	74 9f       	mul	r23, r20
    18d8:	33 27       	eor	r19, r19
    18da:	a0 0d       	add	r26, r0
    18dc:	61 1d       	adc	r22, r1
    18de:	23 1f       	adc	r18, r19
    18e0:	84 9f       	mul	r24, r20
    18e2:	60 0d       	add	r22, r0
    18e4:	21 1d       	adc	r18, r1
    18e6:	82 2f       	mov	r24, r18
    18e8:	76 2f       	mov	r23, r22
    18ea:	6a 2f       	mov	r22, r26
    18ec:	11 24       	eor	r1, r1
    18ee:	9f 57       	subi	r25, 0x7F	; 127
    18f0:	50 40       	sbci	r21, 0x00	; 0
    18f2:	8a f0       	brmi	.+34     	; 0x1916 <__mulsf3_pse+0x84>
    18f4:	e1 f0       	breq	.+56     	; 0x192e <__mulsf3_pse+0x9c>
    18f6:	88 23       	and	r24, r24
    18f8:	4a f0       	brmi	.+18     	; 0x190c <__mulsf3_pse+0x7a>
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	bb 1f       	adc	r27, r27
    1900:	66 1f       	adc	r22, r22
    1902:	77 1f       	adc	r23, r23
    1904:	88 1f       	adc	r24, r24
    1906:	91 50       	subi	r25, 0x01	; 1
    1908:	50 40       	sbci	r21, 0x00	; 0
    190a:	a9 f7       	brne	.-22     	; 0x18f6 <__mulsf3_pse+0x64>
    190c:	9e 3f       	cpi	r25, 0xFE	; 254
    190e:	51 05       	cpc	r21, r1
    1910:	70 f0       	brcs	.+28     	; 0x192e <__mulsf3_pse+0x9c>
    1912:	5c cf       	rjmp	.-328    	; 0x17cc <__fp_inf>
    1914:	a6 cf       	rjmp	.-180    	; 0x1862 <__fp_szero>
    1916:	5f 3f       	cpi	r21, 0xFF	; 255
    1918:	ec f3       	brlt	.-6      	; 0x1914 <__mulsf3_pse+0x82>
    191a:	98 3e       	cpi	r25, 0xE8	; 232
    191c:	dc f3       	brlt	.-10     	; 0x1914 <__mulsf3_pse+0x82>
    191e:	86 95       	lsr	r24
    1920:	77 95       	ror	r23
    1922:	67 95       	ror	r22
    1924:	b7 95       	ror	r27
    1926:	f7 95       	ror	r31
    1928:	e7 95       	ror	r30
    192a:	9f 5f       	subi	r25, 0xFF	; 255
    192c:	c1 f7       	brne	.-16     	; 0x191e <__mulsf3_pse+0x8c>
    192e:	fe 2b       	or	r31, r30
    1930:	88 0f       	add	r24, r24
    1932:	91 1d       	adc	r25, r1
    1934:	96 95       	lsr	r25
    1936:	87 95       	ror	r24
    1938:	97 f9       	bld	r25, 7
    193a:	08 95       	ret

0000193c <__udivmodsi4>:
    193c:	a1 e2       	ldi	r26, 0x21	; 33
    193e:	1a 2e       	mov	r1, r26
    1940:	aa 1b       	sub	r26, r26
    1942:	bb 1b       	sub	r27, r27
    1944:	fd 01       	movw	r30, r26
    1946:	0d c0       	rjmp	.+26     	; 0x1962 <__udivmodsi4_ep>

00001948 <__udivmodsi4_loop>:
    1948:	aa 1f       	adc	r26, r26
    194a:	bb 1f       	adc	r27, r27
    194c:	ee 1f       	adc	r30, r30
    194e:	ff 1f       	adc	r31, r31
    1950:	a2 17       	cp	r26, r18
    1952:	b3 07       	cpc	r27, r19
    1954:	e4 07       	cpc	r30, r20
    1956:	f5 07       	cpc	r31, r21
    1958:	20 f0       	brcs	.+8      	; 0x1962 <__udivmodsi4_ep>
    195a:	a2 1b       	sub	r26, r18
    195c:	b3 0b       	sbc	r27, r19
    195e:	e4 0b       	sbc	r30, r20
    1960:	f5 0b       	sbc	r31, r21

00001962 <__udivmodsi4_ep>:
    1962:	66 1f       	adc	r22, r22
    1964:	77 1f       	adc	r23, r23
    1966:	88 1f       	adc	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	1a 94       	dec	r1
    196c:	69 f7       	brne	.-38     	; 0x1948 <__udivmodsi4_loop>
    196e:	60 95       	com	r22
    1970:	70 95       	com	r23
    1972:	80 95       	com	r24
    1974:	90 95       	com	r25
    1976:	9b 01       	movw	r18, r22
    1978:	ac 01       	movw	r20, r24
    197a:	bd 01       	movw	r22, r26
    197c:	cf 01       	movw	r24, r30
    197e:	08 95       	ret

00001980 <_exit>:
    1980:	f8 94       	cli

00001982 <__stop_program>:
    1982:	ff cf       	rjmp	.-2      	; 0x1982 <__stop_program>
